{"xref": {
  "stories": [
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
        "description": {
          "descriptionAsString": "Story: Showing that @AfterScenario method are executed upon appropriate outcome (ANY, SUCCESS, FAILURE)"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Pass on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          },
          {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          }
        ],
        "name": "after_scenario_outcome.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Pass on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I pass",
                "resolvedPattern": "I\\s+pass"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              },
              {
                "step": "Then I pass",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then I pass",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              },
              {
                "step": "Then I fail",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then I fail",
                  "cause": {
                    "@class": "junit.framework.AssertionFailedError",
                    "detailMessage": "I failed!",
                    "stackTrace": [
                      "junit.framework.Assert.fail(Assert.java:47)",
                      "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "81878b3d-22fc-4285-8acb-bf95d7e4c324"
                },
                "parametrisedStep": "Then I fail",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/and_step.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "be more communicative",
          "asA": "story writer",
          "iWantTo": "explain the use of And steps and also show that I can use keywords in scenario title and comments"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "An initial And step should be marked as pending as there is not previous step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- What is this And of?  JBehave treats as pending",
              "And the wind blows",
              "!-- Look Ma' - I can also use keywords in scenario title and step comments!"
            ]
          },
          {
            "title": "And steps should match the previous step type",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the wind blows",
              "!-- This And is equivalent to another Given",
              "And the wind blows",
              "!-- This And shows that we can chain multiple And steps",
              "And the wind blows",
              "When the wind blows",
              "!-- This And is equivalent to another When",
              "And the wind blows"
            ]
          }
        ],
        "name": "and_step.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "An initial And step should be marked as pending as there is not previous step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- What is this And of?  JBehave treats as pending",
              "And the wind blows",
              "!-- Look Ma' - I can also use keywords in scenario title and step comments!"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              }
            ],
            "results": [
              {
                "step": "!-- What is this And of?  JBehave treats as pending",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "And the wind blows",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "And the wind blows",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "f0010d8c-e1b7-4702-8c0a-58e66c04c3fd"
                },
                "durationInMillis": 0
              },
              {
                "step": "!-- Look Ma' - I can also use keywords in scenario title and step comments!",
                "type": "IGNORABLE",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "And steps should match the previous step type",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the wind blows",
              "!-- This And is equivalent to another Given",
              "And the wind blows",
              "!-- This And shows that we can chain multiple And steps",
              "And the wind blows",
              "When the wind blows",
              "!-- This And is equivalent to another When",
              "And the wind blows"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              }
            ],
            "results": [
              {
                "step": "Given the wind blows",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the wind blows",
                "durationInMillis": 0
              },
              {
                "step": "!-- This And is equivalent to another Given",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "And the wind blows",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And the wind blows",
                "durationInMillis": 0
              },
              {
                "step": "!-- This And shows that we can chain multiple And steps",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "And the wind blows",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And the wind blows",
                "durationInMillis": 0
              },
              {
                "step": "When the wind blows",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the wind blows",
                "durationInMillis": 0
              },
              {
                "step": "!-- This And is equivalent to another When",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "And the wind blows",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And the wind blows",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/claims_with_null_calendar.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|date       |amount|\u000a|none       |0.0   |\u000a|01/06/2010 |2.15  |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "date",
                "amount"
              ],
              "data": [
                [
                  [
                    "date",
                    "none"
                  ],
                  [
                    "amount",
                    "0.0"
                  ]
                ],
                [
                  [
                    "date",
                    "01/06/2010"
                  ],
                  [
                    "amount",
                    "2.15"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a plan with calendar date of <date>",
              "Then the claimant should receive an amount of <amount>"
            ]
          }
        ],
        "name": "claims_with_null_calendar.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|date       |amount|\u000a|none       |0.0   |\u000a|01/06/2010 |2.15  |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "date",
                "amount"
              ],
              "data": [
                [
                  [
                    "date",
                    "none"
                  ],
                  [
                    "amount",
                    "0.0"
                  ]
                ],
                [
                  [
                    "date",
                    "01/06/2010"
                  ],
                  [
                    "amount",
                    "2.15"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a plan with calendar date of <date>",
              "Then the claimant should receive an amount of <amount>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/claims_with_null_calendar.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "date",
                  "none"
                ],
                [
                  "amount",
                  "0.0"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a plan with calendar date of <date>",
                    "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the claimant should receive an amount of <amount>",
                    "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a plan with calendar date of <date>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a plan with calendar date of ｟none｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the claimant should receive an amount of <amount>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the claimant should receive an amount of ｟0.0｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "date",
                  "01/06/2010"
                ],
                [
                  "amount",
                  "2.15"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a plan with calendar date of <date>",
                    "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the claimant should receive an amount of <amount>",
                    "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a plan with calendar date of <date>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a plan with calendar date of ｟01/06/2010｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "Then the claimant should receive an amount of <amount>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the claimant should receive an amount of ｟2.15｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/do_nothing.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- GivenStories:  ignore_me.story",
              "Given I do nothing",
              "!-- Examples: \u000a|I|am|just|lazy|"
            ]
          }
        ],
        "name": "do_nothing.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- GivenStories:  ignore_me.story",
              "Given I do nothing",
              "!-- Examples: \u000a|I|am|just|lazy|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ],
            "results": [
              {
                "step": "!-- GivenStories:  ignore_me.story",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              },
              {
                "step": "!-- Examples: \u000a|I|am|just|lazy|",
                "type": "IGNORABLE",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            }
          ]
        },
        "scenarios": [
          {
            "title": "Table parameter loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: org/jbehave/examples/trader/stories/traders.table",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          {
            "title": "Parameters table loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          }
        ],
        "name": "examples_table_loaded_from_classpath.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Table parameter loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: org/jbehave/examples/trader/stories/traders.table",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "traders are subset to \"%regex\" by name",
                "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the traders: %ranksTable",
                "resolvedPattern": "the\\s+traders:\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the traders: org/jbehave/examples/trader/stories/traders.table",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the traders: ［org/jbehave/examples/trader/stories/traders.table］",
                "durationInMillis": 1
              },
              {
                "step": "!-- This is a comment, which will be ignored in the execution",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "When traders are subset to \".*y\" by name",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When traders are subset to \".*y\" by name",
                "durationInMillis": 0
              },
              {
                "step": "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 1
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Parameters table loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "5.0"
                ],
                [
                  "status",
                  "OFF"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded with <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded with ｟5.0｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "Then the trader is alerted with <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "11.0"
                ],
                [
                  "status",
                  "OFF"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded with <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded with ｟11.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the trader is alerted with <status>",
                    "type": "FAILED",
                    "throwable": {
                      "detailMessage": "Then the trader is alerted with <status>",
                      "cause": {
                        "@class": "java.lang.AssertionError",
                        "detailMessage": "\u000aExpected: \"OFF\"\u000a     got: \"ON\"\u000a",
                        "stackTrace": [
                          "org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:21)",
                          "org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)",
                          "org.jbehave.examples.trader.steps.TraderSteps.theAlertStatusIs(TraderSteps.java:165)",
                          "sun.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)",
                          "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                          "java.lang.reflect.Method.invoke(Method.java:597)",
                          "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                          "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                          "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                          "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                          "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                          "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                          "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                          "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                          "java.lang.Thread.run(Thread.java:680)"
                        ]
                      },
                      "stackTrace": [
                        "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "38573d32-bf9b-4e7f-8358-20531b8f1a7f"
                    },
                    "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "16.0"
                ],
                [
                  "status",
                  "ON"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded with <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded with ｟16.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the trader is alerted with <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the trader is alerted with ｟ON｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "timing": {
        "durationInMillis": 5
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failing_after_stories.story",
        "description": {
          "descriptionAsString": "We want to show that failures in @AfterStories methods will appear in the AfterStories report."
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          }
        ],
        "name": "failing_after_stories.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failing_after_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a trader of name %trader",
                "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is left with no stocks",
                "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the trader sells all stocks",
                "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the alert status is OFF",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a trader of name Mauro",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a trader of name ｟Mauro｠",
                "durationInMillis": 0
              },
              {
                "step": "And the alert status is OFF",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of symbol STK1 and a threshold of 1.5",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded at price 2.0",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟2.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              },
              {
                "step": "When the trader sells all stocks",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the trader sells all stocks",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is left with no stocks",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is left with no stocks",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failure_correlation_one.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Fail on a step in story 1",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 1"
            ]
          }
        ],
        "name": "failure_correlation_one.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Fail on a step in story 1",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 1"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_one.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "When a failure occurs in story 1",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When a failure occurs in story 1",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "32b864a0-6bb0-495a-b8b5-4651c1b5a4b5"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failure_correlation_two.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Fail on a step in story 2",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 2"
            ]
          }
        ],
        "name": "failure_correlation_two.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Fail on a step in story 2",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 2"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_two.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "When a failure occurs in story 2",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When a failure occurs in story 2",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "31203cfc-5930-477f-9de1-37248cf85b84"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
        "description": {
          "descriptionAsString": "Story: Showing that using given stories in a passing scenario following a scenario where are a failure occurred resets the overall \u000abuild result of the story"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          {
            "title": "Pass after given stories",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          }
        ],
        "name": "failure_followed_by_given_stories.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 1
              },
              {
                "step": "Then I fail",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then I fail",
                  "cause": {
                    "@class": "junit.framework.AssertionFailedError",
                    "detailMessage": "I failed!",
                    "stackTrace": [
                      "junit.framework.Assert.fail(Assert.java:47)",
                      "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "ebc27bd5-2793-4838-ad7f-b1301171641b"
                },
                "parametrisedStep": "Then I fail",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Pass after given stories",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/do_nothing.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "!-- GivenStories:  ignore_me.story",
                      "Given I do nothing",
                      "!-- Examples: \u000a|I|am|just|lazy|"
                    ]
                  }
                ],
                "name": "do_nothing.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "!-- GivenStories:  ignore_me.story",
                      "Given I do nothing",
                      "!-- Examples: \u000a|I|am|just|lazy|"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "I do nothing",
                        "resolvedPattern": "I\\s+do\\s+nothing"
                      }
                    ],
                    "results": [
                      {
                        "step": "!-- GivenStories:  ignore_me.story",
                        "type": "IGNORABLE",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Given I do nothing",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given I do nothing",
                        "durationInMillis": 0
                      },
                      {
                        "step": "!-- Examples: \u000a|I|am|just|lazy|",
                        "type": "IGNORABLE",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 1
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 1
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I pass",
                "resolvedPattern": "I\\s+pass"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              },
              {
                "step": "Then I pass",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then I pass",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_non_successful.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that depends on a non successful story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/non_successful.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/non_successful.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/non_successful.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          }
        ],
        "name": "given_non_successful.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that depends on a non successful story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/non_successful.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/non_successful.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/non_successful.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_non_successful.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/non_successful.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "A scenario with failed step",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Then I fail"
                    ]
                  }
                ],
                "name": "non_successful.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "A scenario with failed step",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Then I fail"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 6
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "THEN",
                        "annotatedPattern": "I fail",
                        "resolvedPattern": "I\\s+fail"
                      }
                    ],
                    "results": [
                      {
                        "step": "Then I fail",
                        "type": "FAILED",
                        "throwable": {
                          "detailMessage": "Then I fail",
                          "cause": {
                            "@class": "junit.framework.AssertionFailedError",
                            "detailMessage": "I failed!",
                            "stackTrace": [
                              "junit.framework.Assert.fail(Assert.java:47)",
                              "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                              "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                              "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                              "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                              "java.lang.reflect.Method.invoke(Method.java:597)",
                              "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                              "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:701)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                              "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                              "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                              "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                              "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                              "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                              "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                              "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                              "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                              "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                              "java.lang.Thread.run(Thread.java:680)"
                            ]
                          },
                          "stackTrace": [
                            "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                            "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:701)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                            "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                            "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                            "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                            "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                            "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                            "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                            "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                            "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                            "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                            "java.lang.Thread.run(Thread.java:680)"
                          ],
                          "uuid": "712696d7-01b8-4e06-8ee7-7ed3e5f43555"
                        },
                        "parametrisedStep": "Then I fail",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 6
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the traders: %ranksTable",
                "resolvedPattern": "the\\s+traders:\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given the traders:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 7
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_anchor.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that depends on a given story with parameters specified as anchor pointing to specific examples row. \u000aThe presence of the anchor implies that the scenario is executed normally and not parametrised by examples, i.e. that the scenario is not executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                },
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  [
                    [
                      "symbol",
                      "STK2"
                    ],
                    [
                      "threshold",
                      "2.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK2"
                  ],
                  [
                    "threshold",
                    "2.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          }
        ],
        "name": "given_stories_parametrised_by_anchor.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that depends on a given story with parameters specified as anchor pointing to specific examples row. \u000aThe presence of the anchor implies that the scenario is executed normally and not parametrised by examples, i.e. that the scenario is not executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                },
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  [
                    [
                      "symbol",
                      "STK2"
                    ],
                    [
                      "threshold",
                      "2.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK2"
                  ],
                  [
                    "threshold",
                    "2.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_anchor.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/parametrised.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                    {
                      "@name": "theme",
                      "@value": "parametrisation"
                    }
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  }
                ],
                "name": "parametrised.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given the asset class <assetClass>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given the asset class ｟FX｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Given a stock of <symbol> and a <threshold>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟1.0｠",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 1
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "When the stock is traded at price 1.1",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟1.1｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_examples.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that depends on given stories parametrised by examples. \u000aHere the entire scenario is parametrised by examples, i.e. the scenario is executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|stockExchange|symbol|threshold|price|status|\u000a|NASDAQ|STK1|10.0|5.0|OFF|\u000a|FTSE|STK1|10.0|11.0|ON|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "stockExchange",
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "stockExchange",
                    "NASDAQ"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ],
                [
                  [
                    "stockExchange",
                    "FTSE"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol <symbol> and a threshold of <threshold>",
              "When the stock is traded at price <price>",
              "Then the alert status is <status>"
            ]
          }
        ],
        "name": "given_stories_parametrised_by_examples.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that depends on given stories parametrised by examples. \u000aHere the entire scenario is parametrised by examples, i.e. the scenario is executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|stockExchange|symbol|threshold|price|status|\u000a|NASDAQ|STK1|10.0|5.0|OFF|\u000a|FTSE|STK1|10.0|11.0|ON|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "stockExchange",
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "stockExchange",
                    "NASDAQ"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ],
                [
                  [
                    "stockExchange",
                    "FTSE"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol <symbol> and a threshold of <threshold>",
              "When the stock is traded at price <price>",
              "Then the alert status is <status>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_examples.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "stockExchange",
                  "NASDAQ"
                ],
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "10.0"
                ],
                [
                  "price",
                  "5.0"
                ],
                [
                  "status",
                  "OFF"
                ],
                [
                  "assetClass",
                  "FX"
                ]
              ],
              "performableGivenStories": [
                {
                  "story": {
                    "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                    "description": {
                      "descriptionAsString": ""
                    },
                    "narrative": {
                      "inOrderTo": "",
                      "asA": "",
                      "iWantTo": ""
                    },
                    "meta": {
                      "properties": [
                      ]
                    },
                    "scenarios": [
                      {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      }
                    ],
                    "name": "select_stock_exchange.story",
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    }
                  },
                  "allowed": true,
                  "givenStories": [
                  ],
                  "scenarios": [
                    {
                      "scenario": {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      },
                      "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                      "allowed": true,
                      "exampleScenarios": [
                      ],
                      "givenStories": [
                      ],
                      "beforeSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the asset class %assetClass",
                            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                          },
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the stock exchange %stockExchange",
                            "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                          }
                        ],
                        "results": [
                          {
                            "step": "Given the stock exchange <stockExchange>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Given the stock exchange ｟NASDAQ｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "And the asset class <assetClass>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "And the asset class ｟FX｠",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "afterSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          },
                          {
                            "step": "",
                            "type": "SKIPPED",
                            "durationInMillis": 0
                          },
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      }
                    }
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "timing": {
                    "durationInMillis": 1
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of symbol <symbol> and a threshold of <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟10.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded at price <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded at price ｟5.0｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "Then the alert status is <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the alert status is ｟OFF｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "stockExchange",
                  "FTSE"
                ],
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "10.0"
                ],
                [
                  "price",
                  "11.0"
                ],
                [
                  "status",
                  "ON"
                ],
                [
                  "assetClass",
                  "FX"
                ]
              ],
              "performableGivenStories": [
                {
                  "story": {
                    "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                    "description": {
                      "descriptionAsString": ""
                    },
                    "narrative": {
                      "inOrderTo": "",
                      "asA": "",
                      "iWantTo": ""
                    },
                    "meta": {
                      "properties": [
                      ]
                    },
                    "scenarios": [
                      {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      }
                    ],
                    "name": "select_stock_exchange.story",
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    }
                  },
                  "allowed": true,
                  "givenStories": [
                  ],
                  "scenarios": [
                    {
                      "scenario": {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      },
                      "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                      "allowed": true,
                      "exampleScenarios": [
                      ],
                      "givenStories": [
                      ],
                      "beforeSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the asset class %assetClass",
                            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                          },
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the stock exchange %stockExchange",
                            "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                          }
                        ],
                        "results": [
                          {
                            "step": "Given the stock exchange <stockExchange>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Given the stock exchange ｟FTSE｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "And the asset class <assetClass>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "And the asset class ｟FX｠",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "afterSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          },
                          {
                            "step": "",
                            "type": "SKIPPED",
                            "durationInMillis": 0
                          },
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      }
                    }
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "timing": {
                    "durationInMillis": 0
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of symbol <symbol> and a threshold of <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟10.0｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "When the stock is traded at price <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded at price ｟11.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the alert status is <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the alert status is ｟ON｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 3
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_meta.story",
        "description": {
          "descriptionAsString": "A story using GivenStories at story level parametrised by meta properties"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "threshold",
              "@value": "1.0"
            },
            {
              "@name": "symbol",
              "@value": "STK1"
            },
            {
              "@name": "theme",
              "@value": "parametrisation"
            },
            {
              "@name": "assetClass",
              "@value": "FX"
            }
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that is executed after the given stories parametrised by meta",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          }
        ],
        "name": "given_stories_parametrised_by_meta.story",
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/parametrised.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/parametrised.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                }
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              }
            ],
            "name": "parametrised.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the asset class %assetClass",
                    "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that is executed after the given stories parametrised by meta",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_meta.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "When the stock is traded at price 1.1",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟1.1｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/meta_filtering.story",
        "description": {
          "descriptionAsString": "A story description\u000aover multiple lines"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "author",
              "@value": "Mauro"
            },
            {
              "@name": "theme",
              "@value": "filtering"
            }
          ]
        },
        "scenarios": [
          {
            "title": "A scenario to be skipped\u000aand not executed",
            "meta": {
              "properties": [
                {
                  "@name": "skip",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          {
            "title": "A scenario with an author",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          {
            "title": "A scenario with examples whose rows can be filtered on meta",
            "meta": {
              "properties": [
                {
                  "@name": "run",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|Meta:|Parameter|\u000a|@run yes|value|\u000a|@run not|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "Meta:",
                "Parameter"
              ],
              "data": [
                [
                  [
                    "Meta:",
                    "@run yes"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ],
                [
                  [
                    "Meta:",
                    "@run not"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          }
        ],
        "name": "meta_filtering.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario to be skipped\u000aand not executed",
            "meta": {
              "properties": [
                {
                  "@name": "skip",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 1
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "A scenario with an author",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "A scenario with examples whose rows can be filtered on meta",
            "meta": {
              "properties": [
                {
                  "@name": "run",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|Meta:|Parameter|\u000a|@run yes|value|\u000a|@run not|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "Meta:",
                "Parameter"
              ],
              "data": [
                [
                  [
                    "Meta:",
                    "@run yes"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ],
                [
                  [
                    "Meta:",
                    "@run not"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "Meta:",
                  "@run yes"
                ],
                [
                  "Parameter",
                  "value"
                ],
                [
                  "author",
                  "Mauro"
                ],
                [
                  "run",
                  ""
                ],
                [
                  "theme",
                  "filtering"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "I do nothing",
                    "resolvedPattern": "I\\s+do\\s+nothing"
                  }
                ],
                "results": [
                  {
                    "step": "Given I do nothing",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given I do nothing",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "Meta:",
                  "@run not"
                ],
                [
                  "Parameter",
                  "value"
                ],
                [
                  "author",
                  "Mauro"
                ],
                [
                  "run",
                  ""
                ],
                [
                  "theme",
                  "filtering"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "I do nothing",
                    "resolvedPattern": "I\\s+do\\s+nothing"
                  }
                ],
                "results": [
                  {
                    "step": "Given I do nothing",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given I do nothing",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parameters"
            }
          ]
        },
        "scenarios": [
          {
            "title": "scenario with explicitly mentioned meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "named"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have specified the <theme>",
              "And a <variant>",
              "Then the theme is 'parameters' with variant 'named'"
            ]
          },
          {
            "title": "scenario with hidden meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "foo"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have some step that implicitly requires meta params",
              "Then the theme is 'parameters' with variant 'foo'"
            ]
          }
        ],
        "name": "meta_parametrisation.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "scenario with explicitly mentioned meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "named"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have specified the <theme>",
              "And a <variant>",
              "Then the theme is 'parameters' with variant 'named'"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a <variant>",
                "resolvedPattern": "a\\s+<variant>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the theme is '%theme' with variant '%variant'",
                "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "I have specified the <theme>",
                "resolvedPattern": "I\\s+have\\s+specified\\s+the\\s+<theme>"
              }
            ],
            "results": [
              {
                "step": "Given I have specified the <theme>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I have specified the ｟parameters｠",
                "durationInMillis": 0
              },
              {
                "step": "And a <variant>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And a ｟foo｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the theme is 'parameters' with variant 'named'",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then the theme is 'parameters' with variant 'named'",
                  "cause": {
                    "@class": "org.junit.ComparisonFailure",
                    "detailMessage": "",
                    "stackTrace": [
                      "org.junit.Assert.assertEquals(Assert.java:123)",
                      "org.junit.Assert.assertEquals(Assert.java:145)",
                      "org.jbehave.examples.trader.steps.MetaParametrisationSteps.thenTheThemeAndVariantAre(MetaParametrisationSteps.java:33)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ],
                    "fExpected": "named",
                    "fActual": "foo"
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "c0cdf2c0-c839-42b7-8060-9dca30fdf0e4"
                },
                "parametrisedStep": "Then the theme is 'parameters' with variant 'named'",
                "durationInMillis": 1
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "scenario with hidden meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "foo"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have some step that implicitly requires meta params",
              "Then the theme is 'parameters' with variant 'foo'"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I have some step that implicitly requires meta params",
                "resolvedPattern": "I\\s+have\\s+some\\s+step\\s+that\\s+implicitly\\s+requires\\s+meta\\s+params"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the theme is '%theme' with variant '%variant'",
                "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
              }
            ],
            "results": [
              {
                "step": "Given I have some step that implicitly requires meta params",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I have some step that implicitly requires meta params",
                "durationInMillis": 0
              },
              {
                "step": "Then the theme is 'parameters' with variant 'foo'",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the theme is 'parameters' with variant 'foo'",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/named_annotations.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Supported action and/or event story",
            "meta": {
              "properties": [
                {
                  "@name": "notSupportedActions",
                  "@value": "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                },
                {
                  "@name": "supportedActions",
                  "@value": "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                },
                {
                  "@name": "notSupportedEventTypes",
                  "@value": "DONE,FETCHED,CREATED,TESTED,FIXED"
                },
                {
                  "@name": "supportedEventTypes",
                  "@value": "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|actionSupportability   |eventTypeSupportability|\u000d\u000a|supported              |supported              |\u000d\u000a|notSupported           |supported              |\u000d\u000a|supported              |notSupported           |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "actionSupportability",
                "eventTypeSupportability"
              ],
              "data": [
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "notSupported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "notSupported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
              "When it is received",
              "Then message is consumed without error"
            ]
          }
        ],
        "name": "named_annotations.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Supported action and/or event story",
            "meta": {
              "properties": [
                {
                  "@name": "notSupportedActions",
                  "@value": "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                },
                {
                  "@name": "supportedActions",
                  "@value": "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                },
                {
                  "@name": "notSupportedEventTypes",
                  "@value": "DONE,FETCHED,CREATED,TESTED,FIXED"
                },
                {
                  "@name": "supportedEventTypes",
                  "@value": "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|actionSupportability   |eventTypeSupportability|\u000d\u000a|supported              |supported              |\u000d\u000a|notSupported           |supported              |\u000d\u000a|supported              |notSupported           |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "actionSupportability",
                "eventTypeSupportability"
              ],
              "data": [
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "notSupported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "notSupported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
              "When it is received",
              "Then message is consumed without error"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/named_annotations.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "actionSupportability",
                  "supported"
                ],
                [
                  "eventTypeSupportability",
                  "supported"
                ],
                [
                  "notSupportedActions",
                  "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                ],
                [
                  "notSupportedEventTypes",
                  "DONE,FETCHED,CREATED,TESTED,FIXED"
                ],
                [
                  "supportedActions",
                  "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                ],
                [
                  "supportedEventTypes",
                  "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "3eb8a16b-3d38-4528-b0fb-32d6e53900ac"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "When it is received",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "When it is received",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "0ec8e151-5d34-40ba-9f0d-7d6dc8e8ef82"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then message is consumed without error",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Then message is consumed without error",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "a3d35632-daab-407d-a560-fd703c606386"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "actionSupportability",
                  "notSupported"
                ],
                [
                  "eventTypeSupportability",
                  "supported"
                ],
                [
                  "notSupportedActions",
                  "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                ],
                [
                  "notSupportedEventTypes",
                  "DONE,FETCHED,CREATED,TESTED,FIXED"
                ],
                [
                  "supportedActions",
                  "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                ],
                [
                  "supportedEventTypes",
                  "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "5bf1ecc6-f8ed-4153-9367-0cae0aeff690"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "When it is received",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "When it is received",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "a3d1f10f-fea0-47d7-bb88-43983106e585"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then message is consumed without error",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Then message is consumed without error",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "62625fec-6bff-43f1-b6dd-077f262f1c4c"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "actionSupportability",
                  "supported"
                ],
                [
                  "eventTypeSupportability",
                  "notSupported"
                ],
                [
                  "notSupportedActions",
                  "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                ],
                [
                  "notSupportedEventTypes",
                  "DONE,FETCHED,CREATED,TESTED,FIXED"
                ],
                [
                  "supportedActions",
                  "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                ],
                [
                  "supportedEventTypes",
                  "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "1dfb8c98-1331-4bb2-83ac-6e85c615a364"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "When it is received",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "When it is received",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "e6764e92-42ff-442e-9f27-dd936fb32a04"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then message is consumed without error",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Then message is consumed without error",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "b6d4028c-0f30-452c-8451-1cc78d762c10"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/named_parameters.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "We want to verify that parameters can be matched by name preserving the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in natural order one and two",
              "Then parameters values are one and two"
            ]
          },
          {
            "title": "We want to verify that parameters can be matched by name inverting the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in inverse order one and two",
              "Then parameters values are one and two"
            ]
          }
        ],
        "name": "named_parameters.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "We want to verify that parameters can be matched by name preserving the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in natural order one and two",
              "Then parameters values are one and two"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "parameters matched by name in natural order %ith and %nth",
                "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+natural\\s+order\\s+(.*)\\s+and\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "parameters values are %ith and %nth",
                "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given parameters matched by name in natural order one and two",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given parameters matched by name in natural order ｟one｠ and ｟two｠",
                "durationInMillis": 0
              },
              {
                "step": "Then parameters values are one and two",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then parameters values are ｟one｠ and ｟two｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "We want to verify that parameters can be matched by name inverting the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in inverse order one and two",
              "Then parameters values are one and two"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "parameters matched by name in inverse order %ith and %nth",
                "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+inverse\\s+order\\s+(.*)\\s+and\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "parameters values are %ith and %nth",
                "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given parameters matched by name in inverse order one and two",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given parameters matched by name in inverse order ｟one｠ and ｟two｠",
                "durationInMillis": 1
              },
              {
                "step": "Then parameters values are one and two",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then parameters values are ｟one｠ and ｟two｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/non_successful.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then I fail"
            ]
          }
        ],
        "name": "non_successful.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ],
            "results": [
              {
                "step": "Then I fail",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then I fail",
                  "cause": {
                    "@class": "junit.framework.AssertionFailedError",
                    "detailMessage": "I failed!",
                    "stackTrace": [
                      "junit.framework.Assert.fail(Assert.java:47)",
                      "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "2af38d50-6bb8-4d4d-9d99-b9d31d621c44"
                },
                "parametrisedStep": "Then I fail",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "I want to show that different parameter delimiters can be configured via the ParameterControls",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|parameter|\u000a|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "parameter"
              ],
              "data": [
                [
                  [
                    "parameter",
                    "value"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a [parameter]"
            ]
          },
          {
            "title": "I want to show that parameter values are correctly delimited, even when the values are overlapping",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol 10ABCDEF and a threshold of 10",
              "Given a stock of symbol ABC10DEF and a threshold of 10",
              "Given a stock of symbol ABCDEF10 and a threshold of 10"
            ]
          },
          {
            "title": "I want to show that parameter values are correctly delimited, but not in the table parameter",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
              "And a stock of symbol topdog and a threshold of 10"
            ]
          }
        ],
        "name": "parameter_delimiters.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "I want to show that different parameter delimiters can be configured via the ParameterControls",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|parameter|\u000a|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "parameter"
              ],
              "data": [
                [
                  [
                    "parameter",
                    "value"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a [parameter]"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "parameter",
                  "value"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a [parameter]",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a [parameter]",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "9e6af82d-9209-47e7-b3b3-ca2c397af42b"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "I want to show that parameter values are correctly delimited, even when the values are overlapping",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol 10ABCDEF and a threshold of 10",
              "Given a stock of symbol ABC10DEF and a threshold of 10",
              "Given a stock of symbol ABCDEF10 and a threshold of 10"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given a stock of symbol 10ABCDEF and a threshold of 10",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟10ABCDEF｠ and a threshold of ｟10｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of symbol ABC10DEF and a threshold of 10",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟ABC10DEF｠ and a threshold of ｟10｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of symbol ABCDEF10 and a threshold of 10",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟ABCDEF10｠ and a threshold of ｟10｠",
                "durationInMillis": 1
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "I want to show that parameter values are correctly delimited, but not in the table parameter",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
              "And a stock of symbol topdog and a threshold of 10"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the traders: %ranksTable",
                "resolvedPattern": "the\\s+traders:\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the traders: \u000a［|name | rank   |\u000a|joe  | topdog |］",
                "durationInMillis": 1
              },
              {
                "step": "And a stock of symbol topdog and a threshold of 10",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And a stock of symbol ｟topdog｠ and a threshold of ｟10｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 3
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parametrisation_by_delimited_name.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Use flexible parameters with examples table",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|client|item|\u000a|Rui|chocolate|\u000a|Figueira|car|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "client",
                "item"
              ],
              "data": [
                [
                  [
                    "client",
                    "Rui"
                  ],
                  [
                    "item",
                    "chocolate"
                  ]
                ],
                [
                  [
                    "client",
                    "Figueira"
                  ],
                  [
                    "item",
                    "car"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given <client> is logged in",
              "And <client> has a cart",
              "When a <item> is added to the cart",
              "Then cart contains <item>"
            ]
          }
        ],
        "name": "parametrisation_by_delimited_name.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Use flexible parameters with examples table",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|client|item|\u000a|Rui|chocolate|\u000a|Figueira|car|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "client",
                "item"
              ],
              "data": [
                [
                  [
                    "client",
                    "Rui"
                  ],
                  [
                    "item",
                    "chocolate"
                  ]
                ],
                [
                  [
                    "client",
                    "Figueira"
                  ],
                  [
                    "item",
                    "car"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given <client> is logged in",
              "And <client> has a cart",
              "When a <item> is added to the cart",
              "Then cart contains <item>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parametrisation_by_delimited_name.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "client",
                  "Rui"
                ],
                [
                  "item",
                  "chocolate"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given <client> is logged in",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given <client> is logged in",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "3b725784-7f7f-4b30-a1e9-194a18edb023"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "And <client> has a cart",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "And <client> has a cart",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "a794c6aa-2ac7-48c2-a58f-0e190003ef6f"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "When a <item> is added to the cart",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "When a <item> is added to the cart",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "4a816900-ed4d-4a3d-84f7-f567050e9833"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then cart contains <item>",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Then cart contains <item>",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "a472d5ec-bd85-4fed-9d04-986a47498e18"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "client",
                  "Figueira"
                ],
                [
                  "item",
                  "car"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given <client> is logged in",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given <client> is logged in",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "8932b174-feff-4626-8ed3-4f1cead4eca5"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "And <client> has a cart",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "And <client> has a cart",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "e4d1a5be-a53d-468f-a791-675c81f09d58"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "When a <item> is added to the cart",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "When a <item> is added to the cart",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "3a5a3c67-aeef-40e2-b77d-69919ef50b63"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then cart contains <item>",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Then cart contains <item>",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "7266a97a-115c-4c7b-9476-6bad3d0dd388"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parametrised.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            }
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the asset class <assetClass>",
              "Given a stock of <symbol> and a <threshold>"
            ]
          }
        ],
        "name": "parametrised.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the asset class <assetClass>",
              "Given a stock of <symbol> and a <threshold>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the asset class %assetClass",
                "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the asset class <assetClass>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the asset class ｟<assetClass>｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a stock of <symbol> and a <threshold>",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:559)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "9d66b755-ada4-411b-a900-9fd206d6ab55"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parametrised_table.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|scheme| \u000a|scheme1| \u000a|scheme2|\u000a|scheme3|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "scheme"
              ],
              "data": [
                [
                  [
                    "scheme",
                    "scheme1"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme2"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme3"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|"
            ]
          }
        ],
        "name": "parametrised_table.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|scheme| \u000a|scheme1| \u000a|scheme2|\u000a|scheme3|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "scheme"
              ],
              "data": [
                [
                  [
                    "scheme",
                    "scheme1"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme2"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme3"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parametrised_table.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "scheme",
                  "scheme1"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "32b9ed17-9a3f-4884-8cc0-78b6c50704b1"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "scheme",
                  "scheme2"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "3ff29b41-8d50-49e1-8c55-8008b0f3161c"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "scheme",
                  "scheme3"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                ],
                "results": [
                  {
                    "step": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "f98b755b-2e93-4845-985b-86059b4e311e"
                    },
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/pending.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "make story development easier",
          "asA": "Story Developer",
          "iWantTo": "auto-generate method stubs for pending steps annotated by @Pending"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step has not been defined",
              "And another step has not been defined",
              "When a step has not been defined",
              "Then a step has not been defined"
            ]
          },
          {
            "title": "Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step is annotated as pending",
              "When a step is annotated as pending",
              "Then a step is annotated as pending"
            ]
          },
          {
            "title": "Show that multiple And steps can be used",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am not logged in",
              "And I have been redirected from my intended page to the login page",
              "When I log in with good credentials",
              "Then I am redirected to my intended page",
              "And I am logged in"
            ]
          }
        ],
        "name": "pending.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step has not been defined",
              "And another step has not been defined",
              "When a step has not been defined",
              "Then a step has not been defined"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a step has not been defined",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a step has not been defined",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "30c1e460-309b-4f3a-be55-f68eb37b464e"
                },
                "durationInMillis": 0
              },
              {
                "step": "And another step has not been defined",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "And another step has not been defined",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "45db737a-d896-4f80-af7f-cc2727916134"
                },
                "durationInMillis": 0
              },
              {
                "step": "When a step has not been defined",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When a step has not been defined",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "637f48c8-2c94-4e62-9fdf-21bca1509dbb"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then a step has not been defined",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then a step has not been defined",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "84b20e81-0ebd-4534-bc6a-7440fe2b5cf6"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step is annotated as pending",
              "When a step is annotated as pending",
              "Then a step is annotated as pending"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a step is annotated as pending",
                "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
              },
              {
                "type": "THEN",
                "annotatedPattern": "a step is annotated as pending",
                "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "a step is annotated as pending",
                "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
              }
            ],
            "results": [
              {
                "step": "Given a step is annotated as pending",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a step is annotated as pending",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "1e417499-4dd2-4730-bfaa-caeb983087b7"
                },
                "durationInMillis": 0
              },
              {
                "step": "When a step is annotated as pending",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When a step is annotated as pending",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "90bedc5d-467d-4061-9a26-d2057ffa1c5d"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then a step is annotated as pending",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then a step is annotated as pending",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "06bc9fda-c073-49d1-a18f-43cb0c6691e3"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Show that multiple And steps can be used",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am not logged in",
              "And I have been redirected from my intended page to the login page",
              "When I log in with good credentials",
              "Then I am redirected to my intended page",
              "And I am logged in"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given I am not logged in",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given I am not logged in",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "f343f68c-1dee-4aa9-98ec-feced512a6ad"
                },
                "durationInMillis": 0
              },
              {
                "step": "And I have been redirected from my intended page to the login page",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "And I have been redirected from my intended page to the login page",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "75df20fe-4848-40c6-87e7-1d8907aa89d5"
                },
                "durationInMillis": 0
              },
              {
                "step": "When I log in with good credentials",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When I log in with good credentials",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "3bfe6413-5fa6-431e-b583-ee6ed53172ec"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then I am redirected to my intended page",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then I am redirected to my intended page",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "31db19c2-9e24-4242-920d-ea14b505e9c5"
                },
                "durationInMillis": 0
              },
              {
                "step": "And I am logged in",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "And I am logged in",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "c68526e4-9b74-4788-be3c-4ce025886d9a"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/pending_stats.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
            ]
          },
          {
            "title": "A scenario with some pending steps",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am pending"
            ]
          }
        ],
        "name": "pending_stats.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "A scenario with some pending steps",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am pending"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given I am pending",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given I am pending",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "9e30bd1a-f6b7-41a4-a831-6ff5833de9f2"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/priority_matching.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Matching regex \"a step that has %param\"",
              "Given a step that has a parameter",
              "Then the parameter value is \"a parameter\"",
              "!-- Matching regex \"a step that has exactly one %param\"",
              "Given a step that has exactly one of the parameters",
              "Then the parameter value is \"of the parameters\""
            ]
          }
        ],
        "name": "priority_matching.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Matching regex \"a step that has %param\"",
              "Given a step that has a parameter",
              "Then the parameter value is \"a parameter\"",
              "!-- Matching regex \"a step that has exactly one %param\"",
              "Given a step that has exactly one of the parameters",
              "Then the parameter value is \"of the parameters\""
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/priority_matching.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a step that has %param",
                "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a step that has exactly one %param",
                "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+exactly\\s+one\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the parameter value is \"%param\"",
                "resolvedPattern": "the\\s+parameter\\s+value\\s+is\\s+\"(.*)\""
              }
            ],
            "results": [
              {
                "step": "!-- Matching regex \"a step that has %param\"",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Given a step that has a parameter",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a step that has ｟a parameter｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the parameter value is \"a parameter\"",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the parameter value is \"a parameter\"",
                "durationInMillis": 0
              },
              {
                "step": "!-- Matching regex \"a step that has exactly one %param\"",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Given a step that has exactly one of the parameters",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a step that has exactly one ｟of the parameters｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the parameter value is \"of the parameters\"",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the parameter value is \"of the parameters\"",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the stock exchange <stockExchange>",
              "And the asset class <assetClass>"
            ]
          }
        ],
        "name": "select_stock_exchange.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the stock exchange <stockExchange>",
              "And the asset class <assetClass>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the asset class %assetClass",
                "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the stock exchange %stockExchange",
                "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the stock exchange <stockExchange>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the stock exchange ｟<stockExchange>｠",
                "durationInMillis": 1
              },
              {
                "step": "And the asset class <assetClass>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And the asset class ｟<assetClass>｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario where before and after steps are executed only once even if there is a given story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          }
        ],
        "name": "skip_before_and_after_scenario_steps_if_given_story.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario where before and after steps are executed only once even if there is a given story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/parametrised.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                    {
                      "@name": "theme",
                      "@value": "parametrisation"
                    }
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  }
                ],
                "name": "parametrised.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given the asset class <assetClass>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given the asset class ｟<assetClass>｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Given a stock of <symbol> and a <threshold>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟1.0｠",
                        "durationInMillis": 1
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 1
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "When the stock is traded at price 1.1",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟1.1｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          {
            "title": "A scenario that is not executed because if followed a failed scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          }
        ],
        "name": "skip_scenarios_after_failure.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              },
              {
                "step": "Then I fail",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then I fail",
                  "cause": {
                    "@class": "junit.framework.AssertionFailedError",
                    "detailMessage": "I failed!",
                    "stackTrace": [
                      "junit.framework.Assert.fail(Assert.java:47)",
                      "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "768ab086-9ce1-466d-896a-1296d3b476b2"
                },
                "parametrisedStep": "Then I fail",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "A scenario that is not executed because if followed a failed scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/step_composition.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            }
          ]
        },
        "scenarios": [
          {
            "title": "Composite steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
              "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
              "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
              "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
              "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
              "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario."
            ]
          },
          {
            "title": "Using a composite step with normal parameter matching",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones has previously bought a ticket"
            ]
          },
          {
            "title": "Using a composite step in a parameterised scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|customer|product|\u000a|Mr Jones|ticket|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "customer",
                "product"
              ],
              "data": [
                [
                  [
                    "customer",
                    "Mr Jones"
                  ],
                  [
                    "product",
                    "ticket"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"<customer> has previously bought a <product>\") // used in parameterised scenario",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given <customer> has previously bought a <product>"
            ]
          },
          {
            "title": "Using a composite step where one of the composed steps is not found.  \u000aThe composed step not found should be reported as pending and the subsequent composed steps not performed.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer returns to cart\")",
              "!-- @Composite(steps = { \"Given step not found\",",
              "!--                      \"Given <customer> has a cart\", })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones returns to cart"
            ]
          }
        ],
        "name": "step_composition.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Composite steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
              "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
              "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
              "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
              "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
              "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario."
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario.",
                "type": "IGNORABLE",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Using a composite step with normal parameter matching",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones has previously bought a ticket"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "%customer has previously bought a %product",
                "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "!-- Annotated method:",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- @Composite(steps = { \"Given <customer> is logged in\",",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!--                      \"Given <customer> has a cart\",",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!--                      \"When a <product> is added to the cart\" })",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!-- }",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "!--\u000a",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "!--\u000a",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "014aa5dc-9807-467b-9287-c6c2c352c50e"
                },
                "durationInMillis": 0
              },
              {
                "step": "Given Mr Jones has previously bought a ticket",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given ｟Mr Jones｠ has previously bought a ｟ticket｠",
                "durationInMillis": 0
              },
              {
                "step": "Given <customer> is logged in",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given ｟Mr Jones｠ is logged in",
                "durationInMillis": 0
              },
              {
                "step": "Given <customer> has a cart",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given ｟Mr Jones｠ has a cart",
                "durationInMillis": 0
              },
              {
                "step": "When a <product> is added to the cart",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "When a ｟ticket｠ is added to the cart",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Using a composite step in a parameterised scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|customer|product|\u000a|Mr Jones|ticket|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "customer",
                "product"
              ],
              "data": [
                [
                  [
                    "customer",
                    "Mr Jones"
                  ],
                  [
                    "product",
                    "ticket"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"<customer> has previously bought a <product>\") // used in parameterised scenario",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given <customer> has previously bought a <product>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "customer",
                  "Mr Jones"
                ],
                [
                  "product",
                  "ticket"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "%customer has previously bought a %product",
                    "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Using a composite step where one of the composed steps is not found.  \u000aThe composed step not found should be reported as pending and the subsequent composed steps not performed.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer returns to cart\")",
              "!-- @Composite(steps = { \"Given step not found\",",
              "!--                      \"Given <customer> has a cart\", })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones returns to cart"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "%customer returns to cart",
                "resolvedPattern": "(.*)\\s+returns\\s+to\\s+cart"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 2
          }
        ]
      },
      "afterSteps": {},
      "timing": {
        "durationInMillis": 3
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/step_monitoring.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "As a story implementer I want to monitor parametrised successful step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a successful step",
              "Then following step should be performed"
            ]
          },
          {
            "title": "As a story implementer I want to monitor parametrized failing step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a failing step",
              "Then following step should not be performed"
            ]
          }
        ],
        "name": "step_monitoring.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "As a story implementer I want to monitor parametrised successful step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a successful step",
              "Then following step should be performed"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a successful step",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a successful step",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "b16fb77a-f862-4222-80d8-05b8de242248"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then following step should be performed",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then following step should be performed",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "ebcd37f2-a21d-438c-832e-261a44c78201"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "As a story implementer I want to monitor parametrized failing step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a failing step",
              "Then following step should not be performed"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a failing step",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a failing step",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "4b031950-76ac-4d16-b220-11e0dd60b2bf"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then following step should not be performed",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then following step should not be performed",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "841423ac-a838-4dc1-9b40-65de3b5dfc99"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 2
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/step_nested_composition.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Composite nested steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then all buttons are enabled"
            ]
          }
        ],
        "name": "step_nested_composition.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Composite nested steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then all buttons are enabled"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_nested_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Then all buttons are enabled",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then all buttons are enabled",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "a90e12e1-037a-4b2d-bdfc-33afb5ea3d3c"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
        "description": {
          "descriptionAsString": "Trader is alerted of status"
        },
        "narrative": {
          "inOrderTo": "ensure a quick response",
          "asA": "trader",
          "iWantTo": "monitor stock prices"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol STK1 and a threshold of 15.0",
              "When the stock is traded at price 5.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 11.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 16.0",
              "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
              "Then the alert status is ON",
              "Then the alert status is currently ON"
            ]
          },
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          }
        ],
        "name": "trader_is_alerted_of_status.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol STK1 and a threshold of 15.0",
              "When the stock is traded at price 5.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 11.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 16.0",
              "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
              "Then the alert status is ON",
              "Then the alert status is currently ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is sold at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is currently %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given a stock of symbol STK1 and a threshold of 15.0",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟15.0｠",
                "durationInMillis": 1
              },
              {
                "step": "When the stock is traded at price 5.0",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟5.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is OFF",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is sold at price 11.0",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is sold at price ｟11.0｠",
                "durationInMillis": 1
              },
              {
                "step": "Then the alert status is OFF",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is sold at price 16.0",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is sold at price ｟16.0｠",
                "durationInMillis": 0
              },
              {
                "step": "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is currently ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is currently ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "5.0"
                ],
                [
                  "status",
                  "OFF"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded with <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded with ｟5.0｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "Then the trader is alerted with <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "11.0"
                ],
                [
                  "status",
                  "OFF"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded with <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded with ｟11.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the trader is alerted with <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "16.0"
                ],
                [
                  "status",
                  "ON"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "When the stock is traded with <price>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded with ｟16.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the trader is alerted with <status>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the trader is alerted with ｟ON｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 4
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
        "description": {
          "descriptionAsString": "Story: Any free-text description can go here (and Story: is also optional)"
        },
        "narrative": {
          "inOrderTo": "cut my losses",
          "asA": "Trader",
          "iWantTo": "sell all stocks when alerted"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Trader sells it all and goes to Bermuda.\u000aThis scenario shows that the same step pattern can be used for different step types",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          {
            "title": "Trader counts the days to go to Bermuda.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a date of 2010-06-21",
              "When 2 days pass",
              "Then the date is 2010-06-23"
            ]
          }
        ],
        "name": "trader_sells_all_stocks.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Trader sells it all and goes to Bermuda.\u000aThis scenario shows that the same step pattern can be used for different step types",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                "description": {
                  "descriptionAsString": "Trader is alerted of status"
                },
                "narrative": {
                  "inOrderTo": "ensure a quick response",
                  "asA": "trader",
                  "iWantTo": "monitor stock prices"
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of symbol STK1 and a threshold of 15.0",
                      "When the stock is traded at price 5.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 11.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 16.0",
                      "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                      "Then the alert status is ON",
                      "Then the alert status is currently ON"
                    ]
                  },
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                        "symbol",
                        "threshold",
                        "price",
                        "status"
                      ],
                      "data": [
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "5.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "11.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "16.0"
                          ],
                          [
                            "status",
                            "ON"
                          ]
                        ]
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of <symbol> and a <threshold>",
                      "When the stock is traded with <price>",
                      "Then the trader is alerted with <status>"
                    ]
                  }
                ],
                "name": "trader_is_alerted_of_status.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of symbol STK1 and a threshold of 15.0",
                      "When the stock is traded at price 5.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 11.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 16.0",
                      "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                      "Then the alert status is ON",
                      "Then the alert status is currently ON"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded at price %price",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the alert status is %status",
                        "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is sold at price %price",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the alert status is currently %status",
                        "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given a stock of symbol STK1 and a threshold of 15.0",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟15.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "When the stock is traded at price 5.0",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "When the stock is traded at price ｟5.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the alert status is OFF",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the alert status is ｟OFF｠",
                        "durationInMillis": 1
                      },
                      {
                        "step": "When the stock is sold at price 11.0",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "When the stock is sold at price ｟11.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the alert status is OFF",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the alert status is ｟OFF｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "When the stock is sold at price 16.0",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "When the stock is sold at price ｟16.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                        "type": "IGNORABLE",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the alert status is ON",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the alert status is ｟ON｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the alert status is currently ON",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the alert status is currently ｟ON｠",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                },
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                        "symbol",
                        "threshold",
                        "price",
                        "status"
                      ],
                      "data": [
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "5.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "11.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "16.0"
                          ],
                          [
                            "status",
                            "ON"
                          ]
                        ]
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of <symbol> and a <threshold>",
                      "When the stock is traded with <price>",
                      "Then the trader is alerted with <status>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "allowed": true,
                  "exampleScenarios": [
                    {
                      "exampleParameters": [
                        [
                          "symbol",
                          "STK1"
                        ],
                        [
                          "threshold",
                          "15.0"
                        ],
                        [
                          "price",
                          "5.0"
                        ],
                        [
                          "status",
                          "OFF"
                        ]
                      ],
                      "performableGivenStories": [
                      ],
                      "beforeSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "a stock of <symbol> and a <threshold>",
                            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                          },
                          {
                            "type": "WHEN",
                            "annotatedPattern": "the stock is traded with <price>",
                            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                          },
                          {
                            "type": "THEN",
                            "annotatedPattern": "the trader is alerted with <status>",
                            "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                          }
                        ],
                        "results": [
                          {
                            "step": "Given a stock of <symbol> and a <threshold>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                            "durationInMillis": 1
                          },
                          {
                            "step": "When the stock is traded with <price>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "When the stock is traded with ｟5.0｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "Then the trader is alerted with <status>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "afterSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      }
                    },
                    {
                      "exampleParameters": [
                        [
                          "symbol",
                          "STK1"
                        ],
                        [
                          "threshold",
                          "15.0"
                        ],
                        [
                          "price",
                          "11.0"
                        ],
                        [
                          "status",
                          "OFF"
                        ]
                      ],
                      "performableGivenStories": [
                      ],
                      "beforeSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "a stock of <symbol> and a <threshold>",
                            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                          },
                          {
                            "type": "WHEN",
                            "annotatedPattern": "the stock is traded with <price>",
                            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                          },
                          {
                            "type": "THEN",
                            "annotatedPattern": "the trader is alerted with <status>",
                            "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                          }
                        ],
                        "results": [
                          {
                            "step": "Given a stock of <symbol> and a <threshold>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "When the stock is traded with <price>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "When the stock is traded with ｟11.0｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "Then the trader is alerted with <status>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                            "durationInMillis": 1
                          }
                        ]
                      },
                      "afterSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      }
                    },
                    {
                      "exampleParameters": [
                        [
                          "symbol",
                          "STK1"
                        ],
                        [
                          "threshold",
                          "15.0"
                        ],
                        [
                          "price",
                          "16.0"
                        ],
                        [
                          "status",
                          "ON"
                        ]
                      ],
                      "performableGivenStories": [
                      ],
                      "beforeSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "a stock of <symbol> and a <threshold>",
                            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                          },
                          {
                            "type": "WHEN",
                            "annotatedPattern": "the stock is traded with <price>",
                            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                          },
                          {
                            "type": "THEN",
                            "annotatedPattern": "the trader is alerted with <status>",
                            "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                          }
                        ],
                        "results": [
                          {
                            "step": "Given a stock of <symbol> and a <threshold>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "When the stock is traded with <price>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "When the stock is traded with ｟16.0｠",
                            "durationInMillis": 0
                          },
                          {
                            "step": "Then the trader is alerted with <status>",
                            "type": "SUCCESSFUL",
                            "parametrisedStep": "Then the trader is alerted with ｟ON｠",
                            "durationInMillis": 0
                          }
                        ]
                      },
                      "afterSteps": {
                        "results": [
                          {
                            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                            "type": "SUCCESSFUL",
                            "durationInMillis": 0
                          }
                        ]
                      }
                    }
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {},
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 3
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a trader of name %trader",
                "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is left with no stocks",
                "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the trader sells all stocks",
                "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the alert status is OFF",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a trader of name Mauro",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a trader of name ｟Mauro｠",
                "durationInMillis": 1
              },
              {
                "step": "And the alert status is OFF",
                "type": "SUCCESSFUL",
                "parametrisedStep": "And the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of symbol STK1 and a threshold of 1.5",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded at price 2.0",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟2.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              },
              {
                "step": "When the trader sells all stocks",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the trader sells all stocks",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is left with no stocks",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is left with no stocks",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Trader counts the days to go to Bermuda.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a date of 2010-06-21",
              "When 2 days pass",
              "Then the date is 2010-06-23"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a date of %date",
                "resolvedPattern": "a\\s+date\\s+of\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the date is %date",
                "resolvedPattern": "the\\s+date\\s+is\\s+(.*)"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "%days days pass",
                "resolvedPattern": "(.*)\\s+days\\s+pass"
              }
            ],
            "results": [
              {
                "step": "Given a date of 2010-06-21",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a date of ｟2010-06-21｠",
                "durationInMillis": 0
              },
              {
                "step": "When 2 days pass",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When ｟2｠ days pass",
                "durationInMillis": 0
              },
              {
                "step": "Then the date is 2010-06-23",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the date is ｟2010-06-23｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 6
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Traders can be searched by name",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          {
            "title": "Traders can be searched by name in landscape format",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          {
            "title": "Traders search fails",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "!-- Verification fails",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          }
        ],
        "name": "traders_can_be_subset.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Traders can be searched by name",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "traders are subset to \"%regex\" by name",
                "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the current trader activity is: %activityTable",
                "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the trader ranks: %ranksTable",
                "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the trader ranks: \u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 0
              },
              {
                "step": "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the current trader activity is: \u000a［|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |］",
                "durationInMillis": 2
              },
              {
                "step": "!-- This is a comment, which will be ignored in the execution",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "When traders are subset to \".*y\" by name",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When traders are subset to \".*y\" by name",
                "durationInMillis": 0
              },
              {
                "step": "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Traders can be searched by name in landscape format",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the current trader activity is: %activityTable",
                "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the trader ranks: %ranksTable",
                "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the trader ranks: \u000a［{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|］",
                "durationInMillis": 0
              },
              {
                "step": "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the current trader activity is: \u000a［|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |］",
                "durationInMillis": 2
              },
              {
                "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "scenario": {
            "title": "Traders search fails",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "!-- Verification fails",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the trader ranks: %ranksTable",
                "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given the trader ranks: \u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 0
              },
              {
                "step": "!-- Verification fails",
                "type": "IGNORABLE",
                "durationInMillis": 0
              },
              {
                "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
                  "cause": {
                    "@class": "org.jbehave.core.model.OutcomesTable$OutcomesFailed",
                    "stackTrace": [
                      "org.jbehave.core.model.OutcomesTable.verify(OutcomesTable.java:55)",
                      "org.jbehave.examples.trader.steps.TraderSteps.theTradersReturnedAre(TraderSteps.java:115)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                      "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ],
                    "uuid": "94f512f3-2796-4674-88a5-56f3cb008f77"
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "c1b7aaf5-7551-4cfc-a54a-9689a527fcd5"
                },
                "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
                "durationInMillis": 1
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 8
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Search term does match examples table header",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculousSearchTerm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculousSearchTerm"
              ],
              "data": [
                [
                  [
                    "ridiculousSearchTerm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          },
          {
            "title": "Search term does not match examples table header and step is marked as pending",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculoussearchterm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculoussearchterm"
              ],
              "data": [
                [
                  [
                    "ridiculoussearchterm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          }
        ],
        "name": "unmatched_search_term.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Search term does match examples table header",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculousSearchTerm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculousSearchTerm"
              ],
              "data": [
                [
                  [
                    "ridiculousSearchTerm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "ridiculousSearchTerm",
                  "Hello Kitty"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "I should see ridiculous things",
                    "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "that I am on Google's Homepage",
                    "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                    "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
                  }
                ],
                "results": [
                  {
                    "step": "Given that I am on Google's Homepage",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given that I am on Google's Homepage",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When I enter the search term <ridiculousSearchTerm> and proceed",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When I enter the search term ｟Hello Kitty｠ and proceed",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then I should see ridiculous things",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then I should see ridiculous things",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Search term does not match examples table header and step is marked as pending",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculoussearchterm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculoussearchterm"
              ],
              "data": [
                [
                  [
                    "ridiculoussearchterm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "ridiculoussearchterm",
                  "Hello Kitty"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "I should see ridiculous things",
                    "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "that I am on Google's Homepage",
                    "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                    "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
                  }
                ],
                "results": [
                  {
                    "step": "Given that I am on Google's Homepage",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given that I am on Google's Homepage",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When I enter the search term <ridiculousSearchTerm> and proceed",
                    "type": "PENDING",
                    "throwable": {
                      "@class": "org.jbehave.core.failures.PendingStepFound",
                      "detailMessage": "When I enter the search term <ridiculousSearchTerm> and proceed",
                      "stackTrace": [
                        "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                        "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                        "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:559)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "ce6dc924-d166-4676-8fac-f397246d17ef"
                    },
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then I should see ridiculous things",
                    "type": "NOT_PERFORMED",
                    "parametrisedStep": "Then I should see ridiculous things",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 1
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failing_before_after.story",
        "description": {
          "descriptionAsString": "We want to show that failures in @BeforeScenario methods will not prevent rest of scenario steps to run (marked as NOT PERFORMED).\u000aAlso, the @Before/AfterScenario, @Before/AfterStory failure messages should be displayed in the story reports, while   \u000athe @BeforeAfterStories failures are displayed in the Before/AfterStories reports."
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          }
        ],
        "name": "failing_before_after.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failing_before_after.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario()",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
                  "cause": {
                    "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                    "detailMessage": "Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
                    "cause": {
                      "@class": "java.lang.RuntimeException",
                      "detailMessage": "Failure before scenario",
                      "stackTrace": [
                        "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario(FailingBeforeAfterSteps.java:17)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                        "java.lang.reflect.Method.invoke(Method.java:597)",
                        "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                        "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ]
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "4cf2e789-2449-4dbc-b9a2-cd5e01ce9376"
                },
                "durationInMillis": 1
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a trader of name %trader",
                "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is left with no stocks",
                "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the trader sells all stocks",
                "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the alert status is OFF",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a trader of name Mauro",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given a trader of name ｟Mauro｠",
                "durationInMillis": 0
              },
              {
                "step": "And the alert status is OFF",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "And the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of symbol STK1 and a threshold of 1.5",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded at price 2.0",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "When the stock is traded at price ｟2.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              },
              {
                "step": "When the trader sells all stocks",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "When the trader sells all stocks",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is left with no stocks",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Then the trader is left with no stocks",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 1
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario()",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
                  "cause": {
                    "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                    "detailMessage": "Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
                    "cause": {
                      "@class": "java.lang.RuntimeException",
                      "detailMessage": "Failure after scenario",
                      "stackTrace": [
                        "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario(FailingBeforeAfterSteps.java:22)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                        "java.lang.reflect.Method.invoke(Method.java:597)",
                        "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                        "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                        "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ]
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                      "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "89ac4257-c0f3-4bb3-adf8-e58f8a34c532"
                },
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeStory()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method beforeStory (annotated with @BeforeStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before story",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method beforeStory (annotated with @BeforeStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before story",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure before story",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeStory(FailingBeforeAfterSteps.java:27)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "51d551cc-2ba2-421d-8305-18f89e6538f0"
            },
            "durationInMillis": 2
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterStory()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method afterStory (annotated with @AfterStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after story",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method afterStory (annotated with @AfterStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after story",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure after story",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterStory(FailingBeforeAfterSteps.java:32)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:604)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:604)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:604)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "c174a846-9253-46a7-99a3-df49950bce65"
            },
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "timing": {
        "durationInMillis": 7
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failing_before_stories.story",
        "description": {
          "descriptionAsString": "We want to show that failures in @BeforeStories methods will mark rest of steps as NOT PERFORMED, if story and scenario state is not reset via the StoryControls"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          }
        ],
        "name": "failing_before_stories.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failing_before_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario()",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
                  "cause": {
                    "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                    "detailMessage": "Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
                    "cause": {
                      "@class": "java.lang.RuntimeException",
                      "detailMessage": "Failure before scenario",
                      "stackTrace": [
                        "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario(FailingBeforeAfterSteps.java:17)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                        "java.lang.reflect.Method.invoke(Method.java:597)",
                        "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                        "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ]
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "009dcbaf-e45b-43a6-a40b-ab679c525a11"
                },
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a trader of name %trader",
                "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is left with no stocks",
                "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the trader sells all stocks",
                "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given the alert status is OFF",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a trader of name Mauro",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given a trader of name ｟Mauro｠",
                "durationInMillis": 0
              },
              {
                "step": "And the alert status is OFF",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "And the alert status is ｟OFF｠",
                "durationInMillis": 0
              },
              {
                "step": "Given a stock of symbol STK1 and a threshold of 1.5",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded at price 2.0",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "When the stock is traded at price ｟2.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is ON",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              },
              {
                "step": "When the trader sells all stocks",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "When the trader sells all stocks",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is left with no stocks",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Then the trader is left with no stocks",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              },
              {
                "step": "",
                "type": "SKIPPED",
                "durationInMillis": 0
              },
              {
                "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario()",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
                  "cause": {
                    "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                    "detailMessage": "Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
                    "cause": {
                      "@class": "java.lang.RuntimeException",
                      "detailMessage": "Failure after scenario",
                      "stackTrace": [
                        "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario(FailingBeforeAfterSteps.java:22)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                        "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                        "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                        "java.lang.reflect.Method.invoke(Method.java:597)",
                        "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                        "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                        "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                        "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ]
                    },
                    "stackTrace": [
                      "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                      "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                      "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "06d40204-a011-4284-a478-94409301eef0"
                },
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeStory()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method beforeStory (annotated with @BeforeStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before story",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method beforeStory (annotated with @BeforeStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before story",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure before story",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeStory(FailingBeforeAfterSteps.java:27)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:600)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "e2ed5908-fd79-4761-8310-75919b1327fa"
            },
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.SearchSteps.killBrowser()",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterStory()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method afterStory (annotated with @AfterStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after story",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method afterStory (annotated with @AfterStory in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after story",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure after story",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterStory(FailingBeforeAfterSteps.java:32)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:604)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:604)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:604)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "fb20b8f5-690a-4ab3-9a74-a851222a1c9c"
            },
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterStory(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "timing": {
        "durationInMillis": 6
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
        "description": {
          "descriptionAsString": "Story: Showing that @AfterScenario method are executed upon appropriate outcome (ANY, SUCCESS, FAILURE)"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Pass on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          },
          {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          }
        ],
        "name": "after_scenario_outcome.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Pass on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I pass",
                "resolvedPattern": "I\\s+pass"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/and_step.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "be more communicative",
          "asA": "story writer",
          "iWantTo": "explain the use of And steps and also show that I can use keywords in scenario title and comments"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "An initial And step should be marked as pending as there is not previous step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- What is this And of?  JBehave treats as pending",
              "And the wind blows",
              "!-- Look Ma' - I can also use keywords in scenario title and step comments!"
            ]
          },
          {
            "title": "And steps should match the previous step type",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the wind blows",
              "!-- This And is equivalent to another Given",
              "And the wind blows",
              "!-- This And shows that we can chain multiple And steps",
              "And the wind blows",
              "When the wind blows",
              "!-- This And is equivalent to another When",
              "And the wind blows"
            ]
          }
        ],
        "name": "and_step.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "An initial And step should be marked as pending as there is not previous step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- What is this And of?  JBehave treats as pending",
              "And the wind blows",
              "!-- Look Ma' - I can also use keywords in scenario title and step comments!"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "And steps should match the previous step type",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the wind blows",
              "!-- This And is equivalent to another Given",
              "And the wind blows",
              "!-- This And shows that we can chain multiple And steps",
              "And the wind blows",
              "When the wind blows",
              "!-- This And is equivalent to another When",
              "And the wind blows"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the wind blows",
                "resolvedPattern": "the\\s+wind\\s+blows"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/claims_with_null_calendar.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|date       |amount|\u000a|none       |0.0   |\u000a|01/06/2010 |2.15  |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "date",
                "amount"
              ],
              "data": [
                [
                  [
                    "date",
                    "none"
                  ],
                  [
                    "amount",
                    "0.0"
                  ]
                ],
                [
                  [
                    "date",
                    "01/06/2010"
                  ],
                  [
                    "amount",
                    "2.15"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a plan with calendar date of <date>",
              "Then the claimant should receive an amount of <amount>"
            ]
          }
        ],
        "name": "claims_with_null_calendar.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|date       |amount|\u000a|none       |0.0   |\u000a|01/06/2010 |2.15  |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "date",
                "amount"
              ],
              "data": [
                [
                  [
                    "date",
                    "none"
                  ],
                  [
                    "amount",
                    "0.0"
                  ]
                ],
                [
                  [
                    "date",
                    "01/06/2010"
                  ],
                  [
                    "amount",
                    "2.15"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a plan with calendar date of <date>",
              "Then the claimant should receive an amount of <amount>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/claims_with_null_calendar.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "date",
                  "none"
                ],
                [
                  "amount",
                  "0.0"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a plan with calendar date of <date>",
                    "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the claimant should receive an amount of <amount>",
                    "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "date",
                  "01/06/2010"
                ],
                [
                  "amount",
                  "2.15"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a plan with calendar date of <date>",
                    "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the claimant should receive an amount of <amount>",
                    "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/do_nothing.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- GivenStories:  ignore_me.story",
              "Given I do nothing",
              "!-- Examples: \u000a|I|am|just|lazy|"
            ]
          }
        ],
        "name": "do_nothing.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- GivenStories:  ignore_me.story",
              "Given I do nothing",
              "!-- Examples: \u000a|I|am|just|lazy|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            }
          ]
        },
        "scenarios": [
          {
            "title": "Table parameter loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: org/jbehave/examples/trader/stories/traders.table",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          {
            "title": "Parameters table loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          }
        ],
        "name": "examples_table_loaded_from_classpath.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Table parameter loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: org/jbehave/examples/trader/stories/traders.table",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "traders are subset to \"%regex\" by name",
                "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the traders: %ranksTable",
                "resolvedPattern": "the\\s+traders:\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Parameters table loaded from a classpath resource",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "5.0"
                ],
                [
                  "status",
                  "OFF"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "11.0"
                ],
                [
                  "status",
                  "OFF"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "16.0"
                ],
                [
                  "status",
                  "ON"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failing_after_stories.story",
        "description": {
          "descriptionAsString": "We want to show that failures in @AfterStories methods will appear in the AfterStories report."
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          }
        ],
        "name": "failing_after_stories.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failing_after_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a trader of name %trader",
                "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is left with no stocks",
                "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the trader sells all stocks",
                "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failure_correlation_one.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Fail on a step in story 1",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 1"
            ]
          }
        ],
        "name": "failure_correlation_one.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Fail on a step in story 1",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 1"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_one.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failure_correlation_two.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Fail on a step in story 2",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 2"
            ]
          }
        ],
        "name": "failure_correlation_two.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Fail on a step in story 2",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When a failure occurs in story 2"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_two.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
        "description": {
          "descriptionAsString": "Story: Showing that using given stories in a passing scenario following a scenario where are a failure occurred resets the overall \u000abuild result of the story"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          {
            "title": "Pass after given stories",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          }
        ],
        "name": "failure_followed_by_given_stories.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Fail on a step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Pass after given stories",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I pass"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/do_nothing.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "!-- GivenStories:  ignore_me.story",
                      "Given I do nothing",
                      "!-- Examples: \u000a|I|am|just|lazy|"
                    ]
                  }
                ],
                "name": "do_nothing.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "!-- GivenStories:  ignore_me.story",
                      "Given I do nothing",
                      "!-- Examples: \u000a|I|am|just|lazy|"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "I do nothing",
                        "resolvedPattern": "I\\s+do\\s+nothing"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I pass",
                "resolvedPattern": "I\\s+pass"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_non_successful.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that depends on a non successful story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/non_successful.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/non_successful.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/non_successful.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          }
        ],
        "name": "given_non_successful.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that depends on a non successful story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/non_successful.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/non_successful.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/non_successful.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_non_successful.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/non_successful.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "A scenario with failed step",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Then I fail"
                    ]
                  }
                ],
                "name": "non_successful.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "A scenario with failed step",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Then I fail"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "THEN",
                        "annotatedPattern": "I fail",
                        "resolvedPattern": "I\\s+fail"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the traders: %ranksTable",
                "resolvedPattern": "the\\s+traders:\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_anchor.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that depends on a given story with parameters specified as anchor pointing to specific examples row. \u000aThe presence of the anchor implies that the scenario is executed normally and not parametrised by examples, i.e. that the scenario is not executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                },
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  [
                    [
                      "symbol",
                      "STK2"
                    ],
                    [
                      "threshold",
                      "2.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK2"
                  ],
                  [
                    "threshold",
                    "2.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          }
        ],
        "name": "given_stories_parametrised_by_anchor.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that depends on a given story with parameters specified as anchor pointing to specific examples row. \u000aThe presence of the anchor implies that the scenario is executed normally and not parametrised by examples, i.e. that the scenario is not executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                },
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  [
                    [
                      "symbol",
                      "STK2"
                    ],
                    [
                      "threshold",
                      "2.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK2"
                  ],
                  [
                    "threshold",
                    "2.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_anchor.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/parametrised.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                    {
                      "@name": "theme",
                      "@value": "parametrisation"
                    }
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  }
                ],
                "name": "parametrised.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_examples.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that depends on given stories parametrised by examples. \u000aHere the entire scenario is parametrised by examples, i.e. the scenario is executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|stockExchange|symbol|threshold|price|status|\u000a|NASDAQ|STK1|10.0|5.0|OFF|\u000a|FTSE|STK1|10.0|11.0|ON|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "stockExchange",
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "stockExchange",
                    "NASDAQ"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ],
                [
                  [
                    "stockExchange",
                    "FTSE"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol <symbol> and a threshold of <threshold>",
              "When the stock is traded at price <price>",
              "Then the alert status is <status>"
            ]
          }
        ],
        "name": "given_stories_parametrised_by_examples.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that depends on given stories parametrised by examples. \u000aHere the entire scenario is parametrised by examples, i.e. the scenario is executed for each examples row.",
            "meta": {
              "properties": [
                {
                  "@name": "assetClass",
                  "@value": "FX"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|stockExchange|symbol|threshold|price|status|\u000a|NASDAQ|STK1|10.0|5.0|OFF|\u000a|FTSE|STK1|10.0|11.0|ON|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "stockExchange",
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "stockExchange",
                    "NASDAQ"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ],
                [
                  [
                    "stockExchange",
                    "FTSE"
                  ],
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "10.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "ON"
                  ],
                  [
                    "assetClass",
                    "FX"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol <symbol> and a threshold of <threshold>",
              "When the stock is traded at price <price>",
              "Then the alert status is <status>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_examples.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "stockExchange",
                  "NASDAQ"
                ],
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "10.0"
                ],
                [
                  "price",
                  "5.0"
                ],
                [
                  "status",
                  "OFF"
                ],
                [
                  "assetClass",
                  "FX"
                ]
              ],
              "performableGivenStories": [
                {
                  "story": {
                    "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                    "description": {
                      "descriptionAsString": ""
                    },
                    "narrative": {
                      "inOrderTo": "",
                      "asA": "",
                      "iWantTo": ""
                    },
                    "meta": {
                      "properties": [
                      ]
                    },
                    "scenarios": [
                      {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      }
                    ],
                    "name": "select_stock_exchange.story",
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    }
                  },
                  "allowed": true,
                  "givenStories": [
                  ],
                  "scenarios": [
                    {
                      "scenario": {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      },
                      "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                      "allowed": true,
                      "exampleScenarios": [
                      ],
                      "givenStories": [
                      ],
                      "beforeSteps": {},
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the asset class %assetClass",
                            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                          },
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the stock exchange %stockExchange",
                            "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                          }
                        ]
                      },
                      "afterSteps": {}
                    }
                  ],
                  "beforeSteps": {},
                  "afterSteps": {},
                  "timing": {
                    "durationInMillis": 0
                  }
                }
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "stockExchange",
                  "FTSE"
                ],
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "10.0"
                ],
                [
                  "price",
                  "11.0"
                ],
                [
                  "status",
                  "ON"
                ],
                [
                  "assetClass",
                  "FX"
                ]
              ],
              "performableGivenStories": [
                {
                  "story": {
                    "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                    "description": {
                      "descriptionAsString": ""
                    },
                    "narrative": {
                      "inOrderTo": "",
                      "asA": "",
                      "iWantTo": ""
                    },
                    "meta": {
                      "properties": [
                      ]
                    },
                    "scenarios": [
                      {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      }
                    ],
                    "name": "select_stock_exchange.story",
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    }
                  },
                  "allowed": true,
                  "givenStories": [
                  ],
                  "scenarios": [
                    {
                      "scenario": {
                        "title": "",
                        "meta": {
                          "properties": [
                          ]
                        },
                        "givenStories": {
                          "givenStories": [
                          ],
                          "givenStoriesAsString": "",
                          "examplesTable": {
                            "tableAsString": "",
                            "headerSeparator": "|",
                            "valueSeparator": "|",
                            "ignorableSeparator": "|--",
                            "tableTransformers": {
                              "transformers": [
                                [
                                  "FROM_LANDSCAPE",
                                  {}
                                ]
                              ]
                            },
                            "headers": [
                            ],
                            "data": [
                            ],
                            "properties": [
                              {
                                "@name": "headerSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "valueSeparator",
                                "@value": "|"
                              },
                              {
                                "@name": "ignorableSeparator",
                                "@value": "|--"
                              }
                            ],
                            "propertiesAsString": "",
                            "namedParameters": [
                            ],
                            "trim": true
                          }
                        },
                        "examplesTable": {
                          "tableAsString": "",
                          "headerSeparator": "|",
                          "valueSeparator": "|",
                          "ignorableSeparator": "|--",
                          "tableTransformers": {
                            "transformers": [
                              [
                                "FROM_LANDSCAPE",
                                {}
                              ]
                            ]
                          },
                          "headers": [
                          ],
                          "data": [
                          ],
                          "properties": [
                            {
                              "@name": "headerSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "valueSeparator",
                              "@value": "|"
                            },
                            {
                              "@name": "ignorableSeparator",
                              "@value": "|--"
                            }
                          ],
                          "propertiesAsString": "",
                          "namedParameters": [
                          ],
                          "trim": true
                        },
                        "steps": [
                          "Given the stock exchange <stockExchange>",
                          "And the asset class <assetClass>"
                        ]
                      },
                      "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                      "allowed": true,
                      "exampleScenarios": [
                      ],
                      "givenStories": [
                      ],
                      "beforeSteps": {},
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the asset class %assetClass",
                            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                          },
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "the stock exchange %stockExchange",
                            "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                          }
                        ]
                      },
                      "afterSteps": {}
                    }
                  ],
                  "beforeSteps": {},
                  "afterSteps": {},
                  "timing": {
                    "durationInMillis": 0
                  }
                }
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_meta.story",
        "description": {
          "descriptionAsString": "A story using GivenStories at story level parametrised by meta properties"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "threshold",
              "@value": "1.0"
            },
            {
              "@name": "symbol",
              "@value": "STK1"
            },
            {
              "@name": "theme",
              "@value": "parametrisation"
            },
            {
              "@name": "assetClass",
              "@value": "FX"
            }
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that is executed after the given stories parametrised by meta",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          }
        ],
        "name": "given_stories_parametrised_by_meta.story",
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/parametrised.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/parametrised.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                }
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              }
            ],
            "name": "parametrised.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the asset class %assetClass",
                    "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that is executed after the given stories parametrised by meta",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_meta.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/meta_filtering.story",
        "description": {
          "descriptionAsString": "A story description\u000aover multiple lines"
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "author",
              "@value": "Mauro"
            },
            {
              "@name": "theme",
              "@value": "filtering"
            }
          ]
        },
        "scenarios": [
          {
            "title": "A scenario to be skipped\u000aand not executed",
            "meta": {
              "properties": [
                {
                  "@name": "skip",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          {
            "title": "A scenario with an author",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          {
            "title": "A scenario with examples whose rows can be filtered on meta",
            "meta": {
              "properties": [
                {
                  "@name": "run",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|Meta:|Parameter|\u000a|@run yes|value|\u000a|@run not|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "Meta:",
                "Parameter"
              ],
              "data": [
                [
                  [
                    "Meta:",
                    "@run yes"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ],
                [
                  [
                    "Meta:",
                    "@run not"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          }
        ],
        "name": "meta_filtering.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario to be skipped\u000aand not executed",
            "meta": {
              "properties": [
                {
                  "@name": "skip",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "A scenario with an author",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "A scenario with examples whose rows can be filtered on meta",
            "meta": {
              "properties": [
                {
                  "@name": "run",
                  "@value": ""
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|Meta:|Parameter|\u000a|@run yes|value|\u000a|@run not|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "Meta:",
                "Parameter"
              ],
              "data": [
                [
                  [
                    "Meta:",
                    "@run yes"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ],
                [
                  [
                    "Meta:",
                    "@run not"
                  ],
                  [
                    "Parameter",
                    "value"
                  ],
                  [
                    "author",
                    "Mauro"
                  ],
                  [
                    "run",
                    ""
                  ],
                  [
                    "theme",
                    "filtering"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "Meta:",
                  "@run yes"
                ],
                [
                  "Parameter",
                  "value"
                ],
                [
                  "author",
                  "Mauro"
                ],
                [
                  "run",
                  ""
                ],
                [
                  "theme",
                  "filtering"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "I do nothing",
                    "resolvedPattern": "I\\s+do\\s+nothing"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "Meta:",
                  "@run not"
                ],
                [
                  "Parameter",
                  "value"
                ],
                [
                  "author",
                  "Mauro"
                ],
                [
                  "run",
                  ""
                ],
                [
                  "theme",
                  "filtering"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "I do nothing",
                    "resolvedPattern": "I\\s+do\\s+nothing"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parameters"
            }
          ]
        },
        "scenarios": [
          {
            "title": "scenario with explicitly mentioned meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "named"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have specified the <theme>",
              "And a <variant>",
              "Then the theme is 'parameters' with variant 'named'"
            ]
          },
          {
            "title": "scenario with hidden meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "foo"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have some step that implicitly requires meta params",
              "Then the theme is 'parameters' with variant 'foo'"
            ]
          }
        ],
        "name": "meta_parametrisation.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "scenario with explicitly mentioned meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "named"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have specified the <theme>",
              "And a <variant>",
              "Then the theme is 'parameters' with variant 'named'"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a <variant>",
                "resolvedPattern": "a\\s+<variant>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the theme is '%theme' with variant '%variant'",
                "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "I have specified the <theme>",
                "resolvedPattern": "I\\s+have\\s+specified\\s+the\\s+<theme>"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "scenario with hidden meta params",
            "meta": {
              "properties": [
                {
                  "@name": "variant",
                  "@value": "foo"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I have some step that implicitly requires meta params",
              "Then the theme is 'parameters' with variant 'foo'"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I have some step that implicitly requires meta params",
                "resolvedPattern": "I\\s+have\\s+some\\s+step\\s+that\\s+implicitly\\s+requires\\s+meta\\s+params"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the theme is '%theme' with variant '%variant'",
                "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/named_annotations.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Supported action and/or event story",
            "meta": {
              "properties": [
                {
                  "@name": "notSupportedActions",
                  "@value": "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                },
                {
                  "@name": "supportedActions",
                  "@value": "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                },
                {
                  "@name": "notSupportedEventTypes",
                  "@value": "DONE,FETCHED,CREATED,TESTED,FIXED"
                },
                {
                  "@name": "supportedEventTypes",
                  "@value": "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|actionSupportability   |eventTypeSupportability|\u000d\u000a|supported              |supported              |\u000d\u000a|notSupported           |supported              |\u000d\u000a|supported              |notSupported           |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "actionSupportability",
                "eventTypeSupportability"
              ],
              "data": [
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "notSupported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "notSupported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
              "When it is received",
              "Then message is consumed without error"
            ]
          }
        ],
        "name": "named_annotations.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Supported action and/or event story",
            "meta": {
              "properties": [
                {
                  "@name": "notSupportedActions",
                  "@value": "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                },
                {
                  "@name": "supportedActions",
                  "@value": "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                },
                {
                  "@name": "notSupportedEventTypes",
                  "@value": "DONE,FETCHED,CREATED,TESTED,FIXED"
                },
                {
                  "@name": "supportedEventTypes",
                  "@value": "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                }
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|actionSupportability   |eventTypeSupportability|\u000d\u000a|supported              |supported              |\u000d\u000a|notSupported           |supported              |\u000d\u000a|supported              |notSupported           |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "actionSupportability",
                "eventTypeSupportability"
              ],
              "data": [
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "notSupported"
                  ],
                  [
                    "eventTypeSupportability",
                    "supported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ],
                [
                  [
                    "actionSupportability",
                    "supported"
                  ],
                  [
                    "eventTypeSupportability",
                    "notSupported"
                  ],
                  [
                    "notSupportedActions",
                    "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                  ],
                  [
                    "notSupportedEventTypes",
                    "DONE,FETCHED,CREATED,TESTED,FIXED"
                  ],
                  [
                    "supportedActions",
                    "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                  ],
                  [
                    "supportedEventTypes",
                    "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
              "When it is received",
              "Then message is consumed without error"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/named_annotations.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "actionSupportability",
                  "supported"
                ],
                [
                  "eventTypeSupportability",
                  "supported"
                ],
                [
                  "notSupportedActions",
                  "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                ],
                [
                  "notSupportedEventTypes",
                  "DONE,FETCHED,CREATED,TESTED,FIXED"
                ],
                [
                  "supportedActions",
                  "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                ],
                [
                  "supportedEventTypes",
                  "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "actionSupportability",
                  "notSupported"
                ],
                [
                  "eventTypeSupportability",
                  "supported"
                ],
                [
                  "notSupportedActions",
                  "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                ],
                [
                  "notSupportedEventTypes",
                  "DONE,FETCHED,CREATED,TESTED,FIXED"
                ],
                [
                  "supportedActions",
                  "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                ],
                [
                  "supportedEventTypes",
                  "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "actionSupportability",
                  "supported"
                ],
                [
                  "eventTypeSupportability",
                  "notSupported"
                ],
                [
                  "notSupportedActions",
                  "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
                ],
                [
                  "notSupportedEventTypes",
                  "DONE,FETCHED,CREATED,TESTED,FIXED"
                ],
                [
                  "supportedActions",
                  "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
                ],
                [
                  "supportedEventTypes",
                  "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/named_parameters.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "We want to verify that parameters can be matched by name preserving the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in natural order one and two",
              "Then parameters values are one and two"
            ]
          },
          {
            "title": "We want to verify that parameters can be matched by name inverting the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in inverse order one and two",
              "Then parameters values are one and two"
            ]
          }
        ],
        "name": "named_parameters.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "We want to verify that parameters can be matched by name preserving the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in natural order one and two",
              "Then parameters values are one and two"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "parameters matched by name in natural order %ith and %nth",
                "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+natural\\s+order\\s+(.*)\\s+and\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "parameters values are %ith and %nth",
                "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "We want to verify that parameters can be matched by name inverting the natural order",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given parameters matched by name in inverse order one and two",
              "Then parameters values are one and two"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "parameters matched by name in inverse order %ith and %nth",
                "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+inverse\\s+order\\s+(.*)\\s+and\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "parameters values are %ith and %nth",
                "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/non_successful.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then I fail"
            ]
          }
        ],
        "name": "non_successful.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "I want to show that different parameter delimiters can be configured via the ParameterControls",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|parameter|\u000a|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "parameter"
              ],
              "data": [
                [
                  [
                    "parameter",
                    "value"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a [parameter]"
            ]
          },
          {
            "title": "I want to show that parameter values are correctly delimited, even when the values are overlapping",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol 10ABCDEF and a threshold of 10",
              "Given a stock of symbol ABC10DEF and a threshold of 10",
              "Given a stock of symbol ABCDEF10 and a threshold of 10"
            ]
          },
          {
            "title": "I want to show that parameter values are correctly delimited, but not in the table parameter",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
              "And a stock of symbol topdog and a threshold of 10"
            ]
          }
        ],
        "name": "parameter_delimiters.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "I want to show that different parameter delimiters can be configured via the ParameterControls",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|parameter|\u000a|value|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "parameter"
              ],
              "data": [
                [
                  [
                    "parameter",
                    "value"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a [parameter]"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "parameter",
                  "value"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "I want to show that parameter values are correctly delimited, even when the values are overlapping",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol 10ABCDEF and a threshold of 10",
              "Given a stock of symbol ABC10DEF and a threshold of 10",
              "Given a stock of symbol ABCDEF10 and a threshold of 10"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "I want to show that parameter values are correctly delimited, but not in the table parameter",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
              "And a stock of symbol topdog and a threshold of 10"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the traders: %ranksTable",
                "resolvedPattern": "the\\s+traders:\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parametrisation_by_delimited_name.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Use flexible parameters with examples table",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|client|item|\u000a|Rui|chocolate|\u000a|Figueira|car|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "client",
                "item"
              ],
              "data": [
                [
                  [
                    "client",
                    "Rui"
                  ],
                  [
                    "item",
                    "chocolate"
                  ]
                ],
                [
                  [
                    "client",
                    "Figueira"
                  ],
                  [
                    "item",
                    "car"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given <client> is logged in",
              "And <client> has a cart",
              "When a <item> is added to the cart",
              "Then cart contains <item>"
            ]
          }
        ],
        "name": "parametrisation_by_delimited_name.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Use flexible parameters with examples table",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|client|item|\u000a|Rui|chocolate|\u000a|Figueira|car|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "client",
                "item"
              ],
              "data": [
                [
                  [
                    "client",
                    "Rui"
                  ],
                  [
                    "item",
                    "chocolate"
                  ]
                ],
                [
                  [
                    "client",
                    "Figueira"
                  ],
                  [
                    "item",
                    "car"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given <client> is logged in",
              "And <client> has a cart",
              "When a <item> is added to the cart",
              "Then cart contains <item>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parametrisation_by_delimited_name.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "client",
                  "Rui"
                ],
                [
                  "item",
                  "chocolate"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "client",
                  "Figueira"
                ],
                [
                  "item",
                  "car"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parametrised.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            }
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the asset class <assetClass>",
              "Given a stock of <symbol> and a <threshold>"
            ]
          }
        ],
        "name": "parametrised.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the asset class <assetClass>",
              "Given a stock of <symbol> and a <threshold>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the asset class %assetClass",
                "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/parametrised_table.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|scheme| \u000a|scheme1| \u000a|scheme2|\u000a|scheme3|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "scheme"
              ],
              "data": [
                [
                  [
                    "scheme",
                    "scheme1"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme2"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme3"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|"
            ]
          }
        ],
        "name": "parametrised_table.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|scheme| \u000a|scheme1| \u000a|scheme2|\u000a|scheme3|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "scheme"
              ],
              "data": [
                [
                  [
                    "scheme",
                    "scheme1"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme2"
                  ]
                ],
                [
                  [
                    "scheme",
                    "scheme3"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/parametrised_table.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "scheme",
                  "scheme1"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "scheme",
                  "scheme2"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "scheme",
                  "scheme3"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/pending.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "make story development easier",
          "asA": "Story Developer",
          "iWantTo": "auto-generate method stubs for pending steps annotated by @Pending"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step has not been defined",
              "And another step has not been defined",
              "When a step has not been defined",
              "Then a step has not been defined"
            ]
          },
          {
            "title": "Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step is annotated as pending",
              "When a step is annotated as pending",
              "Then a step is annotated as pending"
            ]
          },
          {
            "title": "Show that multiple And steps can be used",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am not logged in",
              "And I have been redirected from my intended page to the login page",
              "When I log in with good credentials",
              "Then I am redirected to my intended page",
              "And I am logged in"
            ]
          }
        ],
        "name": "pending.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step has not been defined",
              "And another step has not been defined",
              "When a step has not been defined",
              "Then a step has not been defined"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a step is annotated as pending",
              "When a step is annotated as pending",
              "Then a step is annotated as pending"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a step is annotated as pending",
                "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
              },
              {
                "type": "THEN",
                "annotatedPattern": "a step is annotated as pending",
                "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "a step is annotated as pending",
                "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Show that multiple And steps can be used",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am not logged in",
              "And I have been redirected from my intended page to the login page",
              "When I log in with good credentials",
              "Then I am redirected to my intended page",
              "And I am logged in"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/pending_stats.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
            ]
          },
          {
            "title": "A scenario with some pending steps",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am pending"
            ]
          }
        ],
        "name": "pending_stats.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "A scenario with some pending steps",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I am pending"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/priority_matching.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Matching regex \"a step that has %param\"",
              "Given a step that has a parameter",
              "Then the parameter value is \"a parameter\"",
              "!-- Matching regex \"a step that has exactly one %param\"",
              "Given a step that has exactly one of the parameters",
              "Then the parameter value is \"of the parameters\""
            ]
          }
        ],
        "name": "priority_matching.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Matching regex \"a step that has %param\"",
              "Given a step that has a parameter",
              "Then the parameter value is \"a parameter\"",
              "!-- Matching regex \"a step that has exactly one %param\"",
              "Given a step that has exactly one of the parameters",
              "Then the parameter value is \"of the parameters\""
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/priority_matching.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a step that has %param",
                "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a step that has exactly one %param",
                "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+exactly\\s+one\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the parameter value is \"%param\"",
                "resolvedPattern": "the\\s+parameter\\s+value\\s+is\\s+\"(.*)\""
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the stock exchange <stockExchange>",
              "And the asset class <assetClass>"
            ]
          }
        ],
        "name": "select_stock_exchange.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the stock exchange <stockExchange>",
              "And the asset class <assetClass>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "the asset class %assetClass",
                "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the stock exchange %stockExchange",
                "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario where before and after steps are executed only once even if there is a given story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          }
        ],
        "name": "skip_before_and_after_scenario_steps_if_given_story.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario where before and after steps are executed only once even if there is a given story",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
                  "parameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ],
                  "path": "org/jbehave/examples/trader/stories/parametrised.story",
                  "anchor": "0"
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "examplesTable": {
                "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                  "symbol",
                  "threshold"
                ],
                "data": [
                  [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "1.0"
                    ]
                  ]
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "1.0"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "When the stock is traded at price 1.1",
              "Then the alert status is ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/parametrised.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                    {
                      "@name": "theme",
                      "@value": "parametrisation"
                    }
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  }
                ],
                "name": "parametrised.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the asset class <assetClass>",
                      "Given a stock of <symbol> and a <threshold>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          {
            "title": "A scenario that is not executed because if followed a failed scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          }
        ],
        "name": "skip_scenarios_after_failure.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "A scenario with failed step",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing",
              "Then I fail"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              },
              {
                "type": "THEN",
                "annotatedPattern": "I fail",
                "resolvedPattern": "I\\s+fail"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "A scenario that is not executed because if followed a failed scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given I do nothing"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/step_composition.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            }
          ]
        },
        "scenarios": [
          {
            "title": "Composite steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
              "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
              "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
              "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
              "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
              "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario."
            ]
          },
          {
            "title": "Using a composite step with normal parameter matching",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones has previously bought a ticket"
            ]
          },
          {
            "title": "Using a composite step in a parameterised scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|customer|product|\u000a|Mr Jones|ticket|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "customer",
                "product"
              ],
              "data": [
                [
                  [
                    "customer",
                    "Mr Jones"
                  ],
                  [
                    "product",
                    "ticket"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"<customer> has previously bought a <product>\") // used in parameterised scenario",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given <customer> has previously bought a <product>"
            ]
          },
          {
            "title": "Using a composite step where one of the composed steps is not found.  \u000aThe composed step not found should be reported as pending and the subsequent composed steps not performed.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer returns to cart\")",
              "!-- @Composite(steps = { \"Given step not found\",",
              "!--                      \"Given <customer> has a cart\", })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones returns to cart"
            ]
          }
        ],
        "name": "step_composition.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Composite steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
              "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
              "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
              "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
              "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
              "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario."
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Using a composite step with normal parameter matching",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones has previously bought a ticket"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "%customer has previously bought a %product",
                "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Using a composite step in a parameterised scenario",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|customer|product|\u000a|Mr Jones|ticket|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "customer",
                "product"
              ],
              "data": [
                [
                  [
                    "customer",
                    "Mr Jones"
                  ],
                  [
                    "product",
                    "ticket"
                  ],
                  [
                    "theme",
                    "parametrisation"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"<customer> has previously bought a <product>\") // used in parameterised scenario",
              "!-- @Composite(steps = { \"Given <customer> is logged in\",",
              "!--                      \"Given <customer> has a cart\",",
              "!--                      \"When a <product> is added to the cart\" })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given <customer> has previously bought a <product>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "customer",
                  "Mr Jones"
                ],
                [
                  "product",
                  "ticket"
                ],
                [
                  "theme",
                  "parametrisation"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "%customer has previously bought a %product",
                    "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Using a composite step where one of the composed steps is not found.  \u000aThe composed step not found should be reported as pending and the subsequent composed steps not performed.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "!-- Annotated method:",
              "!-- @Given(\"%customer returns to cart\")",
              "!-- @Composite(steps = { \"Given step not found\",",
              "!--                      \"Given <customer> has a cart\", })",
              "!-- public void aCompositeStep(@Named(\"customer\") String customer) { // composed steps use these named parameters",
              "!-- }",
              "!--\u000a",
              "Given Mr Jones returns to cart"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "%customer returns to cart",
                "resolvedPattern": "(.*)\\s+returns\\s+to\\s+cart"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/step_monitoring.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "As a story implementer I want to monitor parametrised successful step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a successful step",
              "Then following step should be performed"
            ]
          },
          {
            "title": "As a story implementer I want to monitor parametrized failing step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a failing step",
              "Then following step should not be performed"
            ]
          }
        ],
        "name": "step_monitoring.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "As a story implementer I want to monitor parametrised successful step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a successful step",
              "Then following step should be performed"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "As a story implementer I want to monitor parametrized failing step - before and after execution",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a failing step",
              "Then following step should not be performed"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/step_nested_composition.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Composite nested steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then all buttons are enabled"
            ]
          }
        ],
        "name": "step_nested_composition.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Composite nested steps in action.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Then all buttons are enabled"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/step_nested_composition.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
        "description": {
          "descriptionAsString": "Trader is alerted of status"
        },
        "narrative": {
          "inOrderTo": "ensure a quick response",
          "asA": "trader",
          "iWantTo": "monitor stock prices"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol STK1 and a threshold of 15.0",
              "When the stock is traded at price 5.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 11.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 16.0",
              "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
              "Then the alert status is ON",
              "Then the alert status is currently ON"
            ]
          },
          {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          }
        ],
        "name": "trader_is_alerted_of_status.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of symbol STK1 and a threshold of 15.0",
              "When the stock is traded at price 5.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 11.0",
              "Then the alert status is OFF",
              "When the stock is sold at price 16.0",
              "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
              "Then the alert status is ON",
              "Then the alert status is currently ON"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is sold at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is currently %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "symbol",
                "threshold",
                "price",
                "status"
              ],
              "data": [
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "5.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "11.0"
                  ],
                  [
                    "status",
                    "OFF"
                  ]
                ],
                [
                  [
                    "symbol",
                    "STK1"
                  ],
                  [
                    "threshold",
                    "15.0"
                  ],
                  [
                    "price",
                    "16.0"
                  ],
                  [
                    "status",
                    "ON"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a stock of <symbol> and a <threshold>",
              "When the stock is traded with <price>",
              "Then the trader is alerted with <status>"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "5.0"
                ],
                [
                  "status",
                  "OFF"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "11.0"
                ],
                [
                  "status",
                  "OFF"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "exampleParameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "15.0"
                ],
                [
                  "price",
                  "16.0"
                ],
                [
                  "status",
                  "ON"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded with <price>",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the trader is alerted with <status>",
                    "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
        "description": {
          "descriptionAsString": "Story: Any free-text description can go here (and Story: is also optional)"
        },
        "narrative": {
          "inOrderTo": "cut my losses",
          "asA": "Trader",
          "iWantTo": "sell all stocks when alerted"
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Trader sells it all and goes to Bermuda.\u000aThis scenario shows that the same step pattern can be used for different step types",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          {
            "title": "Trader counts the days to go to Bermuda.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a date of 2010-06-21",
              "When 2 days pass",
              "Then the date is 2010-06-23"
            ]
          }
        ],
        "name": "trader_sells_all_stocks.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Trader sells it all and goes to Bermuda.\u000aThis scenario shows that the same step pattern can be used for different step types",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
                {
                  "givenStoryAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "parameters": [
                  ],
                  "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "anchor": ""
                }
              ],
              "givenStoriesAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the alert status is OFF",
              "Given a trader of name Mauro",
              "And the alert status is OFF",
              "Given a stock of symbol STK1 and a threshold of 1.5",
              "When the stock is traded at price 2.0",
              "Then the alert status is ON",
              "When the trader sells all stocks",
              "Then the trader is left with no stocks"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                "description": {
                  "descriptionAsString": "Trader is alerted of status"
                },
                "narrative": {
                  "inOrderTo": "ensure a quick response",
                  "asA": "trader",
                  "iWantTo": "monitor stock prices"
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of symbol STK1 and a threshold of 15.0",
                      "When the stock is traded at price 5.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 11.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 16.0",
                      "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                      "Then the alert status is ON",
                      "Then the alert status is currently ON"
                    ]
                  },
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                        "symbol",
                        "threshold",
                        "price",
                        "status"
                      ],
                      "data": [
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "5.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "11.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "16.0"
                          ],
                          [
                            "status",
                            "ON"
                          ]
                        ]
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of <symbol> and a <threshold>",
                      "When the stock is traded with <price>",
                      "Then the trader is alerted with <status>"
                    ]
                  }
                ],
                "name": "trader_is_alerted_of_status.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of symbol STK1 and a threshold of 15.0",
                      "When the stock is traded at price 5.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 11.0",
                      "Then the alert status is OFF",
                      "When the stock is sold at price 16.0",
                      "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                      "Then the alert status is ON",
                      "Then the alert status is currently ON"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded at price %price",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the alert status is %status",
                        "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is sold at price %price",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the alert status is currently %status",
                        "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
                      }
                    ]
                  },
                  "afterSteps": {}
                },
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                        "symbol",
                        "threshold",
                        "price",
                        "status"
                      ],
                      "data": [
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "5.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "11.0"
                          ],
                          [
                            "status",
                            "OFF"
                          ]
                        ],
                        [
                          [
                            "symbol",
                            "STK1"
                          ],
                          [
                            "threshold",
                            "15.0"
                          ],
                          [
                            "price",
                            "16.0"
                          ],
                          [
                            "status",
                            "ON"
                          ]
                        ]
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given a stock of <symbol> and a <threshold>",
                      "When the stock is traded with <price>",
                      "Then the trader is alerted with <status>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
                  "allowed": true,
                  "exampleScenarios": [
                    {
                      "exampleParameters": [
                        [
                          "symbol",
                          "STK1"
                        ],
                        [
                          "threshold",
                          "15.0"
                        ],
                        [
                          "price",
                          "5.0"
                        ],
                        [
                          "status",
                          "OFF"
                        ]
                      ],
                      "performableGivenStories": [
                      ],
                      "beforeSteps": {},
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "a stock of <symbol> and a <threshold>",
                            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                          },
                          {
                            "type": "WHEN",
                            "annotatedPattern": "the stock is traded with <price>",
                            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                          },
                          {
                            "type": "THEN",
                            "annotatedPattern": "the trader is alerted with <status>",
                            "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                          }
                        ]
                      },
                      "afterSteps": {}
                    },
                    {
                      "exampleParameters": [
                        [
                          "symbol",
                          "STK1"
                        ],
                        [
                          "threshold",
                          "15.0"
                        ],
                        [
                          "price",
                          "11.0"
                        ],
                        [
                          "status",
                          "OFF"
                        ]
                      ],
                      "performableGivenStories": [
                      ],
                      "beforeSteps": {},
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "a stock of <symbol> and a <threshold>",
                            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                          },
                          {
                            "type": "WHEN",
                            "annotatedPattern": "the stock is traded with <price>",
                            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                          },
                          {
                            "type": "THEN",
                            "annotatedPattern": "the trader is alerted with <status>",
                            "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                          }
                        ]
                      },
                      "afterSteps": {}
                    },
                    {
                      "exampleParameters": [
                        [
                          "symbol",
                          "STK1"
                        ],
                        [
                          "threshold",
                          "15.0"
                        ],
                        [
                          "price",
                          "16.0"
                        ],
                        [
                          "status",
                          "ON"
                        ]
                      ],
                      "performableGivenStories": [
                      ],
                      "beforeSteps": {},
                      "steps": {
                        "matches": [
                          {
                            "type": "GIVEN",
                            "annotatedPattern": "a stock of <symbol> and a <threshold>",
                            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                          },
                          {
                            "type": "WHEN",
                            "annotatedPattern": "the stock is traded with <price>",
                            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                          },
                          {
                            "type": "THEN",
                            "annotatedPattern": "the trader is alerted with <status>",
                            "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                          }
                        ]
                      },
                      "afterSteps": {}
                    }
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {},
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a trader of name %trader",
                "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is left with no stocks",
                "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the trader sells all stocks",
                "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Trader counts the days to go to Bermuda.",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given a date of 2010-06-21",
              "When 2 days pass",
              "Then the date is 2010-06-23"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a date of %date",
                "resolvedPattern": "a\\s+date\\s+of\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the date is %date",
                "resolvedPattern": "the\\s+date\\s+is\\s+(.*)"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "%days days pass",
                "resolvedPattern": "(.*)\\s+days\\s+pass"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Traders can be searched by name",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          {
            "title": "Traders can be searched by name in landscape format",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          {
            "title": "Traders search fails",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "!-- Verification fails",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          }
        ],
        "name": "traders_can_be_subset.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Traders can be searched by name",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "!-- This is a comment, which will be ignored in the execution",
              "When traders are subset to \".*y\" by name",
              "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "traders are subset to \"%regex\" by name",
                "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the current trader activity is: %activityTable",
                "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the trader ranks: %ranksTable",
                "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Traders can be searched by name in landscape format",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
              "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the current trader activity is: %activityTable",
                "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the trader ranks: %ranksTable",
                "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Traders search fails",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
              ],
              "data": [
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "!-- Verification fails",
              "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
          "allowed": true,
          "exampleScenarios": [
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "the traders returned are: %tradersTable",
                "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "the trader ranks: %ranksTable",
                "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    },
    {
      "story": {
        "path": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
        "description": {
          "descriptionAsString": ""
        },
        "narrative": {
          "inOrderTo": "",
          "asA": "",
          "iWantTo": ""
        },
        "meta": {
          "properties": [
          ]
        },
        "scenarios": [
          {
            "title": "Search term does match examples table header",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculousSearchTerm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculousSearchTerm"
              ],
              "data": [
                [
                  [
                    "ridiculousSearchTerm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          },
          {
            "title": "Search term does not match examples table header and step is marked as pending",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculoussearchterm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculoussearchterm"
              ],
              "data": [
                [
                  [
                    "ridiculoussearchterm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          }
        ],
        "name": "unmatched_search_term.story",
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        }
      },
      "allowed": true,
      "givenStories": [
      ],
      "scenarios": [
        {
          "scenario": {
            "title": "Search term does match examples table header",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculousSearchTerm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculousSearchTerm"
              ],
              "data": [
                [
                  [
                    "ridiculousSearchTerm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "ridiculousSearchTerm",
                  "Hello Kitty"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "I should see ridiculous things",
                    "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "that I am on Google's Homepage",
                    "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                    "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        },
        {
          "scenario": {
            "title": "Search term does not match examples table header and step is marked as pending",
            "meta": {
              "properties": [
              ]
            },
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            },
            "examplesTable": {
              "tableAsString": "|ridiculoussearchterm|\u000d\u000a|Hello Kitty|",
              "headerSeparator": "|",
              "valueSeparator": "|",
              "ignorableSeparator": "|--",
              "tableTransformers": {
                "transformers": [
                  [
                    "FROM_LANDSCAPE",
                    {}
                  ]
                ]
              },
              "headers": [
                "ridiculoussearchterm"
              ],
              "data": [
                [
                  [
                    "ridiculoussearchterm",
                    "Hello Kitty"
                  ]
                ]
              ],
              "properties": [
                {
                  "@name": "headerSeparator",
                  "@value": "|"
                },
                {
                  "@name": "valueSeparator",
                  "@value": "|"
                },
                {
                  "@name": "ignorableSeparator",
                  "@value": "|--"
                }
              ],
              "propertiesAsString": "",
              "namedParameters": [
              ],
              "trim": true
            },
            "steps": [
              "Given that I am on Google's Homepage",
              "When I enter the search term <ridiculousSearchTerm> and proceed",
              "Then I should see ridiculous things"
            ]
          },
          "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
          "allowed": true,
          "exampleScenarios": [
            {
              "exampleParameters": [
                [
                  "ridiculoussearchterm",
                  "Hello Kitty"
                ]
              ],
              "performableGivenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "I should see ridiculous things",
                    "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "that I am on Google's Homepage",
                    "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                    "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "givenStories": [
          ],
          "beforeSteps": {},
          "steps": {},
          "afterSteps": {}
        }
      ],
      "beforeSteps": {},
      "afterSteps": {},
      "timing": {
        "durationInMillis": 0
      }
    }
  ],
  "scenarios": [
    {
      "scenario": {
        "title": "Pass on a step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I pass"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I pass",
            "resolvedPattern": "I\\s+pass"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          },
          {
            "step": "Then I pass",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then I pass",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Fail on a step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          },
          {
            "step": "Then I fail",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "Then I fail",
              "cause": {
                "@class": "junit.framework.AssertionFailedError",
                "detailMessage": "I failed!",
                "stackTrace": [
                  "junit.framework.Assert.fail(Assert.java:47)",
                  "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                  "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                  "java.lang.reflect.Method.invoke(Method.java:597)",
                  "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "81878b3d-22fc-4285-8acb-bf95d7e4c324"
            },
            "parametrisedStep": "Then I fail",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "An initial And step should be marked as pending as there is not previous step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- What is this And of?  JBehave treats as pending",
          "And the wind blows",
          "!-- Look Ma' - I can also use keywords in scenario title and step comments!"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          }
        ],
        "results": [
          {
            "step": "!-- What is this And of?  JBehave treats as pending",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "And the wind blows",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "And the wind blows",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "f0010d8c-e1b7-4702-8c0a-58e66c04c3fd"
            },
            "durationInMillis": 0
          },
          {
            "step": "!-- Look Ma' - I can also use keywords in scenario title and step comments!",
            "type": "IGNORABLE",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "And steps should match the previous step type",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the wind blows",
          "!-- This And is equivalent to another Given",
          "And the wind blows",
          "!-- This And shows that we can chain multiple And steps",
          "And the wind blows",
          "When the wind blows",
          "!-- This And is equivalent to another When",
          "And the wind blows"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          }
        ],
        "results": [
          {
            "step": "Given the wind blows",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the wind blows",
            "durationInMillis": 0
          },
          {
            "step": "!-- This And is equivalent to another Given",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "And the wind blows",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And the wind blows",
            "durationInMillis": 0
          },
          {
            "step": "!-- This And shows that we can chain multiple And steps",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "And the wind blows",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And the wind blows",
            "durationInMillis": 0
          },
          {
            "step": "When the wind blows",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the wind blows",
            "durationInMillis": 0
          },
          {
            "step": "!-- This And is equivalent to another When",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "And the wind blows",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And the wind blows",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|date       |amount|\u000a|none       |0.0   |\u000a|01/06/2010 |2.15  |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "date",
            "amount"
          ],
          "data": [
            [
              [
                "date",
                "none"
              ],
              [
                "amount",
                "0.0"
              ]
            ],
            [
              [
                "date",
                "01/06/2010"
              ],
              [
                "amount",
                "2.15"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a plan with calendar date of <date>",
          "Then the claimant should receive an amount of <amount>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/claims_with_null_calendar.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "date",
              "none"
            ],
            [
              "amount",
              "0.0"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a plan with calendar date of <date>",
                "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the claimant should receive an amount of <amount>",
                "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
              }
            ],
            "results": [
              {
                "step": "Given a plan with calendar date of <date>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a plan with calendar date of ｟none｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the claimant should receive an amount of <amount>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the claimant should receive an amount of ｟0.0｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "date",
              "01/06/2010"
            ],
            [
              "amount",
              "2.15"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a plan with calendar date of <date>",
                "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the claimant should receive an amount of <amount>",
                "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
              }
            ],
            "results": [
              {
                "step": "Given a plan with calendar date of <date>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a plan with calendar date of ｟01/06/2010｠",
                "durationInMillis": 1
              },
              {
                "step": "Then the claimant should receive an amount of <amount>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the claimant should receive an amount of ｟2.15｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- GivenStories:  ignore_me.story",
          "Given I do nothing",
          "!-- Examples: \u000a|I|am|just|lazy|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ],
        "results": [
          {
            "step": "!-- GivenStories:  ignore_me.story",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          },
          {
            "step": "!-- Examples: \u000a|I|am|just|lazy|",
            "type": "IGNORABLE",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Table parameter loaded from a classpath resource",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the traders: org/jbehave/examples/trader/stories/traders.table",
          "!-- This is a comment, which will be ignored in the execution",
          "When traders are subset to \".*y\" by name",
          "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "traders are subset to \"%regex\" by name",
            "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the traders: %ranksTable",
            "resolvedPattern": "the\\s+traders:\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the traders: org/jbehave/examples/trader/stories/traders.table",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the traders: ［org/jbehave/examples/trader/stories/traders.table］",
            "durationInMillis": 1
          },
          {
            "step": "!-- This is a comment, which will be ignored in the execution",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "When traders are subset to \".*y\" by name",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When traders are subset to \".*y\" by name",
            "durationInMillis": 0
          },
          {
            "step": "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Parameters table loaded from a classpath resource",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold",
            "price",
            "status"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "5.0"
              ],
              [
                "status",
                "OFF"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "11.0"
              ],
              [
                "status",
                "OFF"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "16.0"
              ],
              [
                "status",
                "ON"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of <symbol> and a <threshold>",
          "When the stock is traded with <price>",
          "Then the trader is alerted with <status>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "5.0"
            ],
            [
              "status",
              "OFF"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ],
            "results": [
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded with <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded with ｟5.0｠",
                "durationInMillis": 1
              },
              {
                "step": "Then the trader is alerted with <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "11.0"
            ],
            [
              "status",
              "OFF"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ],
            "results": [
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded with <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded with ｟11.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is alerted with <status>",
                "type": "FAILED",
                "throwable": {
                  "detailMessage": "Then the trader is alerted with <status>",
                  "cause": {
                    "@class": "java.lang.AssertionError",
                    "detailMessage": "\u000aExpected: \"OFF\"\u000a     got: \"ON\"\u000a",
                    "stackTrace": [
                      "org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:21)",
                      "org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)",
                      "org.jbehave.examples.trader.steps.TraderSteps.theAlertStatusIs(TraderSteps.java:165)",
                      "sun.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)",
                      "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                      "java.lang.reflect.Method.invoke(Method.java:597)",
                      "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                      "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                      "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                      "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                      "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                      "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                      "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                      "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                      "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                      "java.lang.Thread.run(Thread.java:680)"
                    ]
                  },
                  "stackTrace": [
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "38573d32-bf9b-4e7f-8358-20531b8f1a7f"
                },
                "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "16.0"
            ],
            [
              "status",
              "ON"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ],
            "results": [
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded with <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded with ｟16.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is alerted with <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is alerted with ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the alert status is OFF",
          "Given a trader of name Mauro",
          "And the alert status is OFF",
          "Given a stock of symbol STK1 and a threshold of 1.5",
          "When the stock is traded at price 2.0",
          "Then the alert status is ON",
          "When the trader sells all stocks",
          "Then the trader is left with no stocks"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failing_after_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a trader of name %trader",
            "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the trader is left with no stocks",
            "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the trader sells all stocks",
            "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the alert status is OFF",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a trader of name Mauro",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a trader of name ｟Mauro｠",
            "durationInMillis": 0
          },
          {
            "step": "And the alert status is OFF",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of symbol STK1 and a threshold of 1.5",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
            "durationInMillis": 0
          },
          {
            "step": "When the stock is traded at price 2.0",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is traded at price ｟2.0｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          },
          {
            "step": "When the trader sells all stocks",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the trader sells all stocks",
            "durationInMillis": 0
          },
          {
            "step": "Then the trader is left with no stocks",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the trader is left with no stocks",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Fail on a step in story 1",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When a failure occurs in story 1"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_one.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "When a failure occurs in story 1",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "When a failure occurs in story 1",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "32b864a0-6bb0-495a-b8b5-4651c1b5a4b5"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Fail on a step in story 2",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When a failure occurs in story 2"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_two.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "When a failure occurs in story 2",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "When a failure occurs in story 2",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "31203cfc-5930-477f-9de1-37248cf85b84"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Fail on a step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 1
          },
          {
            "step": "Then I fail",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "Then I fail",
              "cause": {
                "@class": "junit.framework.AssertionFailedError",
                "detailMessage": "I failed!",
                "stackTrace": [
                  "junit.framework.Assert.fail(Assert.java:47)",
                  "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                  "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                  "java.lang.reflect.Method.invoke(Method.java:597)",
                  "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "ebc27bd5-2793-4838-ad7f-b1301171641b"
            },
            "parametrisedStep": "Then I fail",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Pass after given stories",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/do_nothing.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I pass"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/do_nothing.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "!-- GivenStories:  ignore_me.story",
                  "Given I do nothing",
                  "!-- Examples: \u000a|I|am|just|lazy|"
                ]
              }
            ],
            "name": "do_nothing.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "!-- GivenStories:  ignore_me.story",
                  "Given I do nothing",
                  "!-- Examples: \u000a|I|am|just|lazy|"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "I do nothing",
                    "resolvedPattern": "I\\s+do\\s+nothing"
                  }
                ],
                "results": [
                  {
                    "step": "!-- GivenStories:  ignore_me.story",
                    "type": "IGNORABLE",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Given I do nothing",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given I do nothing",
                    "durationInMillis": 0
                  },
                  {
                    "step": "!-- Examples: \u000a|I|am|just|lazy|",
                    "type": "IGNORABLE",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 1
                  },
                  {
                    "step": "",
                    "type": "SKIPPED",
                    "durationInMillis": 0
                  },
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "timing": {
            "durationInMillis": 1
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I pass",
            "resolvedPattern": "I\\s+pass"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          },
          {
            "step": "Then I pass",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then I pass",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario that depends on a non successful story",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/non_successful.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/non_successful.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/non_successful.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_non_successful.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/non_successful.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
              ]
            },
            "scenarios": [
              {
                "title": "A scenario with failed step",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Then I fail"
                ]
              }
            ],
            "name": "non_successful.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "A scenario with failed step",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Then I fail"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 6
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "I fail",
                    "resolvedPattern": "I\\s+fail"
                  }
                ],
                "results": [
                  {
                    "step": "Then I fail",
                    "type": "FAILED",
                    "throwable": {
                      "detailMessage": "Then I fail",
                      "cause": {
                        "@class": "junit.framework.AssertionFailedError",
                        "detailMessage": "I failed!",
                        "stackTrace": [
                          "junit.framework.Assert.fail(Assert.java:47)",
                          "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                          "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                          "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                          "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                          "java.lang.reflect.Method.invoke(Method.java:597)",
                          "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                          "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:701)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                          "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                          "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                          "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                          "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                          "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                          "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                          "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                          "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                          "java.lang.Thread.run(Thread.java:680)"
                        ]
                      },
                      "stackTrace": [
                        "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                        "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:701)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                        "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                        "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                        "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                        "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                        "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                        "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                        "java.lang.Thread.run(Thread.java:680)"
                      ],
                      "uuid": "712696d7-01b8-4e06-8ee7-7ed3e5f43555"
                    },
                    "parametrisedStep": "Then I fail",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  },
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  },
                  {
                    "step": "",
                    "type": "SKIPPED",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "timing": {
            "durationInMillis": 6
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the traders: %ranksTable",
            "resolvedPattern": "the\\s+traders:\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given the traders:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario that depends on a given story with parameters specified as anchor pointing to specific examples row. \u000aThe presence of the anchor implies that the scenario is executed normally and not parametrised by examples, i.e. that the scenario is not executed for each examples row.",
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            },
            {
              "@name": "assetClass",
              "@value": "FX"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "parameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ],
              "path": "org/jbehave/examples/trader/stories/parametrised.story",
              "anchor": "0"
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
          "examplesTable": {
            "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
              "symbol",
              "threshold"
            ],
            "data": [
              [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ],
              [
                [
                  "symbol",
                  "STK2"
                ],
                [
                  "threshold",
                  "2.0"
                ]
              ]
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "1.0"
              ]
            ],
            [
              [
                "symbol",
                "STK2"
              ],
              [
                "threshold",
                "2.0"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When the stock is traded at price 1.1",
          "Then the alert status is ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_anchor.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/parametrised.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                }
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              }
            ],
            "name": "parametrised.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the asset class %assetClass",
                    "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                  }
                ],
                "results": [
                  {
                    "step": "Given the asset class <assetClass>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the asset class ｟FX｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟1.0｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  },
                  {
                    "step": "",
                    "type": "SKIPPED",
                    "durationInMillis": 0
                  },
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "timing": {
            "durationInMillis": 1
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "When the stock is traded at price 1.1",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is traded at price ｟1.1｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario that depends on given stories parametrised by examples. \u000aHere the entire scenario is parametrised by examples, i.e. the scenario is executed for each examples row.",
        "meta": {
          "properties": [
            {
              "@name": "assetClass",
              "@value": "FX"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|stockExchange|symbol|threshold|price|status|\u000a|NASDAQ|STK1|10.0|5.0|OFF|\u000a|FTSE|STK1|10.0|11.0|ON|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "stockExchange",
            "symbol",
            "threshold",
            "price",
            "status"
          ],
          "data": [
            [
              [
                "stockExchange",
                "NASDAQ"
              ],
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "10.0"
              ],
              [
                "price",
                "5.0"
              ],
              [
                "status",
                "OFF"
              ],
              [
                "assetClass",
                "FX"
              ]
            ],
            [
              [
                "stockExchange",
                "FTSE"
              ],
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "10.0"
              ],
              [
                "price",
                "11.0"
              ],
              [
                "status",
                "ON"
              ],
              [
                "assetClass",
                "FX"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of symbol <symbol> and a threshold of <threshold>",
          "When the stock is traded at price <price>",
          "Then the alert status is <status>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_examples.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "stockExchange",
              "NASDAQ"
            ],
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "10.0"
            ],
            [
              "price",
              "5.0"
            ],
            [
              "status",
              "OFF"
            ],
            [
              "assetClass",
              "FX"
            ]
          ],
          "performableGivenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  }
                ],
                "name": "select_stock_exchange.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the stock exchange %stockExchange",
                        "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given the stock exchange <stockExchange>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given the stock exchange ｟NASDAQ｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "And the asset class <assetClass>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "And the asset class ｟FX｠",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 1
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given a stock of symbol <symbol> and a threshold of <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟10.0｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded at price <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟5.0｠",
                "durationInMillis": 1
              },
              {
                "step": "Then the alert status is <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟OFF｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "stockExchange",
              "FTSE"
            ],
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "10.0"
            ],
            [
              "price",
              "11.0"
            ],
            [
              "status",
              "ON"
            ],
            [
              "assetClass",
              "FX"
            ]
          ],
          "performableGivenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  }
                ],
                "name": "select_stock_exchange.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the stock exchange %stockExchange",
                        "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given the stock exchange <stockExchange>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given the stock exchange ｟FTSE｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "And the asset class <assetClass>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "And the asset class ｟FX｠",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      },
                      {
                        "step": "",
                        "type": "SKIPPED",
                        "durationInMillis": 0
                      },
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              }
            ],
            "results": [
              {
                "step": "Given a stock of symbol <symbol> and a threshold of <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟10.0｠",
                "durationInMillis": 1
              },
              {
                "step": "When the stock is traded at price <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded at price ｟11.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the alert status is <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the alert status is ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that is executed after the given stories parametrised by meta",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When the stock is traded at price 1.1",
          "Then the alert status is ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_meta.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "When the stock is traded at price 1.1",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is traded at price ｟1.1｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario to be skipped\u000aand not executed",
        "meta": {
          "properties": [
            {
              "@name": "skip",
              "@value": ""
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario with an author",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario with examples whose rows can be filtered on meta",
        "meta": {
          "properties": [
            {
              "@name": "run",
              "@value": ""
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|Meta:|Parameter|\u000a|@run yes|value|\u000a|@run not|value|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "Meta:",
            "Parameter"
          ],
          "data": [
            [
              [
                "Meta:",
                "@run yes"
              ],
              [
                "Parameter",
                "value"
              ],
              [
                "author",
                "Mauro"
              ],
              [
                "run",
                ""
              ],
              [
                "theme",
                "filtering"
              ]
            ],
            [
              [
                "Meta:",
                "@run not"
              ],
              [
                "Parameter",
                "value"
              ],
              [
                "author",
                "Mauro"
              ],
              [
                "run",
                ""
              ],
              [
                "theme",
                "filtering"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "Meta:",
              "@run yes"
            ],
            [
              "Parameter",
              "value"
            ],
            [
              "author",
              "Mauro"
            ],
            [
              "run",
              ""
            ],
            [
              "theme",
              "filtering"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "Meta:",
              "@run not"
            ],
            [
              "Parameter",
              "value"
            ],
            [
              "author",
              "Mauro"
            ],
            [
              "run",
              ""
            ],
            [
              "theme",
              "filtering"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ],
            "results": [
              {
                "step": "Given I do nothing",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given I do nothing",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "scenario with explicitly mentioned meta params",
        "meta": {
          "properties": [
            {
              "@name": "variant",
              "@value": "named"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I have specified the <theme>",
          "And a <variant>",
          "Then the theme is 'parameters' with variant 'named'"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a <variant>",
            "resolvedPattern": "a\\s+<variant>"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the theme is '%theme' with variant '%variant'",
            "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "I have specified the <theme>",
            "resolvedPattern": "I\\s+have\\s+specified\\s+the\\s+<theme>"
          }
        ],
        "results": [
          {
            "step": "Given I have specified the <theme>",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I have specified the ｟parameters｠",
            "durationInMillis": 0
          },
          {
            "step": "And a <variant>",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And a ｟foo｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the theme is 'parameters' with variant 'named'",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "Then the theme is 'parameters' with variant 'named'",
              "cause": {
                "@class": "org.junit.ComparisonFailure",
                "detailMessage": "",
                "stackTrace": [
                  "org.junit.Assert.assertEquals(Assert.java:123)",
                  "org.junit.Assert.assertEquals(Assert.java:145)",
                  "org.jbehave.examples.trader.steps.MetaParametrisationSteps.thenTheThemeAndVariantAre(MetaParametrisationSteps.java:33)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                  "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                  "java.lang.reflect.Method.invoke(Method.java:597)",
                  "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ],
                "fExpected": "named",
                "fActual": "foo"
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "c0cdf2c0-c839-42b7-8060-9dca30fdf0e4"
            },
            "parametrisedStep": "Then the theme is 'parameters' with variant 'named'",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "scenario with hidden meta params",
        "meta": {
          "properties": [
            {
              "@name": "variant",
              "@value": "foo"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I have some step that implicitly requires meta params",
          "Then the theme is 'parameters' with variant 'foo'"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I have some step that implicitly requires meta params",
            "resolvedPattern": "I\\s+have\\s+some\\s+step\\s+that\\s+implicitly\\s+requires\\s+meta\\s+params"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the theme is '%theme' with variant '%variant'",
            "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
          }
        ],
        "results": [
          {
            "step": "Given I have some step that implicitly requires meta params",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I have some step that implicitly requires meta params",
            "durationInMillis": 0
          },
          {
            "step": "Then the theme is 'parameters' with variant 'foo'",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the theme is 'parameters' with variant 'foo'",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Supported action and/or event story",
        "meta": {
          "properties": [
            {
              "@name": "notSupportedActions",
              "@value": "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            },
            {
              "@name": "supportedActions",
              "@value": "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            },
            {
              "@name": "notSupportedEventTypes",
              "@value": "DONE,FETCHED,CREATED,TESTED,FIXED"
            },
            {
              "@name": "supportedEventTypes",
              "@value": "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|actionSupportability   |eventTypeSupportability|\u000d\u000a|supported              |supported              |\u000d\u000a|notSupported           |supported              |\u000d\u000a|supported              |notSupported           |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "actionSupportability",
            "eventTypeSupportability"
          ],
          "data": [
            [
              [
                "actionSupportability",
                "supported"
              ],
              [
                "eventTypeSupportability",
                "supported"
              ],
              [
                "notSupportedActions",
                "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
              ],
              [
                "notSupportedEventTypes",
                "DONE,FETCHED,CREATED,TESTED,FIXED"
              ],
              [
                "supportedActions",
                "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
              ],
              [
                "supportedEventTypes",
                "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
              ]
            ],
            [
              [
                "actionSupportability",
                "notSupported"
              ],
              [
                "eventTypeSupportability",
                "supported"
              ],
              [
                "notSupportedActions",
                "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
              ],
              [
                "notSupportedEventTypes",
                "DONE,FETCHED,CREATED,TESTED,FIXED"
              ],
              [
                "supportedActions",
                "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
              ],
              [
                "supportedEventTypes",
                "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
              ]
            ],
            [
              [
                "actionSupportability",
                "supported"
              ],
              [
                "eventTypeSupportability",
                "notSupported"
              ],
              [
                "notSupportedActions",
                "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
              ],
              [
                "notSupportedEventTypes",
                "DONE,FETCHED,CREATED,TESTED,FIXED"
              ],
              [
                "supportedActions",
                "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
              ],
              [
                "supportedEventTypes",
                "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
          "When it is received",
          "Then message is consumed without error"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/named_annotations.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "actionSupportability",
              "supported"
            ],
            [
              "eventTypeSupportability",
              "supported"
            ],
            [
              "notSupportedActions",
              "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            ],
            [
              "notSupportedEventTypes",
              "DONE,FETCHED,CREATED,TESTED,FIXED"
            ],
            [
              "supportedActions",
              "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            ],
            [
              "supportedEventTypes",
              "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "3eb8a16b-3d38-4528-b0fb-32d6e53900ac"
                },
                "durationInMillis": 0
              },
              {
                "step": "When it is received",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When it is received",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "0ec8e151-5d34-40ba-9f0d-7d6dc8e8ef82"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then message is consumed without error",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then message is consumed without error",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "a3d35632-daab-407d-a560-fd703c606386"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "actionSupportability",
              "notSupported"
            ],
            [
              "eventTypeSupportability",
              "supported"
            ],
            [
              "notSupportedActions",
              "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            ],
            [
              "notSupportedEventTypes",
              "DONE,FETCHED,CREATED,TESTED,FIXED"
            ],
            [
              "supportedActions",
              "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            ],
            [
              "supportedEventTypes",
              "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "5bf1ecc6-f8ed-4153-9367-0cae0aeff690"
                },
                "durationInMillis": 0
              },
              {
                "step": "When it is received",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When it is received",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "a3d1f10f-fea0-47d7-bb88-43983106e585"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then message is consumed without error",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then message is consumed without error",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "62625fec-6bff-43f1-b6dd-077f262f1c4c"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "actionSupportability",
              "supported"
            ],
            [
              "eventTypeSupportability",
              "notSupported"
            ],
            [
              "notSupportedActions",
              "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            ],
            [
              "notSupportedEventTypes",
              "DONE,FETCHED,CREATED,TESTED,FIXED"
            ],
            [
              "supportedActions",
              "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            ],
            [
              "supportedEventTypes",
              "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "1dfb8c98-1331-4bb2-83ac-6e85c615a364"
                },
                "durationInMillis": 0
              },
              {
                "step": "When it is received",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When it is received",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "e6764e92-42ff-442e-9f27-dd936fb32a04"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then message is consumed without error",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then message is consumed without error",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "b6d4028c-0f30-452c-8451-1cc78d762c10"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "We want to verify that parameters can be matched by name preserving the natural order",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given parameters matched by name in natural order one and two",
          "Then parameters values are one and two"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "parameters matched by name in natural order %ith and %nth",
            "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+natural\\s+order\\s+(.*)\\s+and\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "parameters values are %ith and %nth",
            "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given parameters matched by name in natural order one and two",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given parameters matched by name in natural order ｟one｠ and ｟two｠",
            "durationInMillis": 0
          },
          {
            "step": "Then parameters values are one and two",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then parameters values are ｟one｠ and ｟two｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "We want to verify that parameters can be matched by name inverting the natural order",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given parameters matched by name in inverse order one and two",
          "Then parameters values are one and two"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "parameters matched by name in inverse order %ith and %nth",
            "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+inverse\\s+order\\s+(.*)\\s+and\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "parameters values are %ith and %nth",
            "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given parameters matched by name in inverse order one and two",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given parameters matched by name in inverse order ｟one｠ and ｟two｠",
            "durationInMillis": 1
          },
          {
            "step": "Then parameters values are one and two",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then parameters values are ｟one｠ and ｟two｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario with failed step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ],
        "results": [
          {
            "step": "Then I fail",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "Then I fail",
              "cause": {
                "@class": "junit.framework.AssertionFailedError",
                "detailMessage": "I failed!",
                "stackTrace": [
                  "junit.framework.Assert.fail(Assert.java:47)",
                  "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                  "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                  "java.lang.reflect.Method.invoke(Method.java:597)",
                  "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "2af38d50-6bb8-4d4d-9d99-b9d31d621c44"
            },
            "parametrisedStep": "Then I fail",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "I want to show that different parameter delimiters can be configured via the ParameterControls",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|parameter|\u000a|value|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "parameter"
          ],
          "data": [
            [
              [
                "parameter",
                "value"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a [parameter]"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "parameter",
              "value"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a [parameter]",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a [parameter]",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "9e6af82d-9209-47e7-b3b3-ca2c397af42b"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "I want to show that parameter values are correctly delimited, even when the values are overlapping",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of symbol 10ABCDEF and a threshold of 10",
          "Given a stock of symbol ABC10DEF and a threshold of 10",
          "Given a stock of symbol ABCDEF10 and a threshold of 10"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given a stock of symbol 10ABCDEF and a threshold of 10",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a stock of symbol ｟10ABCDEF｠ and a threshold of ｟10｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of symbol ABC10DEF and a threshold of 10",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a stock of symbol ｟ABC10DEF｠ and a threshold of ｟10｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of symbol ABCDEF10 and a threshold of 10",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a stock of symbol ｟ABCDEF10｠ and a threshold of ｟10｠",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "I want to show that parameter values are correctly delimited, but not in the table parameter",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
          "And a stock of symbol topdog and a threshold of 10"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the traders: %ranksTable",
            "resolvedPattern": "the\\s+traders:\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the traders: \u000a［|name | rank   |\u000a|joe  | topdog |］",
            "durationInMillis": 1
          },
          {
            "step": "And a stock of symbol topdog and a threshold of 10",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And a stock of symbol ｟topdog｠ and a threshold of ｟10｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Use flexible parameters with examples table",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|client|item|\u000a|Rui|chocolate|\u000a|Figueira|car|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "client",
            "item"
          ],
          "data": [
            [
              [
                "client",
                "Rui"
              ],
              [
                "item",
                "chocolate"
              ]
            ],
            [
              [
                "client",
                "Figueira"
              ],
              [
                "item",
                "car"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given <client> is logged in",
          "And <client> has a cart",
          "When a <item> is added to the cart",
          "Then cart contains <item>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parametrisation_by_delimited_name.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "client",
              "Rui"
            ],
            [
              "item",
              "chocolate"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given <client> is logged in",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given <client> is logged in",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "3b725784-7f7f-4b30-a1e9-194a18edb023"
                },
                "durationInMillis": 0
              },
              {
                "step": "And <client> has a cart",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "And <client> has a cart",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "a794c6aa-2ac7-48c2-a58f-0e190003ef6f"
                },
                "durationInMillis": 0
              },
              {
                "step": "When a <item> is added to the cart",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When a <item> is added to the cart",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "4a816900-ed4d-4a3d-84f7-f567050e9833"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then cart contains <item>",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then cart contains <item>",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "a472d5ec-bd85-4fed-9d04-986a47498e18"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "client",
              "Figueira"
            ],
            [
              "item",
              "car"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given <client> is logged in",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given <client> is logged in",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "8932b174-feff-4626-8ed3-4f1cead4eca5"
                },
                "durationInMillis": 0
              },
              {
                "step": "And <client> has a cart",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "And <client> has a cart",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "e4d1a5be-a53d-468f-a791-675c81f09d58"
                },
                "durationInMillis": 0
              },
              {
                "step": "When a <item> is added to the cart",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When a <item> is added to the cart",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "3a5a3c67-aeef-40e2-b77d-69919ef50b63"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then cart contains <item>",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Then cart contains <item>",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "7266a97a-115c-4c7b-9476-6bad3d0dd388"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the asset class <assetClass>",
          "Given a stock of <symbol> and a <threshold>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of <symbol> and a <threshold>",
            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the asset class %assetClass",
            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the asset class <assetClass>",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the asset class ｟<assetClass>｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of <symbol> and a <threshold>",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given a stock of <symbol> and a <threshold>",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:559)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "9d66b755-ada4-411b-a900-9fd206d6ab55"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|scheme| \u000a|scheme1| \u000a|scheme2|\u000a|scheme3|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "scheme"
          ],
          "data": [
            [
              [
                "scheme",
                "scheme1"
              ]
            ],
            [
              [
                "scheme",
                "scheme2"
              ]
            ],
            [
              [
                "scheme",
                "scheme3"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parametrised_table.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "scheme",
              "scheme1"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "32b9ed17-9a3f-4884-8cc0-78b6c50704b1"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "scheme",
              "scheme2"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "3ff29b41-8d50-49e1-8c55-8008b0f3161c"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "scheme",
              "scheme3"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
            ],
            "results": [
              {
                "step": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "f98b755b-2e93-4845-985b-86059b4e311e"
                },
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a step has not been defined",
          "And another step has not been defined",
          "When a step has not been defined",
          "Then a step has not been defined"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "Given a step has not been defined",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given a step has not been defined",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "30c1e460-309b-4f3a-be55-f68eb37b464e"
            },
            "durationInMillis": 0
          },
          {
            "step": "And another step has not been defined",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "And another step has not been defined",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "45db737a-d896-4f80-af7f-cc2727916134"
            },
            "durationInMillis": 0
          },
          {
            "step": "When a step has not been defined",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "When a step has not been defined",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "637f48c8-2c94-4e62-9fdf-21bca1509dbb"
            },
            "durationInMillis": 0
          },
          {
            "step": "Then a step has not been defined",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Then a step has not been defined",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "84b20e81-0ebd-4534-bc6a-7440fe2b5cf6"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a step is annotated as pending",
          "When a step is annotated as pending",
          "Then a step is annotated as pending"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a step is annotated as pending",
            "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
          },
          {
            "type": "THEN",
            "annotatedPattern": "a step is annotated as pending",
            "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "a step is annotated as pending",
            "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
          }
        ],
        "results": [
          {
            "step": "Given a step is annotated as pending",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given a step is annotated as pending",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "1e417499-4dd2-4730-bfaa-caeb983087b7"
            },
            "durationInMillis": 0
          },
          {
            "step": "When a step is annotated as pending",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "When a step is annotated as pending",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "90bedc5d-467d-4061-9a26-d2057ffa1c5d"
            },
            "durationInMillis": 0
          },
          {
            "step": "Then a step is annotated as pending",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Then a step is annotated as pending",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "06bc9fda-c073-49d1-a18f-43cb0c6691e3"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Show that multiple And steps can be used",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I am not logged in",
          "And I have been redirected from my intended page to the login page",
          "When I log in with good credentials",
          "Then I am redirected to my intended page",
          "And I am logged in"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "Given I am not logged in",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given I am not logged in",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "f343f68c-1dee-4aa9-98ec-feced512a6ad"
            },
            "durationInMillis": 0
          },
          {
            "step": "And I have been redirected from my intended page to the login page",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "And I have been redirected from my intended page to the login page",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "75df20fe-4848-40c6-87e7-1d8907aa89d5"
            },
            "durationInMillis": 0
          },
          {
            "step": "When I log in with good credentials",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "When I log in with good credentials",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "3bfe6413-5fa6-431e-b583-ee6ed53172ec"
            },
            "durationInMillis": 0
          },
          {
            "step": "Then I am redirected to my intended page",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Then I am redirected to my intended page",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "31db19c2-9e24-4242-920d-ea14b505e9c5"
            },
            "durationInMillis": 0
          },
          {
            "step": "And I am logged in",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "And I am logged in",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "c68526e4-9b74-4788-be3c-4ce025886d9a"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario with some pending steps",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I am pending"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "Given I am pending",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given I am pending",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "9e30bd1a-f6b7-41a4-a831-6ff5833de9f2"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Matching regex \"a step that has %param\"",
          "Given a step that has a parameter",
          "Then the parameter value is \"a parameter\"",
          "!-- Matching regex \"a step that has exactly one %param\"",
          "Given a step that has exactly one of the parameters",
          "Then the parameter value is \"of the parameters\""
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/priority_matching.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a step that has %param",
            "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a step that has exactly one %param",
            "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+exactly\\s+one\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the parameter value is \"%param\"",
            "resolvedPattern": "the\\s+parameter\\s+value\\s+is\\s+\"(.*)\""
          }
        ],
        "results": [
          {
            "step": "!-- Matching regex \"a step that has %param\"",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Given a step that has a parameter",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a step that has ｟a parameter｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the parameter value is \"a parameter\"",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the parameter value is \"a parameter\"",
            "durationInMillis": 0
          },
          {
            "step": "!-- Matching regex \"a step that has exactly one %param\"",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Given a step that has exactly one of the parameters",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a step that has exactly one ｟of the parameters｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the parameter value is \"of the parameters\"",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the parameter value is \"of the parameters\"",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the stock exchange <stockExchange>",
          "And the asset class <assetClass>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the asset class %assetClass",
            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the stock exchange %stockExchange",
            "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the stock exchange <stockExchange>",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the stock exchange ｟<stockExchange>｠",
            "durationInMillis": 1
          },
          {
            "step": "And the asset class <assetClass>",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And the asset class ｟<assetClass>｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario where before and after steps are executed only once even if there is a given story",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "parameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ],
              "path": "org/jbehave/examples/trader/stories/parametrised.story",
              "anchor": "0"
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
          "examplesTable": {
            "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
              "symbol",
              "threshold"
            ],
            "data": [
              [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ]
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "1.0"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When the stock is traded at price 1.1",
          "Then the alert status is ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/parametrised.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                }
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              }
            ],
            "name": "parametrised.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the asset class %assetClass",
                    "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                  }
                ],
                "results": [
                  {
                    "step": "Given the asset class <assetClass>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given the asset class ｟<assetClass>｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Given a stock of <symbol> and a <threshold>",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟1.0｠",
                    "durationInMillis": 1
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  },
                  {
                    "step": "",
                    "type": "SKIPPED",
                    "durationInMillis": 0
                  },
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "timing": {
            "durationInMillis": 1
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "When the stock is traded at price 1.1",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is traded at price ｟1.1｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario with failed step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          },
          {
            "step": "Then I fail",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "Then I fail",
              "cause": {
                "@class": "junit.framework.AssertionFailedError",
                "detailMessage": "I failed!",
                "stackTrace": [
                  "junit.framework.Assert.fail(Assert.java:47)",
                  "org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                  "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                  "java.lang.reflect.Method.invoke(Method.java:597)",
                  "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "768ab086-9ce1-466d-896a-1296d3b476b2"
            },
            "parametrisedStep": "Then I fail",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "A scenario that is not executed because if followed a failed scenario",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ],
        "results": [
          {
            "step": "Given I do nothing",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given I do nothing",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Composite steps in action.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
          "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
          "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
          "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
          "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
          "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario."
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario.",
            "type": "IGNORABLE",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Using a composite step with normal parameter matching",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Annotated method:",
          "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
          "!-- @Composite(steps = { \"Given <customer> is logged in\",",
          "!--                      \"Given <customer> has a cart\",",
          "!--                      \"When a <product> is added to the cart\" })",
          "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
          "!-- }",
          "!--\u000a",
          "Given Mr Jones has previously bought a ticket"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "%customer has previously bought a %product",
            "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "!-- Annotated method:",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- @Composite(steps = { \"Given <customer> is logged in\",",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!--                      \"Given <customer> has a cart\",",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!--                      \"When a <product> is added to the cart\" })",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!-- }",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "!--\u000a",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "!--\u000a",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "014aa5dc-9807-467b-9287-c6c2c352c50e"
            },
            "durationInMillis": 0
          },
          {
            "step": "Given Mr Jones has previously bought a ticket",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given ｟Mr Jones｠ has previously bought a ｟ticket｠",
            "durationInMillis": 0
          },
          {
            "step": "Given <customer> is logged in",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given ｟Mr Jones｠ is logged in",
            "durationInMillis": 0
          },
          {
            "step": "Given <customer> has a cart",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given ｟Mr Jones｠ has a cart",
            "durationInMillis": 0
          },
          {
            "step": "When a <product> is added to the cart",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "When a ｟ticket｠ is added to the cart",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Using a composite step in a parameterised scenario",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|customer|product|\u000a|Mr Jones|ticket|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "customer",
            "product"
          ],
          "data": [
            [
              [
                "customer",
                "Mr Jones"
              ],
              [
                "product",
                "ticket"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Annotated method:",
          "!-- @Given(\"<customer> has previously bought a <product>\") // used in parameterised scenario",
          "!-- @Composite(steps = { \"Given <customer> is logged in\",",
          "!--                      \"Given <customer> has a cart\",",
          "!--                      \"When a <product> is added to the cart\" })",
          "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
          "!-- }",
          "!--\u000a",
          "Given <customer> has previously bought a <product>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "customer",
              "Mr Jones"
            ],
            [
              "product",
              "ticket"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "%customer has previously bought a %product",
                "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Using a composite step where one of the composed steps is not found.  \u000aThe composed step not found should be reported as pending and the subsequent composed steps not performed.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Annotated method:",
          "!-- @Given(\"%customer returns to cart\")",
          "!-- @Composite(steps = { \"Given step not found\",",
          "!--                      \"Given <customer> has a cart\", })",
          "!-- public void aCompositeStep(@Named(\"customer\") String customer) { // composed steps use these named parameters",
          "!-- }",
          "!--\u000a",
          "Given Mr Jones returns to cart"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "%customer returns to cart",
            "resolvedPattern": "(.*)\\s+returns\\s+to\\s+cart"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "As a story implementer I want to monitor parametrised successful step - before and after execution",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a successful step",
          "Then following step should be performed"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "Given a successful step",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given a successful step",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "b16fb77a-f862-4222-80d8-05b8de242248"
            },
            "durationInMillis": 0
          },
          {
            "step": "Then following step should be performed",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Then following step should be performed",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "ebcd37f2-a21d-438c-832e-261a44c78201"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "As a story implementer I want to monitor parametrized failing step - before and after execution",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a failing step",
          "Then following step should not be performed"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "Given a failing step",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Given a failing step",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "4b031950-76ac-4d16-b220-11e0dd60b2bf"
            },
            "durationInMillis": 0
          },
          {
            "step": "Then following step should not be performed",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Then following step should not be performed",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.doNotPerform(StepCreator.java:621)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "841423ac-a838-4dc1-9b40-65de3b5dfc99"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Composite nested steps in action.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Then all buttons are enabled"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_nested_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
        ],
        "results": [
          {
            "step": "Then all buttons are enabled",
            "type": "PENDING",
            "throwable": {
              "@class": "org.jbehave.core.failures.PendingStepFound",
              "detailMessage": "Then all buttons are enabled",
              "stackTrace": [
                "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                "org.jbehave.core.steps.StepCreator$PendingStep.perform(StepCreator.java:617)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "a90e12e1-037a-4b2d-bdfc-33afb5ea3d3c"
            },
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of symbol STK1 and a threshold of 15.0",
          "When the stock is traded at price 5.0",
          "Then the alert status is OFF",
          "When the stock is sold at price 11.0",
          "Then the alert status is OFF",
          "When the stock is sold at price 16.0",
          "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
          "Then the alert status is ON",
          "Then the alert status is currently ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is sold at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is currently %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given a stock of symbol STK1 and a threshold of 15.0",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟15.0｠",
            "durationInMillis": 1
          },
          {
            "step": "When the stock is traded at price 5.0",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is traded at price ｟5.0｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is OFF",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "When the stock is sold at price 11.0",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is sold at price ｟11.0｠",
            "durationInMillis": 1
          },
          {
            "step": "Then the alert status is OFF",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "When the stock is sold at price 16.0",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is sold at price ｟16.0｠",
            "durationInMillis": 0
          },
          {
            "step": "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is currently ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is currently ｟ON｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold",
            "price",
            "status"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "5.0"
              ],
              [
                "status",
                "OFF"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "11.0"
              ],
              [
                "status",
                "OFF"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "16.0"
              ],
              [
                "status",
                "ON"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of <symbol> and a <threshold>",
          "When the stock is traded with <price>",
          "Then the trader is alerted with <status>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "5.0"
            ],
            [
              "status",
              "OFF"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ],
            "results": [
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded with <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded with ｟5.0｠",
                "durationInMillis": 1
              },
              {
                "step": "Then the trader is alerted with <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "11.0"
            ],
            [
              "status",
              "OFF"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ],
            "results": [
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                "durationInMillis": 0
              },
              {
                "step": "When the stock is traded with <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded with ｟11.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is alerted with <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "16.0"
            ],
            [
              "status",
              "ON"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ],
            "results": [
              {
                "step": "Given a stock of <symbol> and a <threshold>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                "durationInMillis": 1
              },
              {
                "step": "When the stock is traded with <price>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When the stock is traded with ｟16.0｠",
                "durationInMillis": 0
              },
              {
                "step": "Then the trader is alerted with <status>",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then the trader is alerted with ｟ON｠",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Trader sells it all and goes to Bermuda.\u000aThis scenario shows that the same step pattern can be used for different step types",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the alert status is OFF",
          "Given a trader of name Mauro",
          "And the alert status is OFF",
          "Given a stock of symbol STK1 and a threshold of 1.5",
          "When the stock is traded at price 2.0",
          "Then the alert status is ON",
          "When the trader sells all stocks",
          "Then the trader is left with no stocks"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
            "description": {
              "descriptionAsString": "Trader is alerted of status"
            },
            "narrative": {
              "inOrderTo": "ensure a quick response",
              "asA": "trader",
              "iWantTo": "monitor stock prices"
            },
            "meta": {
              "properties": [
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of symbol STK1 and a threshold of 15.0",
                  "When the stock is traded at price 5.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 11.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 16.0",
                  "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                  "Then the alert status is ON",
                  "Then the alert status is currently ON"
                ]
              },
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                    "symbol",
                    "threshold",
                    "price",
                    "status"
                  ],
                  "data": [
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "5.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "11.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "16.0"
                      ],
                      [
                        "status",
                        "ON"
                      ]
                    ]
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of <symbol> and a <threshold>",
                  "When the stock is traded with <price>",
                  "Then the trader is alerted with <status>"
                ]
              }
            ],
            "name": "trader_is_alerted_of_status.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of symbol STK1 and a threshold of 15.0",
                  "When the stock is traded at price 5.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 11.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 16.0",
                  "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                  "Then the alert status is ON",
                  "Then the alert status is currently ON"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              },
              "steps": {
                "matches": [
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is sold at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is currently %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
                  }
                ],
                "results": [
                  {
                    "step": "Given a stock of symbol STK1 and a threshold of 15.0",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟15.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is traded at price 5.0",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is traded at price ｟5.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the alert status is OFF",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the alert status is ｟OFF｠",
                    "durationInMillis": 1
                  },
                  {
                    "step": "When the stock is sold at price 11.0",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is sold at price ｟11.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the alert status is OFF",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the alert status is ｟OFF｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "When the stock is sold at price 16.0",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "When the stock is sold at price ｟16.0｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                    "type": "IGNORABLE",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the alert status is ON",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the alert status is ｟ON｠",
                    "durationInMillis": 0
                  },
                  {
                    "step": "Then the alert status is currently ON",
                    "type": "SUCCESSFUL",
                    "parametrisedStep": "Then the alert status is currently ｟ON｠",
                    "durationInMillis": 0
                  }
                ]
              },
              "afterSteps": {
                "results": [
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  },
                  {
                    "step": "",
                    "type": "SKIPPED",
                    "durationInMillis": 0
                  },
                  {
                    "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
                    "type": "SUCCESSFUL",
                    "durationInMillis": 0
                  }
                ]
              }
            },
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                    "symbol",
                    "threshold",
                    "price",
                    "status"
                  ],
                  "data": [
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "5.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "11.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "16.0"
                      ],
                      [
                        "status",
                        "ON"
                      ]
                    ]
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of <symbol> and a <threshold>",
                  "When the stock is traded with <price>",
                  "Then the trader is alerted with <status>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "allowed": true,
              "exampleScenarios": [
                {
                  "exampleParameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "15.0"
                    ],
                    [
                      "price",
                      "5.0"
                    ],
                    [
                      "status",
                      "OFF"
                    ]
                  ],
                  "performableGivenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded with <price>",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the trader is alerted with <status>",
                        "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given a stock of <symbol> and a <threshold>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                        "durationInMillis": 1
                      },
                      {
                        "step": "When the stock is traded with <price>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "When the stock is traded with ｟5.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the trader is alerted with <status>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                },
                {
                  "exampleParameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "15.0"
                    ],
                    [
                      "price",
                      "11.0"
                    ],
                    [
                      "status",
                      "OFF"
                    ]
                  ],
                  "performableGivenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded with <price>",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the trader is alerted with <status>",
                        "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given a stock of <symbol> and a <threshold>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "When the stock is traded with <price>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "When the stock is traded with ｟11.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the trader is alerted with <status>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the trader is alerted with ｟OFF｠",
                        "durationInMillis": 1
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                },
                {
                  "exampleParameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "15.0"
                    ],
                    [
                      "price",
                      "16.0"
                    ],
                    [
                      "status",
                      "ON"
                    ]
                  ],
                  "performableGivenStories": [
                  ],
                  "beforeSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded with <price>",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the trader is alerted with <status>",
                        "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                      }
                    ],
                    "results": [
                      {
                        "step": "Given a stock of <symbol> and a <threshold>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Given a stock of ｟STK1｠ and a ｟15.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "When the stock is traded with <price>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "When the stock is traded with ｟16.0｠",
                        "durationInMillis": 0
                      },
                      {
                        "step": "Then the trader is alerted with <status>",
                        "type": "SUCCESSFUL",
                        "parametrisedStep": "Then the trader is alerted with ｟ON｠",
                        "durationInMillis": 0
                      }
                    ]
                  },
                  "afterSteps": {
                    "results": [
                      {
                        "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                        "type": "SUCCESSFUL",
                        "durationInMillis": 0
                      }
                    ]
                  }
                }
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {},
              "afterSteps": {}
            }
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterGivenStory()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "timing": {
            "durationInMillis": 3
          }
        }
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a trader of name %trader",
            "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the trader is left with no stocks",
            "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the trader sells all stocks",
            "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the alert status is OFF",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a trader of name Mauro",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a trader of name ｟Mauro｠",
            "durationInMillis": 1
          },
          {
            "step": "And the alert status is OFF",
            "type": "SUCCESSFUL",
            "parametrisedStep": "And the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of symbol STK1 and a threshold of 1.5",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
            "durationInMillis": 0
          },
          {
            "step": "When the stock is traded at price 2.0",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the stock is traded at price ｟2.0｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          },
          {
            "step": "When the trader sells all stocks",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When the trader sells all stocks",
            "durationInMillis": 0
          },
          {
            "step": "Then the trader is left with no stocks",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the trader is left with no stocks",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Trader counts the days to go to Bermuda.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a date of 2010-06-21",
          "When 2 days pass",
          "Then the date is 2010-06-23"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a date of %date",
            "resolvedPattern": "a\\s+date\\s+of\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the date is %date",
            "resolvedPattern": "the\\s+date\\s+is\\s+(.*)"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "%days days pass",
            "resolvedPattern": "(.*)\\s+days\\s+pass"
          }
        ],
        "results": [
          {
            "step": "Given a date of 2010-06-21",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given a date of ｟2010-06-21｠",
            "durationInMillis": 0
          },
          {
            "step": "When 2 days pass",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When ｟2｠ days pass",
            "durationInMillis": 0
          },
          {
            "step": "Then the date is 2010-06-23",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the date is ｟2010-06-23｠",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Traders can be searched by name",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
          "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
          "!-- This is a comment, which will be ignored in the execution",
          "When traders are subset to \".*y\" by name",
          "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "traders are subset to \"%regex\" by name",
            "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the current trader activity is: %activityTable",
            "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the trader ranks: %ranksTable",
            "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the trader ranks: \u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 0
          },
          {
            "step": "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the current trader activity is: \u000a［|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |］",
            "durationInMillis": 2
          },
          {
            "step": "!-- This is a comment, which will be ignored in the execution",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "When traders are subset to \".*y\" by name",
            "type": "SUCCESSFUL",
            "parametrisedStep": "When traders are subset to \".*y\" by name",
            "durationInMillis": 0
          },
          {
            "step": "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Traders can be searched by name in landscape format",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
          "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "THEN",
            "annotatedPattern": "the current trader activity is: %activityTable",
            "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the trader ranks: %ranksTable",
            "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the trader ranks: \u000a［{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|］",
            "durationInMillis": 0
          },
          {
            "step": "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the current trader activity is: \u000a［|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |］",
            "durationInMillis": 2
          },
          {
            "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterSuccessfulScenario()",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Traders search fails",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
          "!-- Verification fails",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the trader ranks: %ranksTable",
            "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
            "type": "SUCCESSFUL",
            "parametrisedStep": "Given the trader ranks: \u000a［|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 0
          },
          {
            "step": "!-- Verification fails",
            "type": "IGNORABLE",
            "durationInMillis": 0
          },
          {
            "step": "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
              "cause": {
                "@class": "org.jbehave.core.model.OutcomesTable$OutcomesFailed",
                "stackTrace": [
                  "org.jbehave.core.model.OutcomesTable.verify(OutcomesTable.java:55)",
                  "org.jbehave.examples.trader.steps.TraderSteps.theTradersReturnedAre(TraderSteps.java:115)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                  "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                  "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                  "java.lang.reflect.Method.invoke(Method.java:597)",
                  "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:553)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ],
                "uuid": "94f512f3-2796-4674-88a5-56f3cb008f77"
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:568)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:704)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "c1b7aaf5-7551-4cfc-a54a-9689a527fcd5"
            },
            "parametrisedStep": "Then the traders returned are:\u000a［|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|］",
            "durationInMillis": 1
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Search term does match examples table header",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|ridiculousSearchTerm|\u000d\u000a|Hello Kitty|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "ridiculousSearchTerm"
          ],
          "data": [
            [
              [
                "ridiculousSearchTerm",
                "Hello Kitty"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given that I am on Google's Homepage",
          "When I enter the search term <ridiculousSearchTerm> and proceed",
          "Then I should see ridiculous things"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "ridiculousSearchTerm",
              "Hello Kitty"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "I should see ridiculous things",
                "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "that I am on Google's Homepage",
                "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
              }
            ],
            "results": [
              {
                "step": "Given that I am on Google's Homepage",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given that I am on Google's Homepage",
                "durationInMillis": 0
              },
              {
                "step": "When I enter the search term <ridiculousSearchTerm> and proceed",
                "type": "SUCCESSFUL",
                "parametrisedStep": "When I enter the search term ｟Hello Kitty｠ and proceed",
                "durationInMillis": 0
              },
              {
                "step": "Then I should see ridiculous things",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Then I should see ridiculous things",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Search term does not match examples table header and step is marked as pending",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|ridiculoussearchterm|\u000d\u000a|Hello Kitty|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "ridiculoussearchterm"
          ],
          "data": [
            [
              [
                "ridiculoussearchterm",
                "Hello Kitty"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given that I am on Google's Homepage",
          "When I enter the search term <ridiculousSearchTerm> and proceed",
          "Then I should see ridiculous things"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "ridiculoussearchterm",
              "Hello Kitty"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          },
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "I should see ridiculous things",
                "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "that I am on Google's Homepage",
                "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
              }
            ],
            "results": [
              {
                "step": "Given that I am on Google's Homepage",
                "type": "SUCCESSFUL",
                "parametrisedStep": "Given that I am on Google's Homepage",
                "durationInMillis": 0
              },
              {
                "step": "When I enter the search term <ridiculousSearchTerm> and proceed",
                "type": "PENDING",
                "throwable": {
                  "@class": "org.jbehave.core.failures.PendingStepFound",
                  "detailMessage": "When I enter the search term <ridiculousSearchTerm> and proceed",
                  "stackTrace": [
                    "org.jbehave.core.steps.AbstractStepResult$Pending.<init>(AbstractStepResult.java:58)",
                    "org.jbehave.core.steps.AbstractStepResult.pending(AbstractStepResult.java:174)",
                    "org.jbehave.core.steps.StepCreator$ParameterisedStep.perform(StepCreator.java:559)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableExampleScenario.perform(PerformableTree.java:758)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:689)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ],
                  "uuid": "ce6dc924-d166-4676-8fac-f397246d17ef"
                },
                "durationInMillis": 0
              },
              {
                "step": "Then I should see ridiculous things",
                "type": "NOT_PERFORMED",
                "parametrisedStep": "Then I should see ridiculous things",
                "durationInMillis": 0
              }
            ]
          },
          "afterSteps": {
            "results": [
              {
                "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterExampleScenario()",
                "type": "SUCCESSFUL",
                "durationInMillis": 0
              }
            ]
          }
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the alert status is OFF",
          "Given a trader of name Mauro",
          "And the alert status is OFF",
          "Given a stock of symbol STK1 and a threshold of 1.5",
          "When the stock is traded at price 2.0",
          "Then the alert status is ON",
          "When the trader sells all stocks",
          "Then the trader is left with no stocks"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failing_before_after.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure before scenario",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario(FailingBeforeAfterSteps.java:17)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "4cf2e789-2449-4dbc-b9a2-cd5e01ce9376"
            },
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a trader of name %trader",
            "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the trader is left with no stocks",
            "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the trader sells all stocks",
            "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the alert status is OFF",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a trader of name Mauro",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given a trader of name ｟Mauro｠",
            "durationInMillis": 0
          },
          {
            "step": "And the alert status is OFF",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "And the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of symbol STK1 and a threshold of 1.5",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
            "durationInMillis": 0
          },
          {
            "step": "When the stock is traded at price 2.0",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "When the stock is traded at price ｟2.0｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          },
          {
            "step": "When the trader sells all stocks",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "When the trader sells all stocks",
            "durationInMillis": 0
          },
          {
            "step": "Then the trader is left with no stocks",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Then the trader is left with no stocks",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 1
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure after scenario",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario(FailingBeforeAfterSteps.java:22)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "89ac4257-c0f3-4bb3-adf8-e58f8a34c532"
            },
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the alert status is OFF",
          "Given a trader of name Mauro",
          "And the alert status is OFF",
          "Given a stock of symbol STK1 and a threshold of 1.5",
          "When the stock is traded at price 2.0",
          "Then the alert status is ON",
          "When the trader sells all stocks",
          "Then the trader is left with no stocks"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failing_before_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method beforeScenario (annotated with @BeforeScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure before scenario",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure before scenario",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.beforeScenario(FailingBeforeAfterSteps.java:17)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.embedder.PerformableTree$FineSoFar.run(PerformableTree.java:254)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:697)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "009dcbaf-e45b-43a6-a40b-ab679c525a11"
            },
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.beforeScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          }
        ]
      },
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a trader of name %trader",
            "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the trader is left with no stocks",
            "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the trader sells all stocks",
            "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ],
        "results": [
          {
            "step": "Given the alert status is OFF",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a trader of name Mauro",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given a trader of name ｟Mauro｠",
            "durationInMillis": 0
          },
          {
            "step": "And the alert status is OFF",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "And the alert status is ｟OFF｠",
            "durationInMillis": 0
          },
          {
            "step": "Given a stock of symbol STK1 and a threshold of 1.5",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Given a stock of symbol ｟STK1｠ and a threshold of ｟1.5｠",
            "durationInMillis": 0
          },
          {
            "step": "When the stock is traded at price 2.0",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "When the stock is traded at price ｟2.0｠",
            "durationInMillis": 0
          },
          {
            "step": "Then the alert status is ON",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Then the alert status is ｟ON｠",
            "durationInMillis": 0
          },
          {
            "step": "When the trader sells all stocks",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "When the trader sells all stocks",
            "durationInMillis": 0
          },
          {
            "step": "Then the trader is left with no stocks",
            "type": "NOT_PERFORMED",
            "parametrisedStep": "Then the trader is left with no stocks",
            "durationInMillis": 0
          }
        ]
      },
      "afterSteps": {
        "results": [
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterScenario(java.lang.String,java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.BeforeAfterSteps.afterFailedScenario(java.lang.String)",
            "type": "SUCCESSFUL",
            "durationInMillis": 0
          },
          {
            "step": "",
            "type": "SKIPPED",
            "durationInMillis": 0
          },
          {
            "step": "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario()",
            "type": "FAILED",
            "throwable": {
              "detailMessage": "org.jbehave.core.failures.BeforeOrAfterFailed: Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
              "cause": {
                "@class": "org.jbehave.core.failures.BeforeOrAfterFailed",
                "detailMessage": "Method afterScenario (annotated with @AfterScenario in class org.jbehave.examples.trader.steps.FailingBeforeAfterSteps) failed: java.lang.RuntimeException: Failure after scenario",
                "cause": {
                  "@class": "java.lang.RuntimeException",
                  "detailMessage": "Failure after scenario",
                  "stackTrace": [
                    "org.jbehave.examples.trader.steps.FailingBeforeAfterSteps.afterScenario(FailingBeforeAfterSteps.java:22)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
                    "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)",
                    "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)",
                    "java.lang.reflect.Method.invoke(Method.java:597)",
                    "org.jbehave.core.steps.StepCreator$MethodInvoker.invoke(StepCreator.java:674)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:459)",
                    "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                    "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                    "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                    "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                    "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                    "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                    "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                    "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                    "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                    "java.lang.Thread.run(Thread.java:680)"
                  ]
                },
                "stackTrace": [
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                  "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                  "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                  "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                  "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                  "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                  "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                  "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                  "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                  "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                  "java.lang.Thread.run(Thread.java:680)"
                ]
              },
              "stackTrace": [
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.perform(StepCreator.java:462)",
                "org.jbehave.core.steps.StepCreator$BeforeOrAfterStep.doNotPerform(StepCreator.java:475)",
                "org.jbehave.core.embedder.PerformableTree$SomethingHappened.run(PerformableTree.java:282)",
                "org.jbehave.core.embedder.PerformableTree$PerformableSteps.perform(PerformableTree.java:797)",
                "org.jbehave.core.embedder.PerformableTree$PerformableScenario.perform(PerformableTree.java:705)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.performScenarios(PerformableTree.java:602)",
                "org.jbehave.core.embedder.PerformableTree$PerformableStory.perform(PerformableTree.java:592)",
                "org.jbehave.core.embedder.PerformableTree.performCancellable(PerformableTree.java:311)",
                "org.jbehave.core.embedder.PerformableTree.perform(PerformableTree.java:291)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:227)",
                "org.jbehave.core.embedder.StoryManager$EnqueuedStory.call(StoryManager.java:206)",
                "java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)",
                "java.util.concurrent.FutureTask.run(FutureTask.java:138)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)",
                "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)",
                "java.lang.Thread.run(Thread.java:680)"
              ],
              "uuid": "06d40204-a011-4284-a478-94409301eef0"
            },
            "durationInMillis": 0
          }
        ]
      }
    },
    {
      "scenario": {
        "title": "Pass on a step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I pass"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I pass",
            "resolvedPattern": "I\\s+pass"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Fail on a step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/after_scenario_outcome.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "An initial And step should be marked as pending as there is not previous step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- What is this And of?  JBehave treats as pending",
          "And the wind blows",
          "!-- Look Ma' - I can also use keywords in scenario title and step comments!"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "And steps should match the previous step type",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the wind blows",
          "!-- This And is equivalent to another Given",
          "And the wind blows",
          "!-- This And shows that we can chain multiple And steps",
          "And the wind blows",
          "When the wind blows",
          "!-- This And is equivalent to another When",
          "And the wind blows"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/and_step.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the wind blows",
            "resolvedPattern": "the\\s+wind\\s+blows"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|date       |amount|\u000a|none       |0.0   |\u000a|01/06/2010 |2.15  |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "date",
            "amount"
          ],
          "data": [
            [
              [
                "date",
                "none"
              ],
              [
                "amount",
                "0.0"
              ]
            ],
            [
              [
                "date",
                "01/06/2010"
              ],
              [
                "amount",
                "2.15"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a plan with calendar date of <date>",
          "Then the claimant should receive an amount of <amount>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/claims_with_null_calendar.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "date",
              "none"
            ],
            [
              "amount",
              "0.0"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a plan with calendar date of <date>",
                "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the claimant should receive an amount of <amount>",
                "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "date",
              "01/06/2010"
            ],
            [
              "amount",
              "2.15"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a plan with calendar date of <date>",
                "resolvedPattern": "a\\s+plan\\s+with\\s+calendar\\s+date\\s+of\\s+<date>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the claimant should receive an amount of <amount>",
                "resolvedPattern": "the\\s+claimant\\s+should\\s+receive\\s+an\\s+amount\\s+of\\s+<amount>"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- GivenStories:  ignore_me.story",
          "Given I do nothing",
          "!-- Examples: \u000a|I|am|just|lazy|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Table parameter loaded from a classpath resource",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the traders: org/jbehave/examples/trader/stories/traders.table",
          "!-- This is a comment, which will be ignored in the execution",
          "When traders are subset to \".*y\" by name",
          "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "traders are subset to \"%regex\" by name",
            "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the traders: %ranksTable",
            "resolvedPattern": "the\\s+traders:\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Parameters table loaded from a classpath resource",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold",
            "price",
            "status"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "5.0"
              ],
              [
                "status",
                "OFF"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "11.0"
              ],
              [
                "status",
                "OFF"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "16.0"
              ],
              [
                "status",
                "ON"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of <symbol> and a <threshold>",
          "When the stock is traded with <price>",
          "Then the trader is alerted with <status>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/examples_table_loaded_from_classpath.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "5.0"
            ],
            [
              "status",
              "OFF"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "11.0"
            ],
            [
              "status",
              "OFF"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "16.0"
            ],
            [
              "status",
              "ON"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the alert status is OFF",
          "Given a trader of name Mauro",
          "And the alert status is OFF",
          "Given a stock of symbol STK1 and a threshold of 1.5",
          "When the stock is traded at price 2.0",
          "Then the alert status is ON",
          "When the trader sells all stocks",
          "Then the trader is left with no stocks"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failing_after_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a trader of name %trader",
            "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the trader is left with no stocks",
            "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the trader sells all stocks",
            "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Fail on a step in story 1",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When a failure occurs in story 1"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_one.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Fail on a step in story 2",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When a failure occurs in story 2"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_correlation_two.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Fail on a step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Pass after given stories",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/do_nothing.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/do_nothing.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I pass"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/do_nothing.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "!-- GivenStories:  ignore_me.story",
                  "Given I do nothing",
                  "!-- Examples: \u000a|I|am|just|lazy|"
                ]
              }
            ],
            "name": "do_nothing.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "!-- GivenStories:  ignore_me.story",
                  "Given I do nothing",
                  "!-- Examples: \u000a|I|am|just|lazy|"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/do_nothing.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "I do nothing",
                    "resolvedPattern": "I\\s+do\\s+nothing"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I pass",
            "resolvedPattern": "I\\s+pass"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that depends on a non successful story",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/non_successful.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/non_successful.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/non_successful.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the traders:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_non_successful.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/non_successful.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
              ]
            },
            "scenarios": [
              {
                "title": "A scenario with failed step",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Then I fail"
                ]
              }
            ],
            "name": "non_successful.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "A scenario with failed step",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Then I fail"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "THEN",
                    "annotatedPattern": "I fail",
                    "resolvedPattern": "I\\s+fail"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the traders: %ranksTable",
            "resolvedPattern": "the\\s+traders:\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that depends on a given story with parameters specified as anchor pointing to specific examples row. \u000aThe presence of the anchor implies that the scenario is executed normally and not parametrised by examples, i.e. that the scenario is not executed for each examples row.",
        "meta": {
          "properties": [
            {
              "@name": "theme",
              "@value": "parametrisation"
            },
            {
              "@name": "assetClass",
              "@value": "FX"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "parameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ],
              "path": "org/jbehave/examples/trader/stories/parametrised.story",
              "anchor": "0"
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
          "examplesTable": {
            "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
              "symbol",
              "threshold"
            ],
            "data": [
              [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ],
              [
                [
                  "symbol",
                  "STK2"
                ],
                [
                  "threshold",
                  "2.0"
                ]
              ]
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|\u000a|STK2  |2.0|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "1.0"
              ]
            ],
            [
              [
                "symbol",
                "STK2"
              ],
              [
                "threshold",
                "2.0"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When the stock is traded at price 1.1",
          "Then the alert status is ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_anchor.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/parametrised.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                }
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              }
            ],
            "name": "parametrised.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the asset class %assetClass",
                    "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that depends on given stories parametrised by examples. \u000aHere the entire scenario is parametrised by examples, i.e. the scenario is executed for each examples row.",
        "meta": {
          "properties": [
            {
              "@name": "assetClass",
              "@value": "FX"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|stockExchange|symbol|threshold|price|status|\u000a|NASDAQ|STK1|10.0|5.0|OFF|\u000a|FTSE|STK1|10.0|11.0|ON|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "stockExchange",
            "symbol",
            "threshold",
            "price",
            "status"
          ],
          "data": [
            [
              [
                "stockExchange",
                "NASDAQ"
              ],
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "10.0"
              ],
              [
                "price",
                "5.0"
              ],
              [
                "status",
                "OFF"
              ],
              [
                "assetClass",
                "FX"
              ]
            ],
            [
              [
                "stockExchange",
                "FTSE"
              ],
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "10.0"
              ],
              [
                "price",
                "11.0"
              ],
              [
                "status",
                "ON"
              ],
              [
                "assetClass",
                "FX"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of symbol <symbol> and a threshold of <threshold>",
          "When the stock is traded at price <price>",
          "Then the alert status is <status>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_examples.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "stockExchange",
              "NASDAQ"
            ],
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "10.0"
            ],
            [
              "price",
              "5.0"
            ],
            [
              "status",
              "OFF"
            ],
            [
              "assetClass",
              "FX"
            ]
          ],
          "performableGivenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  }
                ],
                "name": "select_stock_exchange.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the stock exchange %stockExchange",
                        "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "stockExchange",
              "FTSE"
            ],
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "10.0"
            ],
            [
              "price",
              "11.0"
            ],
            [
              "status",
              "ON"
            ],
            [
              "assetClass",
              "FX"
            ]
          ],
          "performableGivenStories": [
            {
              "story": {
                "path": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                "description": {
                  "descriptionAsString": ""
                },
                "narrative": {
                  "inOrderTo": "",
                  "asA": "",
                  "iWantTo": ""
                },
                "meta": {
                  "properties": [
                  ]
                },
                "scenarios": [
                  {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  }
                ],
                "name": "select_stock_exchange.story",
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                }
              },
              "allowed": true,
              "givenStories": [
              ],
              "scenarios": [
                {
                  "scenario": {
                    "title": "",
                    "meta": {
                      "properties": [
                      ]
                    },
                    "givenStories": {
                      "givenStories": [
                      ],
                      "givenStoriesAsString": "",
                      "examplesTable": {
                        "tableAsString": "",
                        "headerSeparator": "|",
                        "valueSeparator": "|",
                        "ignorableSeparator": "|--",
                        "tableTransformers": {
                          "transformers": [
                            [
                              "FROM_LANDSCAPE",
                              {}
                            ]
                          ]
                        },
                        "headers": [
                        ],
                        "data": [
                        ],
                        "properties": [
                          {
                            "@name": "headerSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "valueSeparator",
                            "@value": "|"
                          },
                          {
                            "@name": "ignorableSeparator",
                            "@value": "|--"
                          }
                        ],
                        "propertiesAsString": "",
                        "namedParameters": [
                        ],
                        "trim": true
                      }
                    },
                    "examplesTable": {
                      "tableAsString": "",
                      "headerSeparator": "|",
                      "valueSeparator": "|",
                      "ignorableSeparator": "|--",
                      "tableTransformers": {
                        "transformers": [
                          [
                            "FROM_LANDSCAPE",
                            {}
                          ]
                        ]
                      },
                      "headers": [
                      ],
                      "data": [
                      ],
                      "properties": [
                        {
                          "@name": "headerSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "valueSeparator",
                          "@value": "|"
                        },
                        {
                          "@name": "ignorableSeparator",
                          "@value": "|--"
                        }
                      ],
                      "propertiesAsString": "",
                      "namedParameters": [
                      ],
                      "trim": true
                    },
                    "steps": [
                      "Given the stock exchange <stockExchange>",
                      "And the asset class <assetClass>"
                    ]
                  },
                  "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
                  "allowed": true,
                  "exampleScenarios": [
                  ],
                  "givenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the asset class %assetClass",
                        "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                      },
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "the stock exchange %stockExchange",
                        "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "beforeSteps": {},
              "afterSteps": {},
              "timing": {
                "durationInMillis": 0
              }
            }
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded at price %price",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the alert status is %status",
                "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that is executed after the given stories parametrised by meta",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When the stock is traded at price 1.1",
          "Then the alert status is ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/given_stories_parametrised_by_meta.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario to be skipped\u000aand not executed",
        "meta": {
          "properties": [
            {
              "@name": "skip",
              "@value": ""
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario with an author",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario with examples whose rows can be filtered on meta",
        "meta": {
          "properties": [
            {
              "@name": "run",
              "@value": ""
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|Meta:|Parameter|\u000a|@run yes|value|\u000a|@run not|value|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "Meta:",
            "Parameter"
          ],
          "data": [
            [
              [
                "Meta:",
                "@run yes"
              ],
              [
                "Parameter",
                "value"
              ],
              [
                "author",
                "Mauro"
              ],
              [
                "run",
                ""
              ],
              [
                "theme",
                "filtering"
              ]
            ],
            [
              [
                "Meta:",
                "@run not"
              ],
              [
                "Parameter",
                "value"
              ],
              [
                "author",
                "Mauro"
              ],
              [
                "run",
                ""
              ],
              [
                "theme",
                "filtering"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_filtering.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "Meta:",
              "@run yes"
            ],
            [
              "Parameter",
              "value"
            ],
            [
              "author",
              "Mauro"
            ],
            [
              "run",
              ""
            ],
            [
              "theme",
              "filtering"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "Meta:",
              "@run not"
            ],
            [
              "Parameter",
              "value"
            ],
            [
              "author",
              "Mauro"
            ],
            [
              "run",
              ""
            ],
            [
              "theme",
              "filtering"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "I do nothing",
                "resolvedPattern": "I\\s+do\\s+nothing"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "scenario with explicitly mentioned meta params",
        "meta": {
          "properties": [
            {
              "@name": "variant",
              "@value": "named"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I have specified the <theme>",
          "And a <variant>",
          "Then the theme is 'parameters' with variant 'named'"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a <variant>",
            "resolvedPattern": "a\\s+<variant>"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the theme is '%theme' with variant '%variant'",
            "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "I have specified the <theme>",
            "resolvedPattern": "I\\s+have\\s+specified\\s+the\\s+<theme>"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "scenario with hidden meta params",
        "meta": {
          "properties": [
            {
              "@name": "variant",
              "@value": "foo"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I have some step that implicitly requires meta params",
          "Then the theme is 'parameters' with variant 'foo'"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/meta_parametrisation.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I have some step that implicitly requires meta params",
            "resolvedPattern": "I\\s+have\\s+some\\s+step\\s+that\\s+implicitly\\s+requires\\s+meta\\s+params"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the theme is '%theme' with variant '%variant'",
            "resolvedPattern": "the\\s+theme\\s+is\\s+'(.*)'\\s+with\\s+variant\\s+'(.*)'"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Supported action and/or event story",
        "meta": {
          "properties": [
            {
              "@name": "notSupportedActions",
              "@value": "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            },
            {
              "@name": "supportedActions",
              "@value": "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            },
            {
              "@name": "notSupportedEventTypes",
              "@value": "DONE,FETCHED,CREATED,TESTED,FIXED"
            },
            {
              "@name": "supportedEventTypes",
              "@value": "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            }
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|actionSupportability   |eventTypeSupportability|\u000d\u000a|supported              |supported              |\u000d\u000a|notSupported           |supported              |\u000d\u000a|supported              |notSupported           |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "actionSupportability",
            "eventTypeSupportability"
          ],
          "data": [
            [
              [
                "actionSupportability",
                "supported"
              ],
              [
                "eventTypeSupportability",
                "supported"
              ],
              [
                "notSupportedActions",
                "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
              ],
              [
                "notSupportedEventTypes",
                "DONE,FETCHED,CREATED,TESTED,FIXED"
              ],
              [
                "supportedActions",
                "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
              ],
              [
                "supportedEventTypes",
                "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
              ]
            ],
            [
              [
                "actionSupportability",
                "notSupported"
              ],
              [
                "eventTypeSupportability",
                "supported"
              ],
              [
                "notSupportedActions",
                "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
              ],
              [
                "notSupportedEventTypes",
                "DONE,FETCHED,CREATED,TESTED,FIXED"
              ],
              [
                "supportedActions",
                "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
              ],
              [
                "supportedEventTypes",
                "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
              ]
            ],
            [
              [
                "actionSupportability",
                "supported"
              ],
              [
                "eventTypeSupportability",
                "notSupported"
              ],
              [
                "notSupportedActions",
                "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
              ],
              [
                "notSupportedEventTypes",
                "DONE,FETCHED,CREATED,TESTED,FIXED"
              ],
              [
                "supportedActions",
                "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
              ],
              [
                "supportedEventTypes",
                "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a message with <actionSupportability> action and <eventTypeSupportability> event",
          "When it is received",
          "Then message is consumed without error"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/named_annotations.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "actionSupportability",
              "supported"
            ],
            [
              "eventTypeSupportability",
              "supported"
            ],
            [
              "notSupportedActions",
              "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            ],
            [
              "notSupportedEventTypes",
              "DONE,FETCHED,CREATED,TESTED,FIXED"
            ],
            [
              "supportedActions",
              "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            ],
            [
              "supportedEventTypes",
              "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "actionSupportability",
              "notSupported"
            ],
            [
              "eventTypeSupportability",
              "supported"
            ],
            [
              "notSupportedActions",
              "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            ],
            [
              "notSupportedEventTypes",
              "DONE,FETCHED,CREATED,TESTED,FIXED"
            ],
            [
              "supportedActions",
              "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            ],
            [
              "supportedEventTypes",
              "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "actionSupportability",
              "supported"
            ],
            [
              "eventTypeSupportability",
              "notSupported"
            ],
            [
              "notSupportedActions",
              "FIX,SCHEDULE,RESCHEDULE,DETERMINE"
            ],
            [
              "notSupportedEventTypes",
              "DONE,FETCHED,CREATED,TESTED,FIXED"
            ],
            [
              "supportedActions",
              "TEST,CREATE,CANCEL,TERMINATE,AMEND,RECREATE,FACILITATE,SLEEP"
            ],
            [
              "supportedEventTypes",
              "NEW,FRESH,CANCELLED,AMENDED,TERMINATED"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "We want to verify that parameters can be matched by name preserving the natural order",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given parameters matched by name in natural order one and two",
          "Then parameters values are one and two"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "parameters matched by name in natural order %ith and %nth",
            "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+natural\\s+order\\s+(.*)\\s+and\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "parameters values are %ith and %nth",
            "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "We want to verify that parameters can be matched by name inverting the natural order",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given parameters matched by name in inverse order one and two",
          "Then parameters values are one and two"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/named_parameters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "parameters matched by name in inverse order %ith and %nth",
            "resolvedPattern": "parameters\\s+matched\\s+by\\s+name\\s+in\\s+inverse\\s+order\\s+(.*)\\s+and\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "parameters values are %ith and %nth",
            "resolvedPattern": "parameters\\s+values\\s+are\\s+(.*)\\s+and\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario with failed step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/non_successful.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "I want to show that different parameter delimiters can be configured via the ParameterControls",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|parameter|\u000a|value|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "parameter"
          ],
          "data": [
            [
              [
                "parameter",
                "value"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a [parameter]"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "parameter",
              "value"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "I want to show that parameter values are correctly delimited, even when the values are overlapping",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of symbol 10ABCDEF and a threshold of 10",
          "Given a stock of symbol ABC10DEF and a threshold of 10",
          "Given a stock of symbol ABCDEF10 and a threshold of 10"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "I want to show that parameter values are correctly delimited, but not in the table parameter",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the traders: \u000a|name | rank   |\u000a|joe  | topdog |",
          "And a stock of symbol topdog and a threshold of 10"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parameter_delimiters.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the traders: %ranksTable",
            "resolvedPattern": "the\\s+traders:\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Use flexible parameters with examples table",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|client|item|\u000a|Rui|chocolate|\u000a|Figueira|car|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "client",
            "item"
          ],
          "data": [
            [
              [
                "client",
                "Rui"
              ],
              [
                "item",
                "chocolate"
              ]
            ],
            [
              [
                "client",
                "Figueira"
              ],
              [
                "item",
                "car"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given <client> is logged in",
          "And <client> has a cart",
          "When a <item> is added to the cart",
          "Then cart contains <item>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parametrisation_by_delimited_name.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "client",
              "Rui"
            ],
            [
              "item",
              "chocolate"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "client",
              "Figueira"
            ],
            [
              "item",
              "car"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the asset class <assetClass>",
          "Given a stock of <symbol> and a <threshold>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of <symbol> and a <threshold>",
            "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the asset class %assetClass",
            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|scheme| \u000a|scheme1| \u000a|scheme2|\u000a|scheme3|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "scheme"
          ],
          "data": [
            [
              [
                "scheme",
                "scheme1"
              ]
            ],
            [
              [
                "scheme",
                "scheme2"
              ]
            ],
            [
              [
                "scheme",
                "scheme3"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a parametrised table:\u000a|name|value|\u000a|name1|scheme|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/parametrised_table.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "scheme",
              "scheme1"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "scheme",
              "scheme2"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "scheme",
              "scheme3"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a step has not been defined",
          "And another step has not been defined",
          "When a step has not been defined",
          "Then a step has not been defined"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a step is annotated as pending",
          "When a step is annotated as pending",
          "Then a step is annotated as pending"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a step is annotated as pending",
            "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
          },
          {
            "type": "THEN",
            "annotatedPattern": "a step is annotated as pending",
            "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "a step is annotated as pending",
            "resolvedPattern": "a\\s+step\\s+is\\s+annotated\\s+as\\s+pending"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Show that multiple And steps can be used",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I am not logged in",
          "And I have been redirected from my intended page to the login page",
          "When I log in with good credentials",
          "Then I am redirected to my intended page",
          "And I am logged in"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario with some pending steps",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I am pending"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/pending_stats.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Matching regex \"a step that has %param\"",
          "Given a step that has a parameter",
          "Then the parameter value is \"a parameter\"",
          "!-- Matching regex \"a step that has exactly one %param\"",
          "Given a step that has exactly one of the parameters",
          "Then the parameter value is \"of the parameters\""
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/priority_matching.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a step that has %param",
            "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a step that has exactly one %param",
            "resolvedPattern": "a\\s+step\\s+that\\s+has\\s+exactly\\s+one\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the parameter value is \"%param\"",
            "resolvedPattern": "the\\s+parameter\\s+value\\s+is\\s+\"(.*)\""
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the stock exchange <stockExchange>",
          "And the asset class <assetClass>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/select_stock_exchange.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "the asset class %assetClass",
            "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the stock exchange %stockExchange",
            "resolvedPattern": "the\\s+stock\\s+exchange\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario where before and after steps are executed only once even if there is a given story",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
              "parameters": [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ],
              "path": "org/jbehave/examples/trader/stories/parametrised.story",
              "anchor": "0"
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/parametrised.story#{0}",
          "examplesTable": {
            "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
              "symbol",
              "threshold"
            ],
            "data": [
              [
                [
                  "symbol",
                  "STK1"
                ],
                [
                  "threshold",
                  "1.0"
                ]
              ]
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|\u000a|STK1  |1.0|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "1.0"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "When the stock is traded at price 1.1",
          "Then the alert status is ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/parametrised.story",
            "description": {
              "descriptionAsString": ""
            },
            "narrative": {
              "inOrderTo": "",
              "asA": "",
              "iWantTo": ""
            },
            "meta": {
              "properties": [
                {
                  "@name": "theme",
                  "@value": "parametrisation"
                }
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              }
            ],
            "name": "parametrised.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given the asset class <assetClass>",
                  "Given a stock of <symbol> and a <threshold>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/parametrised.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of <symbol> and a <threshold>",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "the asset class %assetClass",
                    "resolvedPattern": "the\\s+asset\\s+class\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario with failed step",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing",
          "Then I fail"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          },
          {
            "type": "THEN",
            "annotatedPattern": "I fail",
            "resolvedPattern": "I\\s+fail"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "A scenario that is not executed because if followed a failed scenario",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given I do nothing"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "I do nothing",
            "resolvedPattern": "I\\s+do\\s+nothing"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Composite steps in action.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the",
          "!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.",
          "!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),",
          "!-- if the @Composite annotation is found on the matched method, the \"composed\" steps defined in the @Composite annotations are created",
          "!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated",
          "!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario."
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Using a composite step with normal parameter matching",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Annotated method:",
          "!-- @Given(\"%customer has previously bought a %product\") // used in normal parameter matching",
          "!-- @Composite(steps = { \"Given <customer> is logged in\",",
          "!--                      \"Given <customer> has a cart\",",
          "!--                      \"When a <product> is added to the cart\" })",
          "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
          "!-- }",
          "!--\u000a",
          "Given Mr Jones has previously bought a ticket"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "%customer has previously bought a %product",
            "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Using a composite step in a parameterised scenario",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|customer|product|\u000a|Mr Jones|ticket|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "customer",
            "product"
          ],
          "data": [
            [
              [
                "customer",
                "Mr Jones"
              ],
              [
                "product",
                "ticket"
              ],
              [
                "theme",
                "parametrisation"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Annotated method:",
          "!-- @Given(\"<customer> has previously bought a <product>\") // used in parameterised scenario",
          "!-- @Composite(steps = { \"Given <customer> is logged in\",",
          "!--                      \"Given <customer> has a cart\",",
          "!--                      \"When a <product> is added to the cart\" })",
          "!-- public void aCompositeStep(@Named(\"customer\") String customer, @Named(\"product\") String product) { // composed steps use these named parameters",
          "!-- }",
          "!--\u000a",
          "Given <customer> has previously bought a <product>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "customer",
              "Mr Jones"
            ],
            [
              "product",
              "ticket"
            ],
            [
              "theme",
              "parametrisation"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "%customer has previously bought a %product",
                "resolvedPattern": "(.*)\\s+has\\s+previously\\s+bought\\s+a\\s+(.*)"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Using a composite step where one of the composed steps is not found.  \u000aThe composed step not found should be reported as pending and the subsequent composed steps not performed.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "!-- Annotated method:",
          "!-- @Given(\"%customer returns to cart\")",
          "!-- @Composite(steps = { \"Given step not found\",",
          "!--                      \"Given <customer> has a cart\", })",
          "!-- public void aCompositeStep(@Named(\"customer\") String customer) { // composed steps use these named parameters",
          "!-- }",
          "!--\u000a",
          "Given Mr Jones returns to cart"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "%customer returns to cart",
            "resolvedPattern": "(.*)\\s+returns\\s+to\\s+cart"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "As a story implementer I want to monitor parametrised successful step - before and after execution",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a successful step",
          "Then following step should be performed"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "As a story implementer I want to monitor parametrized failing step - before and after execution",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a failing step",
          "Then following step should not be performed"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_monitoring.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Composite nested steps in action.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Then all buttons are enabled"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/step_nested_composition.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of symbol STK1 and a threshold of 15.0",
          "When the stock is traded at price 5.0",
          "Then the alert status is OFF",
          "When the stock is sold at price 11.0",
          "Then the alert status is OFF",
          "When the stock is sold at price 16.0",
          "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
          "Then the alert status is ON",
          "Then the alert status is currently ON"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is sold at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is currently %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "symbol",
            "threshold",
            "price",
            "status"
          ],
          "data": [
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "5.0"
              ],
              [
                "status",
                "OFF"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "11.0"
              ],
              [
                "status",
                "OFF"
              ]
            ],
            [
              [
                "symbol",
                "STK1"
              ],
              [
                "threshold",
                "15.0"
              ],
              [
                "price",
                "16.0"
              ],
              [
                "status",
                "ON"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a stock of <symbol> and a <threshold>",
          "When the stock is traded with <price>",
          "Then the trader is alerted with <status>"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "5.0"
            ],
            [
              "status",
              "OFF"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "11.0"
            ],
            [
              "status",
              "OFF"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ]
          },
          "afterSteps": {}
        },
        {
          "exampleParameters": [
            [
              "symbol",
              "STK1"
            ],
            [
              "threshold",
              "15.0"
            ],
            [
              "price",
              "16.0"
            ],
            [
              "status",
              "ON"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "GIVEN",
                "annotatedPattern": "a stock of <symbol> and a <threshold>",
                "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "the stock is traded with <price>",
                "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
              },
              {
                "type": "THEN",
                "annotatedPattern": "the trader is alerted with <status>",
                "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Trader sells it all and goes to Bermuda.\u000aThis scenario shows that the same step pattern can be used for different step types",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
            {
              "givenStoryAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "parameters": [
              ],
              "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "anchor": ""
            }
          ],
          "givenStoriesAsString": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the alert status is OFF",
          "Given a trader of name Mauro",
          "And the alert status is OFF",
          "Given a stock of symbol STK1 and a threshold of 1.5",
          "When the stock is traded at price 2.0",
          "Then the alert status is ON",
          "When the trader sells all stocks",
          "Then the trader is left with no stocks"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
        {
          "story": {
            "path": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
            "description": {
              "descriptionAsString": "Trader is alerted of status"
            },
            "narrative": {
              "inOrderTo": "ensure a quick response",
              "asA": "trader",
              "iWantTo": "monitor stock prices"
            },
            "meta": {
              "properties": [
              ]
            },
            "scenarios": [
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of symbol STK1 and a threshold of 15.0",
                  "When the stock is traded at price 5.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 11.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 16.0",
                  "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                  "Then the alert status is ON",
                  "Then the alert status is currently ON"
                ]
              },
              {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                    "symbol",
                    "threshold",
                    "price",
                    "status"
                  ],
                  "data": [
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "5.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "11.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "16.0"
                      ],
                      [
                        "status",
                        "ON"
                      ]
                    ]
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of <symbol> and a <threshold>",
                  "When the stock is traded with <price>",
                  "Then the trader is alerted with <status>"
                ]
              }
            ],
            "name": "trader_is_alerted_of_status.story",
            "givenStories": {
              "givenStories": [
              ],
              "givenStoriesAsString": "",
              "examplesTable": {
                "tableAsString": "",
                "headerSeparator": "|",
                "valueSeparator": "|",
                "ignorableSeparator": "|--",
                "tableTransformers": {
                  "transformers": [
                    [
                      "FROM_LANDSCAPE",
                      {}
                    ]
                  ]
                },
                "headers": [
                ],
                "data": [
                ],
                "properties": [
                  {
                    "@name": "headerSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "valueSeparator",
                    "@value": "|"
                  },
                  {
                    "@name": "ignorableSeparator",
                    "@value": "|--"
                  }
                ],
                "propertiesAsString": "",
                "namedParameters": [
                ],
                "trim": true
              }
            }
          },
          "allowed": true,
          "givenStories": [
          ],
          "scenarios": [
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                  ],
                  "data": [
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of symbol STK1 and a threshold of 15.0",
                  "When the stock is traded at price 5.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 11.0",
                  "Then the alert status is OFF",
                  "When the stock is sold at price 16.0",
                  "!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  \u000awe set a higher priority to the less-greedy pattern",
                  "Then the alert status is ON",
                  "Then the alert status is currently ON"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "allowed": true,
              "exampleScenarios": [
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {
                "matches": [
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is traded at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
                  },
                  {
                    "type": "WHEN",
                    "annotatedPattern": "the stock is sold at price %price",
                    "resolvedPattern": "the\\s+stock\\s+is\\s+sold\\s+at\\s+price\\s+(.*)"
                  },
                  {
                    "type": "GIVEN",
                    "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
                    "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
                  },
                  {
                    "type": "THEN",
                    "annotatedPattern": "the alert status is currently %status",
                    "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+currently\\s+(.*)"
                  }
                ]
              },
              "afterSteps": {}
            },
            {
              "scenario": {
                "title": "",
                "meta": {
                  "properties": [
                  ]
                },
                "givenStories": {
                  "givenStories": [
                  ],
                  "givenStoriesAsString": "",
                  "examplesTable": {
                    "tableAsString": "",
                    "headerSeparator": "|",
                    "valueSeparator": "|",
                    "ignorableSeparator": "|--",
                    "tableTransformers": {
                      "transformers": [
                        [
                          "FROM_LANDSCAPE",
                          {}
                        ]
                      ]
                    },
                    "headers": [
                    ],
                    "data": [
                    ],
                    "properties": [
                      {
                        "@name": "headerSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "valueSeparator",
                        "@value": "|"
                      },
                      {
                        "@name": "ignorableSeparator",
                        "@value": "|--"
                      }
                    ],
                    "propertiesAsString": "",
                    "namedParameters": [
                    ],
                    "trim": true
                  }
                },
                "examplesTable": {
                  "tableAsString": "|symbol|threshold|price|status|\u000a|STK1  |15.0|5.0 |OFF|\u000a|STK1  |15.0|11.0|OFF|\u000a|STK1  |15.0|16.0|ON |",
                  "headerSeparator": "|",
                  "valueSeparator": "|",
                  "ignorableSeparator": "|--",
                  "tableTransformers": {
                    "transformers": [
                      [
                        "FROM_LANDSCAPE",
                        {}
                      ]
                    ]
                  },
                  "headers": [
                    "symbol",
                    "threshold",
                    "price",
                    "status"
                  ],
                  "data": [
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "5.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "11.0"
                      ],
                      [
                        "status",
                        "OFF"
                      ]
                    ],
                    [
                      [
                        "symbol",
                        "STK1"
                      ],
                      [
                        "threshold",
                        "15.0"
                      ],
                      [
                        "price",
                        "16.0"
                      ],
                      [
                        "status",
                        "ON"
                      ]
                    ]
                  ],
                  "properties": [
                    {
                      "@name": "headerSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "valueSeparator",
                      "@value": "|"
                    },
                    {
                      "@name": "ignorableSeparator",
                      "@value": "|--"
                    }
                  ],
                  "propertiesAsString": "",
                  "namedParameters": [
                  ],
                  "trim": true
                },
                "steps": [
                  "Given a stock of <symbol> and a <threshold>",
                  "When the stock is traded with <price>",
                  "Then the trader is alerted with <status>"
                ]
              },
              "storyPath": "org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story",
              "allowed": true,
              "exampleScenarios": [
                {
                  "exampleParameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "15.0"
                    ],
                    [
                      "price",
                      "5.0"
                    ],
                    [
                      "status",
                      "OFF"
                    ]
                  ],
                  "performableGivenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded with <price>",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the trader is alerted with <status>",
                        "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                      }
                    ]
                  },
                  "afterSteps": {}
                },
                {
                  "exampleParameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "15.0"
                    ],
                    [
                      "price",
                      "11.0"
                    ],
                    [
                      "status",
                      "OFF"
                    ]
                  ],
                  "performableGivenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded with <price>",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the trader is alerted with <status>",
                        "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                      }
                    ]
                  },
                  "afterSteps": {}
                },
                {
                  "exampleParameters": [
                    [
                      "symbol",
                      "STK1"
                    ],
                    [
                      "threshold",
                      "15.0"
                    ],
                    [
                      "price",
                      "16.0"
                    ],
                    [
                      "status",
                      "ON"
                    ]
                  ],
                  "performableGivenStories": [
                  ],
                  "beforeSteps": {},
                  "steps": {
                    "matches": [
                      {
                        "type": "GIVEN",
                        "annotatedPattern": "a stock of <symbol> and a <threshold>",
                        "resolvedPattern": "a\\s+stock\\s+of\\s+<symbol>\\s+and\\s+a\\s+<threshold>"
                      },
                      {
                        "type": "WHEN",
                        "annotatedPattern": "the stock is traded with <price>",
                        "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+with\\s+<price>"
                      },
                      {
                        "type": "THEN",
                        "annotatedPattern": "the trader is alerted with <status>",
                        "resolvedPattern": "the\\s+trader\\s+is\\s+alerted\\s+with\\s+<status>"
                      }
                    ]
                  },
                  "afterSteps": {}
                }
              ],
              "givenStories": [
              ],
              "beforeSteps": {},
              "steps": {},
              "afterSteps": {}
            }
          ],
          "beforeSteps": {},
          "afterSteps": {},
          "timing": {
            "durationInMillis": 0
          }
        }
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "the stock is traded at price %price",
            "resolvedPattern": "the\\s+stock\\s+is\\s+traded\\s+at\\s+price\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a trader of name %trader",
            "resolvedPattern": "a\\s+trader\\s+of\\s+name\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the trader is left with no stocks",
            "resolvedPattern": "the\\s+trader\\s+is\\s+left\\s+with\\s+no\\s+stocks"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "the trader sells all stocks",
            "resolvedPattern": "the\\s+trader\\s+sells\\s+all\\s+stocks"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "a stock of symbol %symbol and a threshold of %threshold",
            "resolvedPattern": "a\\s+stock\\s+of\\s+symbol\\s+(.*)\\s+and\\s+a\\s+threshold\\s+of\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the alert status is %status",
            "resolvedPattern": "the\\s+alert\\s+status\\s+is\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Trader counts the days to go to Bermuda.",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given a date of 2010-06-21",
          "When 2 days pass",
          "Then the date is 2010-06-23"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/trader_sells_all_stocks.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "GIVEN",
            "annotatedPattern": "a date of %date",
            "resolvedPattern": "a\\s+date\\s+of\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the date is %date",
            "resolvedPattern": "the\\s+date\\s+is\\s+(.*)"
          },
          {
            "type": "WHEN",
            "annotatedPattern": "%days days pass",
            "resolvedPattern": "(.*)\\s+days\\s+pass"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Traders can be searched by name",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
          "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
          "!-- This is a comment, which will be ignored in the execution",
          "When traders are subset to \".*y\" by name",
          "!-- This is another comment, also ignored, \u000abut look Ma! I'm on a new line!",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "WHEN",
            "annotatedPattern": "traders are subset to \"%regex\" by name",
            "resolvedPattern": "traders\\s+are\\s+subset\\s+to\\s+\"(.*)\"\\s+by\\s+name"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the current trader activity is: %activityTable",
            "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the trader ranks: %ranksTable",
            "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Traders can be searched by name in landscape format",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the trader ranks: \u000a{transformer=FROM_LANDSCAPE}\u000a|name |Larry   |Moe     |Curly   |\u000a|rank |Stooge 1|Stooge 2|Stooge 3|",
          "Then the current trader activity is: \u000a|name |trades|\u000a|Larry|30000 |\u000a|Moe  |10000 |\u000a|Curly|20000 |",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "THEN",
            "annotatedPattern": "the current trader activity is: %activityTable",
            "resolvedPattern": "the\\s+current\\s+trader\\s+activity\\s+is:\\s+(.*)"
          },
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the trader ranks: %ranksTable",
            "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Traders search fails",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
          ],
          "data": [
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given the trader ranks: \u000a|name |rank    |\u000a|Larry|Stooge 3|\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|",
          "!-- Verification fails",
          "Then the traders returned are:\u000a|name |rank    |\u000a|Moe  |Stooge 1|\u000a|Curly|Stooge 2|"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/traders_can_be_subset.story",
      "allowed": true,
      "exampleScenarios": [
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {
        "matches": [
          {
            "type": "THEN",
            "annotatedPattern": "the traders returned are: %tradersTable",
            "resolvedPattern": "the\\s+traders\\s+returned\\s+are:\\s+(.*)"
          },
          {
            "type": "GIVEN",
            "annotatedPattern": "the trader ranks: %ranksTable",
            "resolvedPattern": "the\\s+trader\\s+ranks:\\s+(.*)"
          }
        ]
      },
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Search term does match examples table header",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|ridiculousSearchTerm|\u000d\u000a|Hello Kitty|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "ridiculousSearchTerm"
          ],
          "data": [
            [
              [
                "ridiculousSearchTerm",
                "Hello Kitty"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given that I am on Google's Homepage",
          "When I enter the search term <ridiculousSearchTerm> and proceed",
          "Then I should see ridiculous things"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "ridiculousSearchTerm",
              "Hello Kitty"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "I should see ridiculous things",
                "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "that I am on Google's Homepage",
                "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    },
    {
      "scenario": {
        "title": "Search term does not match examples table header and step is marked as pending",
        "meta": {
          "properties": [
          ]
        },
        "givenStories": {
          "givenStories": [
          ],
          "givenStoriesAsString": "",
          "examplesTable": {
            "tableAsString": "",
            "headerSeparator": "|",
            "valueSeparator": "|",
            "ignorableSeparator": "|--",
            "tableTransformers": {
              "transformers": [
                [
                  "FROM_LANDSCAPE",
                  {}
                ]
              ]
            },
            "headers": [
            ],
            "data": [
            ],
            "properties": [
              {
                "@name": "headerSeparator",
                "@value": "|"
              },
              {
                "@name": "valueSeparator",
                "@value": "|"
              },
              {
                "@name": "ignorableSeparator",
                "@value": "|--"
              }
            ],
            "propertiesAsString": "",
            "namedParameters": [
            ],
            "trim": true
          }
        },
        "examplesTable": {
          "tableAsString": "|ridiculoussearchterm|\u000d\u000a|Hello Kitty|",
          "headerSeparator": "|",
          "valueSeparator": "|",
          "ignorableSeparator": "|--",
          "tableTransformers": {
            "transformers": [
              [
                "FROM_LANDSCAPE",
                {}
              ]
            ]
          },
          "headers": [
            "ridiculoussearchterm"
          ],
          "data": [
            [
              [
                "ridiculoussearchterm",
                "Hello Kitty"
              ]
            ]
          ],
          "properties": [
            {
              "@name": "headerSeparator",
              "@value": "|"
            },
            {
              "@name": "valueSeparator",
              "@value": "|"
            },
            {
              "@name": "ignorableSeparator",
              "@value": "|--"
            }
          ],
          "propertiesAsString": "",
          "namedParameters": [
          ],
          "trim": true
        },
        "steps": [
          "Given that I am on Google's Homepage",
          "When I enter the search term <ridiculousSearchTerm> and proceed",
          "Then I should see ridiculous things"
        ]
      },
      "storyPath": "org/jbehave/examples/trader/stories/unmatched_search_term.story",
      "allowed": true,
      "exampleScenarios": [
        {
          "exampleParameters": [
            [
              "ridiculoussearchterm",
              "Hello Kitty"
            ]
          ],
          "performableGivenStories": [
          ],
          "beforeSteps": {},
          "steps": {
            "matches": [
              {
                "type": "THEN",
                "annotatedPattern": "I should see ridiculous things",
                "resolvedPattern": "I\\s+should\\s+see\\s+ridiculous\\s+things"
              },
              {
                "type": "GIVEN",
                "annotatedPattern": "that I am on Google's Homepage",
                "resolvedPattern": "that\\s+I\\s+am\\s+on\\s+Google's\\s+Homepage"
              },
              {
                "type": "WHEN",
                "annotatedPattern": "I enter the search term <ridiculousSearchTerm> and proceed",
                "resolvedPattern": "I\\s+enter\\s+the\\s+search\\s+term\\s+<ridiculousSearchTerm>\\s+and\\s+proceed"
              }
            ]
          },
          "afterSteps": {}
        }
      ],
      "givenStories": [
      ],
      "beforeSteps": {},
      "steps": {},
      "afterSteps": {}
    }
  ]
}}