[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building JBehave Trader Annotations Example
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
[INFO] Deleting directory /Users/mauro/git/jbehave-core/examples/trader-annotations/target
[debug] execute contextualize
[INFO] [resources:resources {execution: default-resources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] [jbehave:unpack-view-resources {execution: unpack-view-resources}]
[INFO] Unpacked /Users/mauro/.m2/repository/org/jbehave/jbehave-core/3.4-SNAPSHOT/jbehave-core-3.4-SNAPSHOT-resources.zip to /Users/mauro/git/jbehave-core/examples/trader-annotations/target/jbehave/view
[INFO] Unpacked /Users/mauro/.m2/repository/org/jbehave/site/jbehave-site-resources/3.1.1/jbehave-site-resources-3.1.1.zip to /Users/mauro/git/jbehave-core/examples/trader-annotations/target/jbehave/view
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 2 source files to /Users/mauro/git/jbehave-core/examples/trader-annotations/target/classes
[debug] execute contextualize
[INFO] [resources:testResources {execution: default-testResources}]
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/mauro/git/jbehave-core/examples/trader-annotations/src/test/resources
[INFO] skip non existing resourceDirectory /Users/mauro/git/jbehave-core/examples/trader-annotations/src/test/java
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] No sources to compile
[INFO] [surefire:test {execution: default-test}]
[INFO] No tests to run.
[INFO] Surefire report directory: /Users/mauro/git/jbehave-core/examples/trader-annotations/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
There are no tests to run.

Results :

Tests run: 0, Failures: 0, Errors: 0, Skipped: 0

[INFO] [jar:jar {execution: default-jar}]
[INFO] Building jar: /Users/mauro/git/jbehave-core/examples/trader-annotations/target/jbehave-trader-annotations-example-3.4-SNAPSHOT.jar
[INFO] [jbehave:run-stories-with-annotated-embedder {execution: with-annotated-embedder}]
[INFO] Running stories with annotated embedder runner
[INFO] Found class names: [org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder, org.jbehave.examples.trader.annotations.TraderAnnotatedPathRunner]
Processing system properties {}

(BeforeStories)
Before Stories ...
Using 1 threads
Running story org/jbehave/examples/trader/stories/after_scenario_outcome.story
Story: Showing that @AfterScenario method are executed upon appropriate outcome (ANY, SUCCESS, FAILURE)
(org/jbehave/examples/trader/stories/after_scenario_outcome.story)
Before Story ...
Scenario: Pass on a step
Before Scenario ...
Given I do nothing
Then I pass
After Any Scenario ...
After Successful Scenario ...

Scenario: Fail on a step
Before Scenario ...
Given I do nothing
Then I fail (FAILED)
(junit.framework.AssertionFailedError: I failed!)
After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Failed to run story org/jbehave/examples/trader/stories/after_scenario_outcome.story
junit.framework.AssertionFailedError: I failed!
	at junit.framework.Assert.fail(Assert.java:47)
	at org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jbehave.core.steps.StepCreator$ParameterizedStep.perform(StepCreator.java:444)
	at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:378)
	at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:365)
	at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:336)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:229)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:147)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:681)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:645)
	at org.jbehave.core.embedder.Embedder$NonThreadingExecutorService.submit(Embedder.java:583)
	at org.jbehave.core.embedder.Embedder.submit(Embedder.java:243)
	at org.jbehave.core.embedder.Embedder.enqueueStory(Embedder.java:236)
	at org.jbehave.core.embedder.Embedder.runStoriesAsPaths(Embedder.java:196)
	at org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder.run(TraderAnnotatedEmbedder.java:51)
	at org.jbehave.core.embedder.Embedder.runStoriesWithAnnotatedEmbedderRunner(Embedder.java:163)
	at org.jbehave.mojo.RunStoriesWithAnnotatedEmbedderRunner.execute(RunStoriesWithAnnotatedEmbedderRunner.java:20)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Running story org/jbehave/examples/trader/stories/and_step.story

(org/jbehave/examples/trader/stories/and_step.story)
Narrative:
In order to be more communicative
As a story writer
I want to explain the use of And steps and also show that I can use keywords in scenario title and comments
Before Story ...
Scenario: An initial And step should be marked as pending as there is not previous step
Before Scenario ...
!-- What is this And of?  JBehave treats as pending
And the wind blows (PENDING)
!-- Look Ma' - I can also use keywords in scenario title and step comments!
@Ignorable("the wind blows")
@Pending
public void ignorableTheWindBlows(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

Scenario: And steps should match the previous step type
Before Scenario ...
Given the wind blows
!-- This And is equivalent to another Given
And the wind blows (PENDING)
When the wind blows (NOT PERFORMED)
!-- This And is equivalent to another When
And the wind blows (PENDING)
@Ignorable("the wind blows")
@Pending
public void ignorableTheWindBlows(){
  // PENDING
}

@Ignorable("the wind blows")
@Pending
public void ignorableTheWindBlows(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/claims_with_null_calendar.story

(org/jbehave/examples/trader/stories/claims_with_null_calendar.story)
Before Story ...
Scenario: 
Before Scenario ...
Examples:
Given a plan with calendar date of <date>
Then the claimant should receive an amount of <amount>

|date|amount|
|none|0.0|
|01/06/2010|2.15|



Example: {date=none, amount=0.0}
null
Given a plan with calendar date of none
0.0
Then the claimant should receive an amount of 0.0

Example: {date=01/06/2010, amount=2.15}
java.util.GregorianCalendar[time=1275343200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Europe/Paris",offset=3600000,dstSavings=3600000,useDaylight=true,transitions=184,lastRule=java.util.SimpleTimeZone[id=Europe/Paris,offset=3600000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2010,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=152,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3600000,DST_OFFSET=3600000]
Given a plan with calendar date of 01/06/2010
2.15
Then the claimant should receive an amount of 2.15

After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/do_nothing.story

(org/jbehave/examples/trader/stories/do_nothing.story)
Before Story ...
Scenario: 
Before Scenario ...
!-- GivenStories:  ignore_me.story
Given I do nothing
!-- Examples: 
|I|am|just|lazy|
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/failing_before_after.story
We want to show that failures in @BeforeScenario methods will not prevent rest of scenario steps to run (marked as NOT PERFORMED).
Also, the @Before/AfterScenario, @Before/AfterStory failure messages should be displayed in the story reports, while   
the @BeforeAfterStories failures are displayed in the Before/AfterStories reports.
(org/jbehave/examples/trader/stories/failing_before_after.story)
Before Story ...
Scenario: 
Before Scenario ...
Given the alert status is OFF
Given a trader of name Mauro
And the alert status is OFF
Given a stock of symbol STK1 and a threshold of 1.5
When the stock is traded at price 2.0
Then the alert status is ON
When the trader sells all stocks
Then the trader is left with no stocks
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/failing_before_stories.story
We want to show that failures in @BeforeStories methods will mark rest of steps as NOT PERFORMED, if story and scenario state is not reset via the StoryControls
(org/jbehave/examples/trader/stories/failing_before_stories.story)
Before Story ...
Scenario: 
Before Scenario ...
Given the alert status is OFF
Given a trader of name Mauro
And the alert status is OFF
Given a stock of symbol STK1 and a threshold of 1.5
When the stock is traded at price 2.0
Then the alert status is ON
When the trader sells all stocks
Then the trader is left with no stocks
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/failure_correlation_one.story

(org/jbehave/examples/trader/stories/failure_correlation_one.story)
Before Story ...
Scenario: Fail on a step in story 1
Before Scenario ...
When a failure occurs in story 1 (PENDING)
@When("a failure occurs in story 1")
@Pending
public void whenAFailureOccursInStory1(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/failure_correlation_two.story

(org/jbehave/examples/trader/stories/failure_correlation_two.story)
Before Story ...
Scenario: Fail on a step in story 2
Before Scenario ...
When a failure occurs in story 2 (PENDING)
@When("a failure occurs in story 2")
@Pending
public void whenAFailureOccursInStory2(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story
Story: Showing that using given stories in a passing scenario following a scenario where are a failure occurred resets the overall 
build result of the story
(org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story)
Before Story ...
Scenario: Fail on a step
Before Scenario ...
Given I do nothing
Then I fail (FAILED)
(junit.framework.AssertionFailedError: I failed!)
After Any Scenario ...
After Failed Scenario ...

Scenario: Pass after given stories
Before Scenario ...
GivenStories:
org/jbehave/examples/trader/stories/do_nothing.story 


(org/jbehave/examples/trader/stories/do_nothing.story)
Before Given Story ...
Scenario: 
Before Scenario ...
!-- GivenStories:  ignore_me.story
Given I do nothing
!-- Examples: 
|I|am|just|lazy|
After Any Scenario ...
After Successful Scenario ...

After Given Story ...

Given I do nothing
Then I pass
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Failed to run story org/jbehave/examples/trader/stories/failure_followed_by_given_stories.story
junit.framework.AssertionFailedError: I failed!
	at junit.framework.Assert.fail(Assert.java:47)
	at org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jbehave.core.steps.StepCreator$ParameterizedStep.perform(StepCreator.java:444)
	at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:378)
	at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:365)
	at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:336)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:229)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:147)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:681)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:645)
	at org.jbehave.core.embedder.Embedder$NonThreadingExecutorService.submit(Embedder.java:583)
	at org.jbehave.core.embedder.Embedder.submit(Embedder.java:243)
	at org.jbehave.core.embedder.Embedder.enqueueStory(Embedder.java:236)
	at org.jbehave.core.embedder.Embedder.runStoriesAsPaths(Embedder.java:196)
	at org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder.run(TraderAnnotatedEmbedder.java:51)
	at org.jbehave.core.embedder.Embedder.runStoriesWithAnnotatedEmbedderRunner(Embedder.java:163)
	at org.jbehave.mojo.RunStoriesWithAnnotatedEmbedderRunner.execute(RunStoriesWithAnnotatedEmbedderRunner.java:20)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Running story org/jbehave/examples/trader/stories/given_non_successful.story

(org/jbehave/examples/trader/stories/given_non_successful.story)
Before Story ...
Scenario: A scenario that depends on a non successful story
Before Scenario ...
GivenStories:
org/jbehave/examples/trader/stories/non_successful.story 


(org/jbehave/examples/trader/stories/non_successful.story)
Before Given Story ...
Scenario: A scenario with failed step
Before Scenario ...
Given the traders:
|name |rank    |
|Larry|Stooge 3|
|Moe  |Stooge 1|
|Curly|Stooge 2|
When traders are subset to ".*y" by name
Then the traders returned are:
|name|rank    |
|Moe |Stooge 1| (FAILED)
(org.jbehave.core.model.OutcomesTable$OutcomesFailed)
After Any Scenario ...
After Failed Scenario ...

Scenario: A scenario with pending and non executed steps
Before Scenario ...
Given the traders:
|name |rank    |
|Larry|Stooge 3|
|Moe  |Stooge 1|
|Curly|Stooge 2|
!-- Following steps is not matched since traders is mispelled
When trdrs are subset to ".*y" by name (PENDING)
Then the traders returned are:
|name|rank    |
|Moe |Stooge 1| (NOT PERFORMED)
@When("trdrs are subset to \".*y\" by name")
@Pending
public void whenTrdrsAreSubsetToyByName(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

After Given Story ...

Given the traders:
|name |rank    |
|Larry|Stooge 3|
|Moe  |Stooge 1|
|Curly|Stooge 2|
When Traders subset to ".*e" by name (PENDING)
Then the traders returned are:
|name|rank    |
|Moe |Stooge 1| (NOT PERFORMED)
@When("Traders subset to \".*e\" by name")
@Pending
public void whenTradersSubsetToeByName(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Failed to run story org/jbehave/examples/trader/stories/given_non_successful.story
org.jbehave.core.model.OutcomesTable$OutcomesFailed
	at org.jbehave.core.model.OutcomesTable.verify(OutcomesTable.java:40)
	at org.jbehave.examples.trader.steps.TraderSteps.theTradersReturnedAre(TraderSteps.java:113)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jbehave.core.steps.StepCreator$ParameterizedStep.perform(StepCreator.java:444)
	at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:378)
	at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:365)
	at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:336)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:229)
	at org.jbehave.core.embedder.StoryRunner.runGivenStories(StoryRunner.java:307)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:223)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:147)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:681)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:645)
	at org.jbehave.core.embedder.Embedder$NonThreadingExecutorService.submit(Embedder.java:583)
	at org.jbehave.core.embedder.Embedder.submit(Embedder.java:243)
	at org.jbehave.core.embedder.Embedder.enqueueStory(Embedder.java:236)
	at org.jbehave.core.embedder.Embedder.runStoriesAsPaths(Embedder.java:196)
	at org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder.run(TraderAnnotatedEmbedder.java:51)
	at org.jbehave.core.embedder.Embedder.runStoriesWithAnnotatedEmbedderRunner(Embedder.java:163)
	at org.jbehave.mojo.RunStoriesWithAnnotatedEmbedderRunner.execute(RunStoriesWithAnnotatedEmbedderRunner.java:20)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Running story org/jbehave/examples/trader/stories/given_parametrised_story.story

(org/jbehave/examples/trader/stories/given_parametrised_story.story)
Meta:
@theme parametrisation

Before Story ...
Scenario: A scenario that depends on a story with parameters specified via examples row
Before Scenario ...
GivenStories:
org/jbehave/examples/trader/stories/parametrised.story#{0} {symbol=STK1, threshold=1.0}


(org/jbehave/examples/trader/stories/parametrised.story)
Meta:
@theme parametrisation

Before Given Story ...
Scenario: 
Before Scenario ...
Given a stock of STK1 and a 1.0
After Any Scenario ...
After Successful Scenario ...

After Given Story ...

When the stock is traded at price 1.1
Then the alert status is ON
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/given_relative_path_story.story

(org/jbehave/examples/trader/stories/given_relative_path_story.story)
Meta:
@theme parametrisation

Before Story ...
Scenario: A scenario that depends on a story loaded with relative path
Before Scenario ...
GivenStories:
parametrised.story#{0} {symbol=STK1, threshold=1.0}

Failed to run story org/jbehave/examples/trader/stories/given_relative_path_story.story
org.jbehave.core.io.StoryResourceNotFound: Story path 'parametrised.story' not found by class loader EmbedderClassLoader[urls=[/Users/mauro/git/jbehave-core/examples/trader-annotations/target/classes/, jbehave-trader-example-3.4-SNAPSHOT.jar, jbehave-ant-3.4-SNAPSHOT.jar, jbehave-core-3.4-SNAPSHOT.jar, commons-collections-3.2.1.jar, commons-io-1.4.jar, commons-lang-2.5.jar, plexus-utils-2.0.5.jar, freemarker-2.3.16.jar, paranamer-2.3.jar, xstream-1.3.1.jar, xpp3_min-1.1.4c.jar, junit-dep-4.8.2.jar, hamcrest-all-1.1.jar, ant-1.7.1.jar, ant-launcher-1.7.1.jar, maven-default-skin-1.0.jar],parent=org.codehaus.classworlds.RealmClassLoader@13647278]
	at org.jbehave.core.io.LoadFromClasspath.resourceAsStream(LoadFromClasspath.java:45)
	at org.jbehave.core.io.LoadFromClasspath.loadResourceAsText(LoadFromClasspath.java:30)
	at org.jbehave.core.io.LoadFromClasspath.loadStoryAsText(LoadFromClasspath.java:39)
	at org.jbehave.core.embedder.StoryRunner.storyOfPath(StoryRunner.java:158)
	at org.jbehave.core.embedder.StoryRunner.runGivenStories(StoryRunner.java:306)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:223)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:147)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:681)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:645)
	at org.jbehave.core.embedder.Embedder$NonThreadingExecutorService.submit(Embedder.java:583)
	at org.jbehave.core.embedder.Embedder.submit(Embedder.java:243)
	at org.jbehave.core.embedder.Embedder.enqueueStory(Embedder.java:236)
	at org.jbehave.core.embedder.Embedder.runStoriesAsPaths(Embedder.java:196)
	at org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder.run(TraderAnnotatedEmbedder.java:51)
	at org.jbehave.core.embedder.Embedder.runStoriesWithAnnotatedEmbedderRunner(Embedder.java:163)
	at org.jbehave.mojo.RunStoriesWithAnnotatedEmbedderRunner.execute(RunStoriesWithAnnotatedEmbedderRunner.java:20)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Running story org/jbehave/examples/trader/stories/meta_filtering.story

(org/jbehave/examples/trader/stories/meta_filtering.story)
Meta:
@author Mauro
@theme filtering

Before Story ...
Scenario: A scenario to be skipped
Meta:
@skip 

Meta[properties={author=Mauro, skip=, theme=filtering}] excluded by filter '-skip'
-skip

Scenario: A scenario with an author
Before Scenario ...
Given I do nothing
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/meta_parametrisation.story

(org/jbehave/examples/trader/stories/meta_parametrisation.story)
Meta:
@theme parameters

Before Story ...
Scenario: scenario with explicitly mentioned meta params
Meta:
@variant named

Before Scenario ...
Given I have specified the <theme> (PENDING)
And a <variant> (PENDING)
Then the theme is 'parameters' with variant 'named' (PENDING)
@Given("I have specified the <theme>")
@Pending
public void givenIHaveSpecifiedThetheme(){
  // PENDING
}

@Given("a <variant>")
@Pending
public void givenAvariant(){
  // PENDING
}

@Then("the theme is 'parameters' with variant 'named'")
@Pending
public void thenTheThemeIsparametersWithVariantnamed(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

Scenario: scenario with hidden meta params
Meta:
@variant foo

Before Scenario ...
Given I have some step that implicitly requires meta params (PENDING)
Then the theme is 'parameters' with variant 'foo' (PENDING)
@Given("I have some step that implicitly requires meta params")
@Pending
public void givenIHaveSomeStepThatImplicitlyRequiresMetaParams(){
  // PENDING
}

@Then("the theme is 'parameters' with variant 'foo'")
@Pending
public void thenTheThemeIsparametersWithVariantfoo(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/non_successful.story

(org/jbehave/examples/trader/stories/non_successful.story)
Before Story ...
Scenario: A scenario with failed step
Before Scenario ...
Given the traders:
|name |rank    |
|Larry|Stooge 3|
|Moe  |Stooge 1|
|Curly|Stooge 2|
When traders are subset to ".*y" by name
Then the traders returned are:
|name|rank    |
|Moe |Stooge 1| (FAILED)
(org.jbehave.core.model.OutcomesTable$OutcomesFailed)
After Any Scenario ...
After Failed Scenario ...

Scenario: A scenario with pending and non executed steps
Before Scenario ...
Given the traders:
|name |rank    |
|Larry|Stooge 3|
|Moe  |Stooge 1|
|Curly|Stooge 2|
!-- Following steps is not matched since traders is mispelled
When trdrs are subset to ".*y" by name (PENDING)
Then the traders returned are:
|name|rank    |
|Moe |Stooge 1| (NOT PERFORMED)
@When("trdrs are subset to \".*y\" by name")
@Pending
public void whenTrdrsAreSubsetToyByName(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Failed to run story org/jbehave/examples/trader/stories/non_successful.story
org.jbehave.core.model.OutcomesTable$OutcomesFailed
	at org.jbehave.core.model.OutcomesTable.verify(OutcomesTable.java:40)
	at org.jbehave.examples.trader.steps.TraderSteps.theTradersReturnedAre(TraderSteps.java:113)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jbehave.core.steps.StepCreator$ParameterizedStep.perform(StepCreator.java:444)
	at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:378)
	at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:365)
	at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:336)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:229)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:147)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:681)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:645)
	at org.jbehave.core.embedder.Embedder$NonThreadingExecutorService.submit(Embedder.java:583)
	at org.jbehave.core.embedder.Embedder.submit(Embedder.java:243)
	at org.jbehave.core.embedder.Embedder.enqueueStory(Embedder.java:236)
	at org.jbehave.core.embedder.Embedder.runStoriesAsPaths(Embedder.java:196)
	at org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder.run(TraderAnnotatedEmbedder.java:51)
	at org.jbehave.core.embedder.Embedder.runStoriesWithAnnotatedEmbedderRunner(Embedder.java:163)
	at org.jbehave.mojo.RunStoriesWithAnnotatedEmbedderRunner.execute(RunStoriesWithAnnotatedEmbedderRunner.java:20)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Running story org/jbehave/examples/trader/stories/parametrised.story

(org/jbehave/examples/trader/stories/parametrised.story)
Meta:
@theme parametrisation

Before Story ...
Scenario: 
Before Scenario ...
Given a stock of <symbol> and a <threshold> (PENDING)
After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/pending.story

(org/jbehave/examples/trader/stories/pending.story)
Narrative:
In order to make story development easier
As a Story Developer
I want to auto-generate method stubs for pending steps annotated by @Pending
Before Story ...
Scenario: Show that steps that don't match methods are treated as pending and @Pending annotated method stubs are generated
Before Scenario ...
Given a step has not been defined (PENDING)
And another step has not been defined (PENDING)
When a step has not been defined (PENDING)
Then a step has not been defined (PENDING)
@Given("a step has not been defined")
@Pending
public void givenAStepHasNotBeenDefined(){
  // PENDING
}

@Given("another step has not been defined")
@Pending
public void givenAnotherStepHasNotBeenDefined(){
  // PENDING
}

@When("a step has not been defined")
@Pending
public void whenAStepHasNotBeenDefined(){
  // PENDING
}

@Then("a step has not been defined")
@Pending
public void thenAStepHasNotBeenDefined(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

Scenario: Show that steps that match methods already annotated by @Pending are treated as pending but no method stubs are generated
Before Scenario ...
Given a step is annotated as pending (PENDING)
When a step is annotated as pending (PENDING)
Then a step is annotated as pending (PENDING)
@Given("a step is annotated as pending")
@Pending
public void givenAStepIsAnnotatedAsPending(){
  // PENDING
}

@When("a step is annotated as pending")
@Pending
public void whenAStepIsAnnotatedAsPending(){
  // PENDING
}

@Then("a step is annotated as pending")
@Pending
public void thenAStepIsAnnotatedAsPending(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

Scenario: Show that multiple And steps can be used
Before Scenario ...
Given I am not logged in (PENDING)
And I have been redirected from my intended page to the login page (PENDING)
When I log in with good credentials (PENDING)
Then I am redirected to my intended page (PENDING)
And I am logged in (PENDING)
@Given("I am not logged in")
@Pending
public void givenIAmNotLoggedIn(){
  // PENDING
}

@Given("I have been redirected from my intended page to the login page")
@Pending
public void givenIHaveBeenRedirectedFromMyIntendedPageToTheLoginPage(){
  // PENDING
}

@When("I log in with good credentials")
@Pending
public void whenILogInWithGoodCredentials(){
  // PENDING
}

@Then("I am redirected to my intended page")
@Pending
public void thenIAmRedirectedToMyIntendedPage(){
  // PENDING
}

@Then("I am logged in")
@Pending
public void thenIAmLoggedIn(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/pending_stats.story

(org/jbehave/examples/trader/stories/pending_stats.story)
Before Story ...
Scenario: 
Before Scenario ...
After Any Scenario ...
After Successful Scenario ...

Scenario: A scenario with some pending steps
Before Scenario ...
Given I am pending (PENDING)
@Given("I am pending")
@Pending
public void givenIAmPending(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/priority_matching.story

(org/jbehave/examples/trader/stories/priority_matching.story)
Before Story ...
Scenario: A scenario that verifies priority matching of steps, with the less-greedy pattern given higher priority
Before Scenario ...
!-- Matching regex "a step that has %param"
Given a step that has a parameter
Then the parameter value is "a parameter"
!-- Matching regex "a step that has exactly one %param"
Given a step that has exactly one of the parameters
Then the parameter value is "of the parameters"
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story

(org/jbehave/examples/trader/stories/skip_before_and_after_scenario_steps_if_given_story.story)
Before Story ...
Scenario: A scenario where before and after steps are executed only once even if there is a given story
Before Scenario ...
GivenStories:
org/jbehave/examples/trader/stories/parametrised.story#{0} {symbol=STK1, threshold=1.0}


(org/jbehave/examples/trader/stories/parametrised.story)
Meta:
@theme parametrisation

Before Given Story ...
Scenario: 
Before Scenario ...
Given a stock of STK1 and a 1.0
After Any Scenario ...
After Successful Scenario ...

After Given Story ...

When the stock is traded at price 1.1
Then the alert status is ON
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story

(org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story)
Before Story ...
Scenario: A scenario with failed step
Before Scenario ...
Given I do nothing
Then I fail (FAILED)
(junit.framework.AssertionFailedError: I failed!)
After Any Scenario ...
After Failed Scenario ...

Scenario: A scenario that is not executed because if followed a failed scenario
Before Scenario ...
Given I do nothing
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Failed to run story org/jbehave/examples/trader/stories/skip_scenarios_after_failure.story
junit.framework.AssertionFailedError: I failed!
	at junit.framework.Assert.fail(Assert.java:47)
	at org.jbehave.examples.trader.steps.SandpitSteps.doFail(SandpitSteps.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jbehave.core.steps.StepCreator$ParameterizedStep.perform(StepCreator.java:444)
	at org.jbehave.core.embedder.StoryRunner$FineSoFar.run(StoryRunner.java:378)
	at org.jbehave.core.embedder.StoryRunner.runStepsWhileKeepingState(StoryRunner.java:365)
	at org.jbehave.core.embedder.StoryRunner.runScenarioSteps(StoryRunner.java:336)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:229)
	at org.jbehave.core.embedder.StoryRunner.run(StoryRunner.java:147)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:681)
	at org.jbehave.core.embedder.Embedder$EnqueuedStory.call(Embedder.java:645)
	at org.jbehave.core.embedder.Embedder$NonThreadingExecutorService.submit(Embedder.java:583)
	at org.jbehave.core.embedder.Embedder.submit(Embedder.java:243)
	at org.jbehave.core.embedder.Embedder.enqueueStory(Embedder.java:236)
	at org.jbehave.core.embedder.Embedder.runStoriesAsPaths(Embedder.java:196)
	at org.jbehave.examples.trader.annotations.TraderAnnotatedEmbedder.run(TraderAnnotatedEmbedder.java:51)
	at org.jbehave.core.embedder.Embedder.runStoriesWithAnnotatedEmbedderRunner(Embedder.java:163)
	at org.jbehave.mojo.RunStoriesWithAnnotatedEmbedderRunner.execute(RunStoriesWithAnnotatedEmbedderRunner.java:20)
	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)
	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)
	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)
	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)
	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)
Running story org/jbehave/examples/trader/stories/step_composition.story

(org/jbehave/examples/trader/stories/step_composition.story)
Meta:
@theme parametrisation

Before Story ...
Scenario: Composite steps in action.
Before Scenario ...
!-- Composite steps are identified by the @Composite method-level annotation, which is independent of the
!-- @Given/@When/@Then annotations.  The @Composite is optional and complements any of the @Given/@When/@Then annotations.
!-- Once the composite step is matched (via any of the supported mechanisms, e.g. normal parameters matching or a parametrised scenario),
!-- if the @Composite annotation is found on the matched method, the "composed" steps defined in the @Composite annotations are created
!-- using the parameters specified in the @Named annotations of the composite step.   In other words, the composed steps are treated
!-- as a group of parametrised steps, much in the same way as the steps in a parametrised scenario.
After Any Scenario ...
After Successful Scenario ...

Scenario: Using a composite step with normal parameter matching
Before Scenario ...
!-- Annotated method:
!-- @Given("%customer has previously bought a %product") // used in normal parameter matching
!-- @Composite(steps = { "Given <customer> is logged in",
!--                      "Given <customer> has a cart",
!--                      "When a <product> is added to the cart" })
!-- public void aCompositeStep(@Named("customer") String customer, @Named("product") String product) { // composed steps use these named parameters
!-- }
Given Mr Jones has previously bought a ticket (PENDING)
@Given("Mr Jones has previously bought a ticket")
@Pending
public void givenMrJonesHasPreviouslyBoughtATicket(){
  // PENDING
}

After Any Scenario ...
After Failed Scenario ...

Scenario: Using a composite step in a parameterised scenario
Before Scenario ...
Examples:
!-- Annotated method:
!-- @Given("<customer> has previously bought a <product>") // used in parameterised scenario
!-- @Composite(steps = { "Given <customer> is logged in",
!--                      "Given <customer> has a cart",
!--                      "When a <product> is added to the cart" })
!-- public void aCompositeStep(@Named("customer") String customer, @Named("product") String product) { // composed steps use these named parameters
!-- }
Given <customer> has previously bought a <product>

|customer|product|
|Mr Jones|ticket|



Example: {customer=Mr Jones, product=ticket}
!-- Annotated method:
!-- @Given("<customer> has previously bought a <product>") // used in parameterised scenario
!-- @Composite(steps = { "Given <customer> is logged in",
!--                      "Given <customer> has a cart",
!--                      "When a <product> is added to the cart" })
!-- public void aCompositeStep(@Named("customer") String customer, @Named("product") String product) { // composed steps use these named parameters
!-- }
Given <customer> has previously bought a <product> (PENDING)
@Given("<customer> has previously bought a <product>")
@Pending
public void givencustomerHasPreviouslyBoughtAproduct(){
  // PENDING
}


After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story
Trader is alerted of status
(org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story)
Narrative:
In order to ensure a quick response
As a trader
I want to monitor stock prices
Before Story ...
Scenario: 
Before Scenario ...
Given a stock of symbol STK1 and a threshold of 15.0
When the stock is traded at price 5.0
Then the alert status is OFF
When the stock is sold at price 11.0
Then the alert status is OFF
When the stock is sold at price 16.0
!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  
we set a higher priority to the less-greedy pattern
Then the alert status is ON
Then the alert status is currently ON
After Any Scenario ...
After Successful Scenario ...

Scenario: 
Before Scenario ...
Examples:
Given a stock of <symbol> and a <threshold>
When the stock is traded with <price>
Then the trader is alerted with <status>

|symbol|threshold|price|status|
|STK1|15.0|5.0|OFF|
|STK1|15.0|11.0|OFF|
|STK1|15.0|16.0|ON|



Example: {symbol=STK1, threshold=15.0, price=5.0, status=OFF}
Given a stock of STK1 and a 15.0
When the stock is traded with 5.0
Then the trader is alerted with OFF

Example: {symbol=STK1, threshold=15.0, price=11.0, status=OFF}
Given a stock of STK1 and a 15.0
When the stock is traded with 11.0
Then the trader is alerted with OFF

Example: {symbol=STK1, threshold=15.0, price=16.0, status=ON}
Given a stock of STK1 and a 15.0
When the stock is traded with 16.0
Then the trader is alerted with ON

After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/trader_sells_all_stocks.story
Story: Any free-text description can go here (and Story: is also optional)
(org/jbehave/examples/trader/stories/trader_sells_all_stocks.story)
Narrative:
In order to cut my losses
As a Trader
I want to sell all stocks when alerted
Before Story ...
Scenario: Trader sells it all and goes to Bermuda.
This scenario shows that the same step pattern can be used for different step types
Before Scenario ...
GivenStories:
org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story 

Trader is alerted of status
(org/jbehave/examples/trader/stories/trader_is_alerted_of_status.story)
Narrative:
In order to ensure a quick response
As a trader
I want to monitor stock prices
Before Given Story ...
Scenario: 
Before Scenario ...
Given a stock of symbol STK1 and a threshold of 15.0
When the stock is traded at price 5.0
Then the alert status is OFF
When the stock is sold at price 11.0
Then the alert status is OFF
When the stock is sold at price 16.0
!-- The next steps show step priority in action, since both textual steps could be matched by same regex pattern,  
we set a higher priority to the less-greedy pattern
Then the alert status is ON
Then the alert status is currently ON
After Any Scenario ...
After Successful Scenario ...

Scenario: 
Before Scenario ...
Examples:
Given a stock of <symbol> and a <threshold>
When the stock is traded with <price>
Then the trader is alerted with <status>

|symbol|threshold|price|status|
|STK1|15.0|5.0|OFF|
|STK1|15.0|11.0|OFF|
|STK1|15.0|16.0|ON|



Example: {symbol=STK1, threshold=15.0, price=5.0, status=OFF}
Given a stock of STK1 and a 15.0
When the stock is traded with 5.0
Then the trader is alerted with OFF

Example: {symbol=STK1, threshold=15.0, price=11.0, status=OFF}
Given a stock of STK1 and a 15.0
When the stock is traded with 11.0
Then the trader is alerted with OFF

Example: {symbol=STK1, threshold=15.0, price=16.0, status=ON}
Given a stock of STK1 and a 15.0
When the stock is traded with 16.0
Then the trader is alerted with ON

After Any Scenario ...
After Successful Scenario ...

After Given Story ...

Given the alert status is OFF
Given a trader of name Mauro
And the alert status is OFF
Given a stock of symbol STK1 and a threshold of 1.5
When the stock is traded at price 2.0
Then the alert status is ON
When the trader sells all stocks
Then the trader is left with no stocks
After Any Scenario ...
After Successful Scenario ...

Scenario: Trader counts the days to go to Bermuda.
Before Scenario ...
Given a date of 2010-06-21
When 2 days pass
Then the date is 2010-06-23
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/traders_can_be_subset.story

(org/jbehave/examples/trader/stories/traders_can_be_subset.story)
Before Story ...
Scenario: Traders can be searched by name
Before Scenario ...
Given the trader ranks: 
|name |rank    |
|Larry|Stooge 3|
|Moe  |Stooge 1|
|Curly|Stooge 2|
Larry (Stooge 3) has done 30000 trades
Moe (Stooge 1) has done 10000 trades
Curly (Stooge 2) has done 20000 trades
Then the current trader activity is: 
|name |trades|
|Larry|30000 |
|Moe  |10000 |
|Curly|20000 |
!-- This is a comment, which will be ignored in the execution
When traders are subset to ".*y" by name
!-- This is another comment, also ignored, 
but look Ma! I'm on a new line!
Then the traders returned are:
|name |rank    |
|Larry|Stooge 3|
|Curly|Stooge 2|
After Any Scenario ...
After Successful Scenario ...

 ... Browser has been put to rest 


After Story ...

Running story org/jbehave/examples/trader/stories/unmatched_search_term.story

(org/jbehave/examples/trader/stories/unmatched_search_term.story)
Before Story ...
Scenario: Search term does match examples table header
Before Scenario ...
Examples:
Given that I am on Google's Homepage
When I enter the search term <ridiculousSearchTerm> and proceed
Then I should see ridiculous things

|ridiculousSearchTerm|
|Hello Kitty|



Example: {ridiculousSearchTerm=Hello Kitty}
 ... on Google!
Given that I am on Google's Homepage
 ... entering Hello Kitty into box and clicking continue!
When I enter the search term Hello Kitty and proceed
 ... ahhh, so much pink!!!
Then I should see ridiculous things

After Any Scenario ...
After Successful Scenario ...

Scenario: Search term does not match examples table header and step is marked as pending
Before Scenario ...
Examples:
Given that I am on Google's Homepage
When I enter the search term <ridiculousSearchTerm> and proceed
Then I should see ridiculous things

|ridiculoussearchterm|
|Hello Kitty|



Example: {ridiculoussearchterm=Hello Kitty}
 ... on Google!
Given that I am on Google's Homepage
When I enter the search term <ridiculousSearchTerm> and proceed (PENDING)
Then I should see ridiculous things (NOT PERFORMED)

After Any Scenario ...
After Failed Scenario ...

 ... Browser has been put to rest 


After Story ...


(AfterStories)
After Stories ...
Generating reports view to '/Users/mauro/git/jbehave-core/examples/trader-annotations/target/jbehave' using formats '[console, txt, html, xml, stats]' and view properties '{defaultFormats=stats, decorateNonHtml=true, viewDirectory=view, decorated=ftl/jbehave-report-decorated.ftl, reports=ftl/jbehave-reports-with-totals.ftl, maps=ftl/jbehave-maps.ftl, navigator=ftl/jbehave-navigator.ftl, views=ftl/jbehave-views.ftl, nonDecorated=ftl/jbehave-report-non-decorated.ftl}'
Reports view generated with 28 stories (of which 12 pending)  containing 40 scenarios (of which  4 failed and 18 pending)
Meta filters did not allow 0 stories and  1 scenarios
[WARNING] Annotated instance org.jbehave.examples.trader.annotations.TraderAnnotatedPathRunner@52254ae5 not of type interface org.jbehave.core.Embeddable
[INFO] [install:install {execution: default-install}]
[INFO] Installing /Users/mauro/git/jbehave-core/examples/trader-annotations/target/jbehave-trader-annotations-example-3.4-SNAPSHOT.jar to /Users/mauro/.m2/repository/org/jbehave/jbehave-trader-annotations-example/3.4-SNAPSHOT/jbehave-trader-annotations-example-3.4-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Tue May 03 01:14:03 CEST 2011
[INFO] Final Memory: 27M/81M
[INFO] ------------------------------------------------------------------------
